#!/bin/bash
#G (Gamma) Production version
#$1: Veritas Base Directory  Ex: $SCRATCH/simulations/veritas
#$2:Zn_AZ and threshold specification EX: 20Deg  (if az=0) or 
#   20_180Deg
#$3:Threshold spec ex 45mv or 50 mv
#$4 Season:teleSpec: Ex WU or SV
#$5: Output file BaseName Ex: CrabA or Noise4 Noise3_5 MDL15 etc.
#$6: Input Sub-dir: Ex: ABCD
#$7: start direction Index. defualt is 0. 
#$8: end direction Index. defualt is 8. 
#####################################################################

function usage()
{
  echo '***GProcessAll usage:'
  echo '   $1 Veritas Base Directory  Ex: $SCRATCH/simulations/veritas'
  echo '   $2:Zn_AZ and threshold specification EX: 20Deg  20_180Deg'
  echo '   $3:Threshold spec ex 45mv or 50mv'
  echo '   $4 Season:teleSpec: Ex WU or SV SO'
  echo '   $5: Output file BaseName Ex: CrabA or Noise4 or MDL15NA'
  echo '   $6: Input Sub-dir: Ex: ABCD'
  echo '   $7: start direction Index. defualt is 0.(=0.0deg)'
  echo '   $8: end direction Index. defualt is 8.(=2.0deg)'
  echo ' Ex:  ./GProcessAll V330 1_225Deg 50mv SO MDL8OA IJKL 1 1'
  echo '***'
}

#####################################################################
#Main script
##############
if [  ! -n "$6" ]; then
        usage
        exit
fi

##################
# Bring in GenerateVBFName and GetUniqueNumber  functions
##################
if [ ! -e UtilityFunctions.scr ]; then
    cp $KASCADEBASE/scripts/UtilityFunctions.scr ./
fi
source UtilityFunctions.scr

lcl=$PWD
echo lcl: $lcl

VDIRBASE=$1
ZN_AZDEG=$2
THRESH=$3
SEASARRAY=$4
OUTFILEBASE=$5
ARRAYCONFIG=$6

echo Argument1: $VDIRBASE
echo Argument2: $ZN_AZDEG
echo Argument3: $THRESH
echo Argument4: $SEASARRAY
echo Argument5: $OUTFILEBASE
echo Argument6: $ARRAYCONFIG
echo Argument7: $7
echo Argument8: $8


host=$(hostname)
hostString=${host:0:6}
if test  "$hostString" = "edison"  #Are we running on Edison
then
  EDISON=enabled
  QUEUE=serial
  WALLTIME='10:00:00'
  QSUBEXT='.serial'
  MEMREQUEST=' -l vmem=8GB '
  echo '***Edison Cluster***'
fi

hostString=${host:0:6}
if test  "$hostString" = "cvrsvc"  #Are we running on Carver
then
  CARVER=enabled
  QUEUE=serial
  WALLTIME='10:00:00'
  MEMREQUEST=' -l pvmem=8GB'
  echo '***Carver Cluster***'
fi

hostString=${host:0:6}
if test  "$hostString" = "hansen"  #Are we running on Hansen
then
  HANSEN=enabled
  QUEUE=physics
  WALLTIME='30:00:00'
  #QUEUE=standby
  #WALLTIME='04:00:00'
  MEMREQUEST=' -l mem=8GB'
  echo '***Hansen Cluster:'$QUEUE' queue ***'
fi

hostString=${host:0:6}
if test  "$hostString" = "coates"  #Are we running on coates
then
  COATES=enabled
  #QUEUE=physics
  #WALLTIME='30:00:00'
  QUEUE=standby
  WALLTIME='04:00:00'
  MEMREQUEST=' -l mem=8GB'
  echo '***Coates Cluster:'$QUEUE' queue ***'
fi

hostString=${host:0:5}
if test  "$hostString" = "conte"  #Are we running on conte
then
  CONTE=enabled
  QUEUE=standby
  WALLTIME='04:00:00'
  MEMREQUEST=' -l mem=8GB'
  echo '***Conte Cluster:'$QUEUE' queue ***'
fi

SeasonSpec=${SEASARRAY:0:1}
Base=$SeasonSpec$OUTFILEBASE
echo Base: $Base

pwd

if  [ -z "$7" ] ; 
then
  let i=0;
else
  let i=$7
fi

if  [ -z "$8" ] ; 
then
  let end=8;
else
  let end=$8
fi

echo i start: $i
echo end: $end

GBase=$SEASARRAY'G'$ZN_AZDEG'2D'$THRESH
echo GBase: $GBase

GDir=$GBase'1234M2'$Base                  #Add MDL15UA to dir name. Needed by ksWeRock
GDirOrig=$GBase'1234M2'$SeasonSpec$ARRAYCONFIG 
echo GDir: $GDir
echo GDirOrig: $GDirOrig

cd $VDIRBASE'/gammas/'
pwd
mkdir -pv $GDir
if [ -d "$GDirOrig" ]; then
    echo moving ./$GDirOrig'/*' to  './'$GDir'/'
    mvCmd='mv -v ./'$GDirOrig'/*  ./'$GDir'/'
    $mvCmd
    rmdir -v $GDirOrig
fi

cd $VDIRBASE'/gammas/'$ARRAYCONFIG
pwd

ls | grep 1234M2 | grep vbf|grep $ZN_AZDEG'2D'$THRESH|xargs -n1 mv -v --target=$VDIRBASE'/gammas/'$GDir
##############################################################################

while test $i -le $end
 do
    direction=$i
    if test $direction = '0'
    then
       WBL=0.0
    fi
    if test $direction = '1'
    then
       WBL=0.25
    fi
    if test $direction = '2'
    then
      WBL=0.5 
    fi
    if test $direction = '3'
    then
       WBL=0.75
    fi
    if test $direction = '4'
    then
       WBL=1.0
    fi
    if test $direction = '5'
    then
       WBL=1.25
    fi
    if test $direction = '6'
    then
       WBL=1.5
    fi
    if test $direction = '7'
    then
       WBL=1.75
    fi
    if test $direction = '8'
    then
       WBL=2.0
    fi
    ##############################################################################
    # Get the VBF file name: New format
    ##############################################################################
    ARRAY=${SEASARRAY:1:1}A

    zn_az=${ZN_AZDEG%%Deg}
    ZN=${zn_az%%_*}
    if [ "$ZN" = "$zn_az" ]; then
       AZ=0
    else
       AZ=${zn_az##*_}
    fi

    GenerateVBFName "G" $ARRAY $SeasonSpec $ZN $AZ $WBL $OUTFILEBASE
    echo Output File Name: $VBFFILENAME
    ###############################################################################

    WeRockVBF=$SEASARRAY'G'$ZN_AZDEG'2D'$THRESH 
    sgeFile=$lcl'/'$Base'G'$ZN_AZDEG$WBL'.pbs'

    echo "#"!/bin/bash                                             >$sgeFile
    echo "#PBS -l walltime="$WALLTIME                             >>$sgeFile
    echo "#PBS "$MEMREQUEST                                       >>$sgeFile
    if [ -n "$HANSEN" ] || [ -n "$COATES" ] ; then
      echo source /etc/profile                                    >>$sgeFile
      echo module load gcc/4.7.2                                  >>$sgeFile
    fi
    echo date                                                     >>$sgeFile
    echo cd $VDIRBASE'/../../veritas'                             >>$sgeFile
    echo './ksWeRock.scr '$WeRockVBF 98020 1234M2  \\             >>$sgeFile
    echo $direction $Base ">"$lcl'/'$Base'G'$ZN_AZDEG$WBL'.log'   >>$sgeFile
    echo cd $lcl                                                  >>$sgeFile
    echo mv -v $VDIRBASE'/'$WeRockVBF'1234M2D'$direction$Base'.vbf' $VBFFILENAME >>$sgeFile
    echo date                                                     >>$sgeFile

    chmod 700 $sgeFile
    qsub$QSUBEXT -q $QUEUE -V -e $sgeFile'.err' -o $sgeFile'.log' $sgeFile 

    i=$((i+1))			#do next directoion
done
