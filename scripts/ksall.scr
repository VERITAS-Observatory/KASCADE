#!/bin/bash
#This runs production kascade on LINUX. Arguments are:
#$0 ./kasall.scr
#$1 primary Energy in gev (integer only)
#$2 Shower type specification string (To be included in config file names and 
#                                     in shower namesLike P1W,G1W, He4_1W)
#$3 Lowest flie id
#$4 Highest file id.
#$5 data disk directory.(Where output Te  files go, cannot be blank!!!)

echo "**********************************************************************"
echo "**********************************************************************"

echo $0 $1 $2 $3 $4 $5 

src=$KASCADEBASE'/bin'
echo binary src dir is $src

inpDir=$KASCADEBASE'/inputs'
echo inputs dir is $inpDir

host=$(hostname -s)
while [ -z "$host" ]; 
  do
    echo "Failed to get hostname. Retrying"
    host=$(hostname -s)
done
echo Running on $host

#Set up private working directory for this run. 
whp="/project/veritas/sembrosk/whipple"

#Keeps random number independent
#use combo of process id ($$)and number of nanosec(date +%N) since last 
#second tick to get unique value. (least count is micro sec at best)
let dirID=$(date +10#%N)+$$     # The 10# prevents leading 0's causeing errors
while [ -d "$dirID" ]; do
  let dirID=$(date +10#%N)+$$
done
wrkdir=$whp/$dirID

#create working directory.
mkdir  $wrkdir
cd $wrkdir
echo Working Directory is `pwd`


#Make links to config files
ksKascadeConfig=ksKascade$2'.config'
ksLightConfig=ksLight$2'.config'
ksTriggerConfig=ksTrigger$2'.config'
ln -s $inpDir/$ksKascadeConfig $ksKascadeConfig
ln -s $inpDir/$ksLightConfig $ksLightConfig
ln -s $inpDir/$ksTriggerConfig $ksTriggerConfig

#make a links to the various input files:
ln -s $inpDir/PSTMultiplicity3.bin PSTMultiplicity3.bin
ln -s $inpDir/extinction_uv.dat extinction_uv.dat

#All auxillary files are in wrkdir.
#All temp data kept in $wrkdir. 
#Final results go into $5;
#Make sure directory exists, if not create it.
if [ ! -d "$5" ]; then
       mkdir -p $5
fi

#Setup unique random seed files into working dir.
cp -v $inpDir/ksKascade.ran ksKascade.ran  #Copy in a file to overwrite
let seedK=$(date +10#%N)+$$      #Add in process id ($$),10# prevents error
    done
$src/randomCreateRanluxSeed -s $seedK -o ksKascade.ran
	                    #date +%N  +$$ gives Number of nanoseconds from 
			    #last second  + process id.
cp -v $inpDir/ksLight.ran ksLight.ran  
let seed=$(date +10#%N)+$$                
$src/randomCreateRanluxSeed -s $seed -o ksLight.ran

cp -v $inpDir/ksTrigger.ran ksTrigger.ran  
let seed=$(date +10#%N)+$$                
$src/randomCreateRanluxSeed -s $seed -o ksTrigger.ran

#Set up base name of showers. 
#Note it includes data path which better not be blank
Shwr=$5'/'$2'GeV'$1'te.d'


#Setup to loop over showers
i="$3"
while test $i -le $4
  do
#ksKascade
    segfile='Seg.d'$i
    if [ -e "$segfile" ]; then
	rm $segfile
    fi

    $src/ksKascade -config=$ksKascadeConfig -RandomSeedFileName=ksKascade.ran  -PrimaryEnergyGeV=$1 -ShowerID=$i $segfile
		   
#ksLight
    pefile='Pe.d'$i
    if [ -e "$pefile" ]; then
	rm $pefile
    fi
    $src/ksLight -config=$ksLightConfig -RandomSeedFileName=ksLight.ran $segfile $pefile
    rm -v $segfile		#Remove segment file

#ksPeSort
    pesfile='Pes.d'$i
    if [ -e "$pesfile" ]; then
	rm $pesfile
    fi
    $src/ksPeSort $pefile $pesfile
    rm $pefile		#Delete pe file

#ksTrigger
    tefile=$Shwr$i
    if [ -e "$tefile" ]; then
	rm $tefile
    fi
    $src/ksTrigger  -config=$ksTriggerConfig  \
                    -RandomSeedFileName=ksTrigger.ran $pesfile $tefile
    rm $pesfile

#compress te file: THIS DOESN'T SEEM TO WORK!
#
#    if [ -e "$tefile.bz2" ]; then
#	rm $tefile.bz2             #Remove any previous version of output
#    fi
#    bzip2 -zv $tefile        #compress the output Te file

    i=$((i+1))			#do next shower
done



#Cleanup
cd $wrkdir
rm -vf *
cd ..
rmdir $dirID




