#!/bin/bash
#This runs production kascade on LINUX. Arguments are:
#$0 ./kasall.scr
#$1 primary Energy in gev (integer only)
#$2 Shower type specification string (To be included in config file names and 
#                                     in shower names like VP1Deg2D50mv1234M2
#                                     or VHe4_1Deg2D50mv1234M2ABAA

#$3 Lowest flie id
#$4 Highest file id.
#$5 data disk directory.(Where output Te  files go, cannot be blank!!!)
#$6 working disk directory base: Where all temproary files are held)

KascadeEnable=enable
LightEnable=enable
PeSortMergeEnable=enable
TriggerEnable=enable
#AomegaEnable=enable                   #These next 2 operate on te files only
#ArrayTriggerEnable=enable

Fall09ArrayPositions=enable       #Define if we used moved T1 array.Fall09+
                                   #Else we get original T1 postion (near T4)
RemoveSingleVBF=enable
CleanupEnable=enable
DebugPrintEnable=enable



echo "**********************************************************************"
echo "**********************************************************************"

echo $0 $1 $2 $3 $4 $5 $6

###########################################################################
#Setup directory pointers
src=$KASCADEBASE'/bin'
echo binary src dir is $src

inpDir=$KASCADEBASE'/inputs'
echo inputs dir is $inpDir

host=$(hostname -s)
while [ -z "$host" ]; 
  do
    echo "Failed to get hostname. Retrying"
    host=$(hostname -s)
done
echo Running on $host

#########################################################################
#Set up private working directory for this run. 
#Keeps random number independent

#Make sure base of working directory name exists
if [ -z "$6" ]; then
    echo "ksall:Working dir base must be specified"
    exit
fi
#Make sure working directory base exists If not make it..
if [ ! -d "$6" ]; then
       mkdir -p $6
fi


#Make sure Data directory is specified.
if [ -z "$5" ]; then
    echo "ksall:Data Directory must be specified"
    exit
fi

#Make sure Data directory is exists. If not make it.
if [ ! -d "$5" ]; then
       mkdir -p $5
fi
echo Data Directory: $5

#use combo of process id ($$)and number of nanosec(date +%N) since last 
#second tick to get unique value. (least count is micro sec at best)
let dirID=$(date +10#%N)+$$     # The 10# prevents leading 0's causeing errors
while [ -d "$dirID" ]; do
  let dirID=$(date +10#%N)+$$
done

#All auxillary files are in wrkdir.
#All temp data kept in $wrkdir. 
#Final results go into $5;

cd $6
let wspacemin=35000000
wdir=$6
wdirString=${wdir:0:4}
#echo wdirString $wdirString
#echo wspacemin $wspacemin
if test  "$wdirString" = "/tmp"  #Are we running on TUCSON cluster
then
     wsize="$(df $6 | grep /dev | gawk '{print $4 }')"
     echo Space on $6: $wsize
 
    let sizew=$wsize
    if test $sizew -lt $wspacemin
     then
        echo 'Not enough space( '$wspacemin 'required) on '$6
	echo Switching workingDir to $5
	cd $5
     fi
fi

if [ ! -d "workingScratch" ]; then
       mkdir -p workingScratch
       chmod 777 workingScratch
fi
cd workingScratch          #This is a  sub dir of the data dir (PBS)
                           #or sub dir of working dir. (isis)

#create working directory.
mkdir $dirID
cd $dirID

wrkdir="$PWD"

echo Working Directory is $wrkdir

##################################################################
#Parse the specification string
jobSpec=$2
TelSpec=${jobSpec:0:1}                    #gets W from WG20DegN0.5Deg50mv
PrimarySpec=${jobSpec%%Deg*}'Deg'         #gets VG20Deg from VG20Deg2DDeg1234M2

ThresholdSpec=${jobSpec##*Deg2D}          #gets 50mv1234M2AAAB from 
                                          #VG20Deg2D50mv1234M2AAAB
if [ "$ThresholdSpec" = "$jobSpec" ]; then
    ThresholdSpec=${jobSpec##*Deg}         #No Deg2D: gets 70mv1234M2ABBC from 
                                           #VG20DegN0.5Deg70mv1234M2ABBC
fi

TriggerSpec=${jobSpec%%$ThresholdSpec}     #Get other half: VG20Deg2D from
                                           #VG20Deg2D50mv1234M2BBAB
ThreshSpec=${ThresholdSpec:0:4}            #Gets 50mv from 50mv1234M2BBAB


#########################
#Now we need to parse out the mutiplicity, the trigger configuration
#and the detector configurations
ArrayConfigSpec=${ThresholdSpec##$ThreshSpec} # gets 1234M2BBAB from 
                                             #50mv1234M2BBAB
let TEnd=$(expr length $ArrayConfigSpec)

if [ -n "$DebugPrintEnable" ]; then
  echo ThresholdSpec: $ThresholdSpec
  echo ArrayConfigSpec $ArrayConfigSpec
  echo ThreshSpec $ThreshSpec
fi
  
if test "$ThresholdSpec" != "$ArrayConfigSpec" 
then

     ArrayConfig=${ArrayConfigSpec:0:4}   #gets 1234 from  1234M2BBAB
     ArrayMult=${ArrayConfigSpec:5:1}     #gets 2 from 1234M2BBAB

     if [ -n "$DebugPrintEnable" ]; then
       echo ArrayConfig $ArrayConfig
       echo ArrayMult $ArrayMult
     fi

     if test $TEnd = 6           #See if we have detector specs per telescope
     then
       let dcount=0             #No. Treat all tels as identical
     else
       if test ! $TEnd = 10
       then
          echo "ksallVBF: If Option 2 must contains Dector Array specs it must copntian 4 of them. (EX:BBAB)"
          exit
       fi  
                                #Parse the detector specs to find the 
                                #different ones
       DetectArraySpec=${ArrayConfigSpec:6:4}
       let dcount=1
       dspec[0]=${DetectArraySpec:0:1}

       if [ -n "$DebugPrintEnable" ]; then
          echo TEnd: $TEnd
          echo Detector Array Specifications: $DetectArraySpec
          echo dcount: $dcount  dspec[0] ${dspec[0]}
       fi

       let i=1
       while test $i -le 3            #Test the others to see if they duplicate
       do
        let j=0
        let dlast=$dcount
        dspec[$dcount]=${DetectArraySpec:$i:1} #So we have a new one on, but 
           if [ -n "$DebugPrintEnable" ]; then
              echo i: $i dcount: $dcount dspec[dcount]: ${dspec[$dcount]} 
	   fi

	dcount=$((dcount+1))                   #reject it if its a duplicate
        while test $j -lt $dlast
        do
           if [ -n "$DebugPrintEnable" ]; then
              echo i: $i j: $j dspec[j]: ${dspec[$j]} 
              echo DetectArraySpec:i:1: ${DetectArraySpec:$i:1}
	   fi

	   if test ${DetectArraySpec:$i:1} = ${dspec[$j]}
           then
               dcount=$((dcount-1))            #reject it
               let j=$dlast
           fi
	   j=$((j+1))
        done
        i=$((i+1))
       done
    fi
else
    echo "ksallVBF: Option 2 must contain Array config/multiplicity (Ex.1234M2)"
    exit
fi

ThresholdSpec=$TelSpec$ThreshSpec   #Gives final threshold spec of V50mv

#############################################################################
#Make up names of all config files and make links to them
ksKascadeConfig=ksKascade$PrimarySpec'.config'
ln -s $inpDir/$ksKascadeConfig $ksKascadeConfig

ksLightConfig=ksLight$TelSpec'.config'
ln -s $inpDir/$ksLightConfig $ksLightConfig


if test $dcount -gt "0"
then
    let i=0
    while test $i -lt $dcount
    do
	ksTriggerConfig[$i]=ksTrigger$TriggerSpec${dspec[$i]}'.config'
        ksAomegaConfig[$i]=ksAomega$ThresholdSpec${dspec[$i]}'.config'
        ln -s $inpDir/${ksTriggerConfig[$i]} ${ksTriggerConfig[$i]}
        ln -s $inpDir/${ksAomegaConfig[$i]} ${ksAomegaConfig[$i]}
        i=$((i+1))
    done
else
    ksTriggerConfig[0]=ksTrigger$TriggerSpec'.config'
    ksAomegaConfig[0]=ksAomega$ThresholdSpec'.config'
    ln -s $inpDir/${ksTriggerConfig[0]} ${ksTriggerConfig[0]}
    ln -s $inpDir/${ksAomegaConfig[0]} ${ksAomegaConfig[0]}
    if [ -n "$DebugPrintEnable" ]; then
         echo ksTriggerConfig[0] ${ksTriggerConfig[0]}
         echo ksAomegaConfig[0] ${ksAomegaConfig[0]}
    fi
fi

ksArrayTriggerConfig=ksArrayTrigger.config
ln -s $inpDir/$ksArrayTriggerConfig $ksArrayTriggerConfig

##############################################################################

#make a links to the various input files:
ln -s $inpDir/PSTMultiplicity3.bin PSTMultiplicity3.bin
ln -s $inpDir/extinction_uv.dat extinction_uv.dat

#Setup unique random seed files into working dir.
cp -v $inpDir/ksKascade.ran ksKascade.ran  #Copy in a file to overwrite
let seedK=$(date +10#%N)+$$      #Add in process id ($$),10# prevents error

$src/randomCreateRanluxSeed -s $seedK -o ksKascade.ran
	                    #date +%N  +$$ gives Number of nanoseconds from 
			    #last second  + process id.
cp -v $inpDir/ksLight.ran ksLight.ran  
let seed=$(date +10#%N)+$$                
$src/randomCreateRanluxSeed -s $seed -o ksLight.ran

cp -v $inpDir/ksTrigger.ran ksTrigger.ran  
let seed=$(date +10#%N)+$$                
$src/randomCreateRanluxSeed -s $seed -o ksTrigger.ran

cp -v $inpDir/ksAomega.ran ksAomega.ran  #Copy in a file to overwrite
let seed=$(date +10#%N)+$$  
$src/randomCreateRanluxSeed -s $seed -o ksAomega.ran

cp -v $inpDir/ksArrayTrigger.ran ksArrayTrigger.ran 
let seed=$(date +10#%N)+$$
$src/randomCreateRanluxSeed -s $seed -o ksArrayTrigger.ran

########################################################################
#Set up base name of shower files. 
#Note it includes data path
ShwrTe=$5'/'$TriggerSpec'GeV'$1'te'
SingleShwr=$5'/'$TriggerSpec$ThreshSpec'GeV'$1
MultShwr=$5'/'$TriggerSpec$ThreshSpec$ArrayConfig'M'$ArrayMult'GeV'$1

#Define Multiplicity option
MultOption="-ArrayTriggerMultiplicity="$ArrayMult
echo MultOption $MultOption


##########################################################################
#Setup to loop over showers
i="$3"
while test $i -le $4
  do
#ksKascade
  segfile='Seg.d'$i              #Temp file, deleted later
  if [ -n "$KascadeEnable" ]; then
    if [ -e "$segfile" ]; then
	rm $segfile
    fi

    $src/ksKascade -config=$ksKascadeConfig -RandomSeedFileName=ksKascade.ran \
                   -PrimaryEnergyGeV=$1 -ShowerID=$i $segfile
  fi
		   
#ksLight
  pefile='Pe.d'$i                #Temp file, deleted later
  if [ -n "$LightEnable" ]; then
    if [ -e "$pefile" ]; then 
	rm $pefile
    fi
    $src/ksLight -config=$ksLightConfig -RandomSeedFileName=ksLight.ran \
                  $segfile $pefile
    rm -v $segfile		#Remove segment file
  fi


#ksPeSortMerg
  pesfile='Pes.d'$i           #Temp file, deleted later
  if [ -n "$PeSortMergeEnable" ]; then
    if [ -e "$pesfile" ]; then
	rm $pesfile
    fi

    $src/ksPeSortMerge $pefile $pesfile
    rm Temp*            #delete temp sort files.
  fi

#############################################################################
# Loop over different detector configurations
  let j=0
  MDirFile=$SingleShwr'MDir.d'$i          #We keep this one
  if [ -e "$MDirFile" ]; then
     rm -v $MDirFile
  fi
  if test $dcount = 0
  then
   let dlast=1
  else
   let dlast=$dcount
  fi

  while test $j -lt $dlast
  do
#ksTrigger
    if test $dcount = 0
    then
      tefile=$ShwrTe'.d'$i                  #We keep this one
    else
      tefile=$ShwrTe${dspec[$j]}'.d'$i                  #We keep this one
    fi
    if [ -n "$TriggerEnable" ]; then
      if [ -e "$tefile" ]; then
	  rm $tefile
      fi

      ######################################################################## 
      if test $dlast -gt 1
      then
        MountDirectionsOption='-SaveMountDirectionsToFile=ON' 

#For all subsequent passes but differeent configs reuse telescope directions
        if test $j -gt "0"
        then
           MountDirectionsOption='-LoadMountDirectionsFromFile=ON'
        fi
      fi
      ########################################################################

      if [ -n "$DebugPrintEnable" ]; then
        echo MountDirectionsOption: $MountDirectionsOption
        echo MountDirectionsFileName: $MDirFile
      fi

      $src/ksTrigger  -config=${ksTriggerConfig[$j]} \
		    $MountDirectionsOption \
		    -MountDirectionsFileName=$MDirFile \
                    -RandomSeedFileName=ksTrigger.ran $pesfile $tefile
    fi
    j=$((j+1))
  done

    if [ -n "$TriggerEnable" ]; then
      rm $pesfile
    fi


#ksAomega
  let j=0
  while test $j -lt $dlast
  do
    if test $dcount = 0
    then
      tefile=$ShwrTe'.d'$i                  #We kept this one
      rootFile=$SingleShwr'.d'$i'.root'
      VBFFile=$SingleShwr'.d'$i'.vbf'
    else
      tefile=$ShwrTe${dspec[$j]}'.d'$i                  #We keep this one
      rootFile=$SingleShwr${dspec[$j]}'.d'$i'.root'
      VBFFile=$SingleShwr${dspec[$j]}'.d'$i'.vbf'
    fi

    if [ -n "$AomegaEnable" ]; then

      if [ -n "$DebugPrintEnable" ]; then
         echo VBFOutputFileName: $VBFFile
         echo j: $j ksAomegaConfig[j] ${ksAomegaConfig[$j]}
      fi
      $src/ksAomega -config=${ksAomegaConfig[$j]} \
                  -RandomSeedFileName=ksAomega.ran \
                  -VBFOutputFileName=$VBFFile  $tefile
    fi

    j=$((j+1))
  done


#ksArrayTrigger		   
  if [ -n "$ArrayTriggerEnable" ]; then

  #Make multiple links to file to use for different telescopes
  #Note if dcount=0 we use the same file for all telescopes.
    VBFFileMult=$MultShwr'.d'$i'.vbf'      #Ouput file Not local

    #Zero the  ShowerNames options list.
    ShowerNameOptions=

    if [ ${ArrayConfig:0:1} = '1' ]; then
      VBFFileT1=T1.vbf       #local
      if test $dcount = 0
      then
         ln -s $VBFFile $VBFFileT1
      else
         ln -s $SingleShwr${DetectArraySpec:0:1}'.d'$i'.vbf' $VBFFileT1
      fi

      ShowerNameOptions=$ShowerNameOptions' -T1ShowerFileName='
      ShowerNameOptions=$ShowerNameOptions$VBFFileT1
    fi

    if [ ${ArrayConfig:1:1} = '2' ]; then
      VBFFileT2=T2.vbf       #local
      if test $dcount = 0
      then
         ln -s $VBFFile $VBFFileT2
      else
         ln -s $SingleShwr${DetectArraySpec:1:1}'.d'$i'.vbf' $VBFFileT2
      fi

      ShowerNameOptions=$ShowerNameOptions' -T2ShowerFileName='
      ShowerNameOptions=$ShowerNameOptions$VBFFileT2
    fi

    if [ ${ArrayConfig:2:1} = '3' ]; then
      VBFFileT3=T3.vbf       #local
      if test $dcount = 0
      then
         ln -s $VBFFile $VBFFileT3
      else
         ln -s $SingleShwr${DetectArraySpec:2:1}'.d'$i'.vbf' $VBFFileT3
      fi

      ShowerNameOptions=$ShowerNameOptions' -T3ShowerFileName='
      ShowerNameOptions=$ShowerNameOptions$VBFFileT3
    fi

    if [ ${ArrayConfig:3:1} = '4' ]; then
      VBFFileT4=T4.vbf       #local
      if test $dcount = 0
      then
         ln -s $VBFFile $VBFFileT4
      else
         ln -s $SingleShwr${DetectArraySpec:3:1}'.d'$i'.vbf' $VBFFileT4
      fi

      ShowerNameOptions=$ShowerNameOptions' -T4ShowerFileName='
      ShowerNameOptions=$ShowerNameOptions$VBFFileT4
    fi

    if [ -n "$DebugPrintEnable" ]; then
        echo MultOption: $MultOption
        echo  ShowerNameOptions: $ShowerNameOptions 
    fi
#########################################################################
#This is where we can specify an external mount position file
#########################################################################
if [ -z "$Fall09ArrayPositions" ]; then
      ArrayPositionsOptions='-TelescopeArrayPositions='$KASCADEBASE'/inputs/BasecampConfigurationList '  
else
       ArrayPositionsOptions='-TelescopeArrayPositions='$KASCADEBASE'/inputs/BaseCampFall2009ConfigurationList'  
fi
##########################################################################
  
    echo ArrayPositionsOptions: $ArrayPositionsOptions
    $src/ksArrayTrigger -config=$ksArrayTriggerConfig \
               -RandomSeedFileName=ksArrayTrigger.ran $ArrayPositionsOptions \
               $MultOption $ShowerNameOptions $VBFFileMult

    #Remove links.
    if [ -n "$CleanupEnable" ]; then
      if [ -e "$VBFFileT1" ]; then
       rm -v $VBFFileT1
      fi
      if [ -e "$VBFFileT2" ]; then
       rm -v $VBFFileT2
      fi
      if [ -e "$VBFFileT3" ]; then
       rm -v $VBFFileT3
      fi
      if [ -e "$VBFFileT4" ]; then
       rm -v $VBFFileT4
      fi
    fi

    #Remove single tel VBF files. (mostly for isis where space is tight)
    if [ -n "$RemoveSingleVBF" ]; then
      echo Removing Singel Tel VBF files
      if test $dcount = 0
      then
	if [ -e "$VBFFile" ]; then
	    rm -v $VBFFile
	fi
      else
#        if test [ -e "$SingleShwr${DetectArraySpec:0:1}'.d'$i'.vbf'" ];
#	then
		rm -v $SingleShwr${DetectArraySpec:0:1}'.d'$i'.vbf'
#	fi
#        if test [ -e $SingleShwr${DetectArraySpec:1:1}'.d'$i'.vbf' ];
#	then
		rm -v $SingleShwr${DetectArraySpec:1:1}'.d'$i'.vbf'
#	fi
#        if test [ -e $SingleShwr${DetectArraySpec:2:1}'.d'$i'.vbf' ];
#	then
		rm -v $SingleShwr${DetectArraySpec:2:1}'.d'$i'.vbf'
#	fi
#        if test [ -e $SingleShwr${DetectArraySpec:3:1}'.d'$i'.vbf' ];
#	then
		rm -v $SingleShwr${DetectArraySpec:3:1}'.d'$i'.vbf'
#	fi
     fi
   fi

  fi
  i=$((i+1))			#do next shower
done


##Cleanup:
if [ -n "$CleanupEnable" ]; then
  cd $wrkdir
  rm -vf *
  cd ..
  rmdir $dirID
fi



