#!/bin/bash
#This runs production kascade on LINUX. Arguments are:
#$0 ./kasall.scr
#$1 primary Energy in gev (integer only)
#$2 Shower type specification string (To be included in config file names and 
#                                     in shower names like VP1Deg2D50mv1234M2
#$3 Lowest flie id
#$4 Highest file id.
#$5 data disk directory.(Where output Te  files go, cannot be blank!!!)

echo "**********************************************************************"
echo "**********************************************************************"

echo $0 $1 $2 $3 $4 $5 

src=$KASCADEBASE'/bin'
echo binary src dir is $src

inpDir=$KASCADEBASE'/inputs'
echo inputs dir is $inpDir

host=$(hostname -s)
while [ -z "$host" ]; 
  do
    echo "Failed to get hostname. Retrying"
    host=$(hostname -s)
done
echo Running on $host

#Set up private working directory for this run. 
#Keeps random number independent

#use combo of process id ($$)and number of nanosec(date +%N) since last 
#second tick to get unique value. (least count is micro sec at best)
let dirID=$(date +10#%N)+$$     # The 10# prevents leading 0's causeing errors
while [ -d "$dirID" ]; do
  let dirID=$(date +10#%N)+$$
done

cd workingScratch          #This may be a link from the home dir (amdahl)
                       # or an actual sub dir of the running dir (isis)

#create working directory.
mkdir $dirID
cd $dirID

wrkdir="$PWD"

echo Working Directory is $wrkdir

##################################################################
#Parse the specification string
jobSpec=$2
TelSpec=${jobSpec:0:1}                    #gets W from WG20DegN0.5Deg50mv
PrimarySpec=${jobSpec%%Deg*}'Deg'         #gets VG20Deg from VG20Deg2DDeg1234M2

ThresholdSpec=${jobSpec##*Deg2D}           #gets 50mv1234M2 VG20Deg2D50mv1234M2
if [ "$ThresholdSpec" = "$jobSpec" ]; then
    ThresholdSpec=${jobSpec##*Deg}         #No Deg2D: gets 70mv1234M2 from 
                                           #VG20DegN0.5Deg70mv1234M2
fi

TriggerSpec=${jobSpec%%$ThresholdSpec}     #Get other half: VG20Deg2D from
                                           #VG20Deg2D50mv1234M2
let TEnd=$(expr length $ThresholdSpec)
TEnd=$((TEnd-4))
if [ $TEnd > 0 ];then
     TriggerMult=${ThresholdSpec:4:$TEnd}  #gets 1234M2 from  50mv1234M2
     ArrayConfig=${TriggerMult:0:4}
     ArrayMult=${TriggerMult:5:1}
     echo ArrayConfig $ArrayConfig
     echo ArrayMult $ArrayMult
else
    echo "ksallVBF: Option 2 must contain Array config/multiplicity (Ex.1234M2)"
    exit
fi

ThreshSpec=${ThresholdSpec:0:4}         #Gets 50mv from 50mv1234M2

ThresholdSpec=$TelSpec$ThreshSpec   #Gives final threshold spec of V50mv


#############################################################################
#Make up names of all config files and make links to them
ksKascadeConfig=ksKascade$PrimarySpec'.config'
ln -s $inpDir/$ksKascadeConfig $ksKascadeConfig

ksLightConfig=ksLight$TelSpec'.config'
ln -s $inpDir/$ksLightConfig $ksLightConfig

ksTriggerConfig=ksTrigger$TriggerSpec'.config'
ln -s $inpDir/$ksTriggerConfig $ksTriggerConfig

ksAomegaConfig=ksAomega$ThresholdSpec'.config'
ln -s $inpDir/$ksAomegaConfig $ksAomegaConfig

ksArrayTriggerConfig=ksArrayTrigger.config
ln -s $inpDir/$ksArrayTriggerConfig $ksArrayTriggerConfig

##############################################################################

#make a links to the various input files:
ln -s $inpDir/PSTMultiplicity3.bin PSTMultiplicity3.bin
ln -s $inpDir/extinction_uv.dat extinction_uv.dat

#All auxillary files are in wrkdir.
#All temp data kept in $wrkdir. 
#Final results go into $5;
#Make sure directory exists, if not create it.
if [ -z "$5" ]; then
    echo "ksall:Data Directory must be specified"
    exit
fi

if [ ! -d "$5" ]; then
       mkdir -p $5
fi

#Setup unique random seed files into working dir.
cp -v $inpDir/ksKascade.ran ksKascade.ran  #Copy in a file to overwrite
let seedK=$(date +10#%N)+$$      #Add in process id ($$),10# prevents error

$src/randomCreateRanluxSeed -s $seedK -o ksKascade.ran
	                    #date +%N  +$$ gives Number of nanoseconds from 
			    #last second  + process id.
cp -v $inpDir/ksLight.ran ksLight.ran  
let seed=$(date +10#%N)+$$                
$src/randomCreateRanluxSeed -s $seed -o ksLight.ran

cp -v $inpDir/ksTrigger.ran ksTrigger.ran  
let seed=$(date +10#%N)+$$                
$src/randomCreateRanluxSeed -s $seed -o ksTrigger.ran

cp -v $inpDir/ksAomega.ran ksAomega.ran  #Copy in a file to overwrite
let seed=$(date +10#%N)+$$  
$src/randomCreateRanluxSeed -s $seed -o ksAomega.ran

cp -v $inpDir/ksArrayTrigger.ran ksArrayTrigger.ran 
let seed=$(date +10#%N)+$$
$src/randomCreateRanluxSeed -s $seed -o ksArrayTrigger.ran

#######################################################################
#Make sure directory exists, if not create it.
if [ -z "$5" ]; then
    echo "ksall:Data Directory must be specified"
    exit
fi
if [ ! -d "$5" ]; then
       mkdir -p $5
fi
########################################################################
#Set up base name of shower files. 
#Note it includes data path
ShwrTe=$5'/'$TriggerSpec$ThreshSpec'GeV'$1'te.d'
SingleShwr=$5'/'$TriggerSpec$ThreshSpec'GeV'$1
MultShwr=$5'/'$TriggerSpec$ThreshSpec$TriggerMult'GeV'$1

#Define Multiplicity option
MultOption="-ArrayTriggerMultiplicity="$ArrayMult
echo MultOption $MultOption


##########################################################################
#Setup to loop over showers
i="$3"
while test $i -le $4
  do
#ksKascade
    segfile='Seg.d'$i              #Temp file, deleted later
    if [ -e "$segfile" ]; then
	rm $segfile
    fi

    $src/ksKascade -config=$ksKascadeConfig -RandomSeedFileName=ksKascade.ran \
                   -PrimaryEnergyGeV=$1 -ShowerID=$i $segfile
		   
#ksLight
    pefile='Pe.d'$i                #Temp file, deleted later
    if [ -e "$pefile" ]; then 
	rm $pefile
    fi
    $src/ksLight -config=$ksLightConfig -RandomSeedFileName=ksLight.ran \
                  $segfile $pefile
    rm -v $segfile		#Remove segment file

#ksPeSortMerg
    pesfile='Pes.d'$i           #Temp file, deleted later
    if [ -e "$pesfile" ]; then
	rm $pesfile
    fi

    $src/ksPeSortMerge $pefile $pesfile
    rm $pefile		#Delete pe file
    rm Temp*            #delete temp sort files.

#ksTrigger
    tefile=$ShwrTe$i                  #We keep this one
    MDirFile=$SingleShwr'MDir.d'$i          #and We keep this one
    if [ -e "$tefile" ]; then
	rm $tefile
    fi

    if [ -e "$MDirFile" ]; then
	rm $MDirFile
    fi
 
    $src/ksTrigger  -config=$ksTriggerConfig \
		    -SaveMountDirectionsToFile=ON \
		    -MountDirectionsFileName=$MDirFile \
                    -RandomSeedFileName=ksTrigger.ran $pesfile $tefile
     rm $pesfile

#ksAomega
    rootFile=$SingleShwr'.d'$i'.root'
    VBFFile=$SingleShwr'.d'$i'.vbf'

    $src/ksAomega -config=$ksAomegaConfig -RandomSeedFileName=ksAomega.ran \
                  -VBFOutputFileName=$VBFFile  $tefile

#ksArrayTrigger		   

  #Make multiple links to file to use for different telescopes
  #Note we use the same file for all telescopes.
    VBFFileMult=$MultShwr'.d'$i'.vbf'      #Ouput file Not local

    #Zero the options list.
    ShowerNameOptions=

    if [ ${ArrayConfig:0:1} = '1' ]; then
      VBFFileT1=T1.vbf       #local
      ln -s $VBFFile $VBFFileT1
      ShowerNameOptions=$ShowerNameOptions' -T1ShowerFileName='
      ShowerNameOptions=$ShowerNameOptions$VBFFileT1
    fi

    if [ ${ArrayConfig:1:1} = '2' ]; then
      VBFFileT2=T2.vbf       #local
      ln -s $VBFFile $VBFFileT2
      ShowerNameOptions=$ShowerNameOptions' -T2ShowerFileName='
      ShowerNameOptions=$ShowerNameOptions$VBFFileT2
    fi

    if [ ${ArrayConfig:2:1} = '3' ]; then
      VBFFileT3=T3.vbf       #local
      ln -s $VBFFile $VBFFileT3
      ShowerNameOptions=$ShowerNameOptions' -T3ShowerFileName='
      ShowerNameOptions=$ShowerNameOptions$VBFFileT3
    fi

    if [ ${ArrayConfig:3:1} = '4' ]; then
      VBFFileT4=T4.vbf       #local
      ln -s $VBFFile $VBFFileT4
      ShowerNameOptions=$ShowerNameOptions' -T4ShowerFileName='
      ShowerNameOptions=$ShowerNameOptions$VBFFileT4
    fi

    $src/ksArrayTrigger -config=$ksArrayTriggerConfig \
                        -RandomSeedFileName=ksArrayTrigger.ran \
                         $MultOption $ShowerNameOptions $VBFFileMult

    #Remove links.
    if [ -e "$VBFFileT1" ]; then
       rm -v $VBFFileT1
    fi
    if [ -e "$VBFFileT2" ]; then
       rm -v $VBFFileT2
    fi
    if [ -e "$VBFFileT3" ]; then
       rm -v $VBFFileT3
    fi
    if [ -e "$VBFFileT4" ]; then
       rm -v $VBFFileT4
    fi

    i=$((i+1))			#do next shower
done



#Cleanup
cd $wrkdir
rm -vf *
cd ..
rmdir $dirID




