#!/bin/bash
#This runs production kascade on LINUX. Arguments are:
#$0 ./kasall.src
#$1 primary Energy in gev (integer only)
#$2 Shower type specification string (To be included in config file names and 
#                                     in shower names like SVP1Deg2D50mv1234M2
#                                     or WVHe4_1Deg2D50mv1234M2ABAA
# Atm:Char1: W or S  (Winter or summer atm)
# Telescope:Char2: V (VERITAS) or U(Veritas Upgrade PMT) or W (Whipple) 
# PrimaryType: P or G or E or He4_ or Fe56_
# Shower source direction: 1Deg or 10Deg2D or 40_135Deg2D
# Threshold 45mv or 50mv
# Tels in array  1234
# Array trigger Multiplicity: M2
# ksTrigger source files any set of 4 letters lc or uc 
#
#$3 Lowest flie id
#$4 Highest file id.
#$5 data disk directory.(Where output Te  files go, cannot be blank!!!)
#$6 working disk directory base: Where all temproary files are held)

KascadeEnable=enable
LightEnable=enable
PeSortMergeEnable=enable
TriggerEnable=enable
#AomegaEnable=enable                   #These next 2 operate on te files only
#ArrayTrigEnable=enable

#MKPlots=enable                    #Enable creation and saving of segment and 
                                  #PES plotting files
Production=enable                 #Enable te.d  file Production scheme 
                                  #(makes dirs, moves files etc.0
Fall09ArrayPositions=enable       #Define if we used moved T1 array.Fall09+
                                   #Else we get original T1 postion (near T4)
RemoveSingleVBF=enable
#CleanupEnable=enable
DebugPrintEnable=enable

VBFOutputToDetectorSpecDir=enable #Put final VBF file in a directory
                                   # $5$Detectorspec:
                                   # Ex: .../simulations/veritas/protonsABCD

echo "**********************************************************************"
echo "**********************************************************************"

echo $0 $1 $2 $3 $4 $5 $6

###########################################################################
#Setup directory pointers
src=$KASCADEBASE'/bin'
echo binary src dir is $src

inpDir=$KASCADEBASE'/inputs'
echo inputs dir is $inpDir

host=$(hostname -s)
while [ -z "$host" ]; 
  do
    echo "Failed to get hostname. Retrying"
    host=$(hostname -s)
done
echo Running on $host

hostString=${host:0:6}
if test  "$hostString" = "cvrsvc"  #Are we running on a Carver node
then
  CARVER=enabled
fi

hostString=${host:0:6}
if test  "$hostString" = "hansen"  #Are we running on a Hansen node
then
  HANSEN=enabled
fi

hostString=${host:0:6}
if test  "$hostString" = "coates"  #Are we running on a Coates node?
then
  COATES=enabled
fi

hostString=${host:0:1}
if test  "$hostString" = "f"  #Are we running on a  Fusion node?
then
  FUSION=enabled
fi

#########################################################################
#Set up private working directory for this run. 
#Keeps random number independent

#Make sure base of working directory name was specified
if [ -z "$6" ]; then
    echo "ksall:Working dir base must be specified"
    exit
fi
#Make sure working directory base exists If not make it..
if [ ! -d "$6" ]; then
       mkdir -p $6
fi


#Make sure Data directory is specified.
if [ -z "$5" ]; then
    echo "ksall:Data Directory must be specified"
    exit
fi

#Make sure Data directory is exists. If not make it.
if [ ! -d "$5" ]; then
       mkdir -p $5
fi
echo Data Directory: $5

#use combo of process id ($$)and number of nanosec(date +%N) since last 
#second tick to get unique value. (least count is micro sec at best)
let dirID=$(date +10#%N)+$$     # The 10# prevents leading 0's causeing errors
while [ -d "$dirID" ]; do
  let dirID=$(date +10#%N)+$$
done

#All auxillary files are in wrkdir.
#All temp data kept in $wrkdir. 
#Final results go into $5; (But see Production switch)

cd $6

if [ ! -d "workingScratch" ]; then
       mkdir -p workingScratch
       chmod 777 workingScratch
fi
cd workingScratch          #This is a  sub dir of the data dir (PBS)
                           #or sub dir of working dir. (isis)

#create working directory.
mkdir $dirID

#######################################################################
#Following is supposed to make running on hansen node more robust
#######################################################################
#if [ -n "$HANSEN" ]; then
#  lfs setstripe -c 1 $dirID
#  lfs getstripe $dirID
#fi
#######################################################################

cd $dirID

wrkdir="$PWD"

echo Working Directory is $wrkdir

##################################################################
#Parse the specification string
jobSpec=$2
AtmSpec=${jobSpec:0:1}                 #gets S from SVG20DegN0.5Deg50mv1234M2
TelSpec=${jobSpec:1:1}                 #gets V from WVG20DegN0.5Deg50mv1234M2

PrimarySpec=${jobSpec%%Deg*}'Deg'      #gets SVG20Deg from SVG20Deg2D50mv1234M2
PrimarySpec=${PrimarySpec:1}           #Strip off the S (or W) gives VG20Deg 
                                       #or UE20_180Deg
ThresholdSpec=${jobSpec##*Deg2D}          #gets 50mv1234OAM2AAAB from 
                                          #WVG20Deg2D50mv1234M2AAAB
if [ "$ThresholdSpec" = "$jobSpec" ]; then
    ThresholdSpec=${jobSpec##*Deg}        #No Deg2D: gets 70mv1234M2ABBC 
                                          #from WVG20Deg2D70mv1234M2AAAB
fi                                        #Or M50mv1234M2EFGH if moon filter 
                                          #run

TriggerSpec=${jobSpec%%$ThresholdSpec}     #Get other half: SVG20Deg2D from
                                           #SVG20Deg2DM50mv1234M2BBAB
TriggerSpec=${TriggerSpec:1}               #Drops first character (atm spec)

MoonSpec=${ThresholdSpec:0:1}              #See if moon filter specified
if [ "$MoonSpec" = "M" ]; then
    MoonFilterEnable=enable
    ThresholdSpec=${ThresholdSpec:1}    #strip off the leading M
    MOON=M                          #$MOON is blank if moonfilter not specified
fi

ThreshSpec=${ThresholdSpec:0:4}            #Gets 50mv from 50mv1234M2BBAB

PMTSpec=$TelSpec
if [ "$TelSpec" != "U" ] && [ "$TelSpec" != "V" ] &&  
   [ "$TelSpec" != "W" ] && [ "$TelSpec" != "O" ]; then
  echo "Fatal-Bad Telescope Spec: "$TelSpec
  echo "Allowed values: U W V"
  exit
fi

if [ "$TelSpec" = "U" ]; then          #test if this is veritas upgrade
   TelS='U'
   PMTSpec='U'
   PSFDir='V190'
   ConfigTriggerSpec='V'${TriggerSpec:1}
   PrimarySpec='V'${PrimarySpec:1}       #strip off U and replace with V
   AOmThreshSpec='U'
fi
if [ "$TelSpec" = "V" ]; then 
   TelS='V'
   PMTSpec='V'
   PSFDir='V190'
   ConfigTriggerSpec='V'${TriggerSpec:1}
   PrimarySpec='V'${PrimarySpec:1}       #strip off V and replace with V
   AOmThreshSpec='N'
fi
if [ "$TelSpec" = "O" ]; then 
   TelS='O'
   PMTSpec='V'
   PSFDir='V330'
   ConfigTriggerSpec='O'${TriggerSpec:1}
   PrimarySpec='V'${PrimarySpec:1}       #strip off O and replace with V
   AOmThreshSpec='O'
fi
if [ "$TelSpec" = "W" ]; then 
   TelS='W'
   PMTSpec='W'                    
   PSFDir='V190'
   ConfigTriggerSpec='W'${TriggerSpec:1}
   PrimarySpec='W'${PrimarySpec:1}       #strip off W and replace with V
   AOmThreshSpec='W'
fi
TelSpec=$TelS



#########################
#Now we need to parse out the mutiplicity, the trigger configuration
#and the detector configurations
ArrayConfigSpec=${ThresholdSpec##$ThreshSpec} # gets 1234M2BBAB from 
                                             #50mv1234M2BBAB
let TEnd=$(expr length $ArrayConfigSpec)

if [ -n "$DebugPrintEnable" ]; then
  echo AtmSpec: $AtmSpec
  echo TriggerSpec: $TriggerSpec
  echo ConfigTriggerSpec: $ConfigTriggerSpec
  echo ThresholdSpec: $ThresholdSpec
  echo ArrayConfigSpec $ArrayConfigSpec
  echo ThreshSpec $ThreshSpec
  echo PrimarySpec: $PrimarySpec
  echo TelSpec: $TelSpec
  echo PMTSpec: $PMTSpec
  echo MOON: $MOON
  if [ -n "$MoonFilterEnabled" ]; then
     echo MoonFilter Processing: Enabled!
  else
     echo MoonFilter Processing: Not Enabled!
  fi   
fi
  
if test "$ThresholdSpec" != "$ArrayConfigSpec" 
then

     ArrayConfig=${ArrayConfigSpec:0:4}   #gets 1234 from  1234M2BBAB
     ArrayMult=${ArrayConfigSpec:5:1}     #gets 2 from 1234M2BBAB

     if [ -n "$DebugPrintEnable" ]; then
       echo ArrayConfig $ArrayConfig
       echo ArrayMult $ArrayMult
     fi

     if test $TEnd = 6           #See if we have detector specs per telescope
     then
       let dcount=0             #No. Treat all tels as identical
     else
       if test ! $TEnd = 10
       then
          echo "ksallVBF: If Option 2 must contain Dector Array specs it must contain 4 of them. (EX:BBAB)"
          exit
       fi  
                                #Parse the detector specs to find the 
                                #different ones
       DetectArraySpec=${ArrayConfigSpec:6:4}
       let dcount=1
       dspec[0]=${DetectArraySpec:0:1}

       if [ -n "$DebugPrintEnable" ]; then
          echo TEnd: $TEnd
          echo Detector Array Specifications: $DetectArraySpec
          echo dcount: $dcount  dspec[0] ${dspec[0]}
       fi

       let i=1
       while test $i -le 3            #Test the others to see if they duplicate
       do
        let j=0
        let dlast=$dcount
        dspec[$dcount]=${DetectArraySpec:$i:1} #So we have a new one on, but 
           if [ -n "$DebugPrintEnable" ]; then
              echo i: $i dcount: $dcount dspec[dcount]: ${dspec[$dcount]} 
	   fi

	dcount=$((dcount+1))                   #reject it if its a duplicate
        while test $j -lt $dlast
        do
           if [ -n "$DebugPrintEnable" ]; then
              echo i: $i j: $j dspec[j]: ${dspec[$j]} 
              echo DetectArraySpec:i:1: ${DetectArraySpec:$i:1}
	   fi

	   if test ${DetectArraySpec:$i:1} = ${dspec[$j]}
           then
               dcount=$((dcount-1))            #reject it
               let j=$dlast
           fi
	   j=$((j+1))
        done
        i=$((i+1))
       done
    fi
else
    echo "ksallVBF: Option 2 must contain Array config/multiplicity (Ex.1234M2)"
    exit
fi

ThresholdSpec=$TelSpec$ThreshSpec   #Gives final threshold spec of V50mv got
                                    # ksAomega*.config

#############################################################################
#Make up names of all config files and make links to them
ksKascadeConfig=ksKascade$PrimarySpec'.config'
ln -s $inpDir/$ksKascadeConfig $ksKascadeConfig

ksLightConfig=ksLight$PMTSpec'.config'

ln -s $inpDir/$ksLightConfig $ksLightConfig



ksTriggerConfig=ksTrigger$ConfigTriggerSpec'.config'
ln -s $inpDir/$ksTriggerConfig $ksTriggerConfig
if [ -n "$DebugPrintEnable" ]; then
    echo ksTriggerConfig: $ksTriggerConfig
fi

################################################################
#Now the different ksAomega config file links
AOmThreshSpec=$AOmThreshSpec$ThreshSpec #Gives final threshold spec of N50mv 
                                        #ksAomega*.config
echo AOmThreshSpec: $AOmThreshSpec
if test $dcount -gt "0"
then
    let i=0
    while test $i -lt $dcount
    do
        ksAomegaConfig[$i]=ksAomega$AOmThreshSpec${dspec[$i]}'.config'
        ln -s $inpDir/${ksAomegaConfig[$i]} ${ksAomegaConfig[$i]}
        i=$((i+1))
    done
else
    ksAomegaConfig[0]=ksAomega$AOmThreshSpec'.config'
    ln -s $inpDir/${ksAomegaConfig[0]} ${ksAomegaConfig[0]}
    if [ -n "$DebugPrintEnable" ]; then
         echo ksAomegaConfig[0] ${ksAomegaConfig[0]}
    fi
fi


ksArrayTriggerConfig=ksArrayTrigger.config
ln -s $inpDir/$ksArrayTriggerConfig $ksArrayTriggerConfig

##############################################################################

#make a links to the various input files:
ln -s $inpDir/PSTMultiplicity3.bin PSTMultiplicity3.bin
ln -s $inpDir/VeritasFacetLocations.txt VeritasFacetLocations.txt

#Setup unique random seed files into working dir.
cp -v $inpDir/ksKascade.ran ksKascade.ran  #Copy in a file to overwrite
let seedK=$(date +10#%N)+$$      #Add in process id ($$),10# prevents error

$src/randomCreateRanluxSeed -s $seedK -o ksKascade.ran
	                    #date +%N  +$$ gives Number of nanoseconds from 
			    #last second  + process id.
cp -v $inpDir/ksLight.ran ksLight.ran  
let seed=$(date +10#%N)+$$                
$src/randomCreateRanluxSeed -s $seed -o ksLight.ran

cp -v $inpDir/ksTrigger.ran ksTrigger.ran  
let seed=$(date +10#%N)+$$                
$src/randomCreateRanluxSeed -s $seed -o ksTrigger.ran

cp -v $inpDir/ksAomega.ran ksAomega.ran  #Copy in a file to overwrite
let seed=$(date +10#%N)+$$  
$src/randomCreateRanluxSeed -s $seed -o ksAomega.ran

cp -v $inpDir/ksArrayTrigger.ran ksArrayTrigger.ran 
let seed=$(date +10#%N)+$$
$src/randomCreateRanluxSeed -s $seed -o ksArrayTrigger.ran

########################################################################
#Set up base name of shower files. 
#Note it includes data path
ShwrTe=$5'/'$AtmSpec$TriggerSpec$MOON'GeV'$1'te'
SingleShwr=$5'/'$AtmSpec$TriggerSpec$MOON$ThreshSpec'GeV'$1
#MultShwr=$5'/'$AtmSpec$TriggerSpec$ThreshSpec$ArrayConfig'M'$ArrayMult'GeV'$1
echo ShwrTe: $ShwrTe

if [ -n "$VBFOutputToDetectorSpecDir" ];
 then
  mkdir -p $5'/'$DetectArraySpec
  MultShwr=$5'/'$DetectArraySpec'/'$AtmSpec$TriggerSpec$MOON$ThreshSpec$ArrayConfig'M'$ArrayMult'GeV'$1
 else
  MultShwr=$5'/'$AtmSpec$TriggerSpec$MOON$ThreshSpec$ArrayConfig'M'$ArrayMult'GeV'$1
fi

echo MultShwr: $MultShwr


#Define Multiplicity option
MultOption="-ArrayTriggerMultiplicity="$ArrayMult
echo MultOption $MultOption

#Define atm and extinction options for ksKascade and ksLight 

AtmSpecOption='-AtmosphereSpecification=US76'           #default

ln -s $inpDir/extinction_uv.dat extinction_uv.dat
ExtinctionFileOption='-ExtinctionFile=extinction_uv.dat' #default


if test "$AtmSpec" == "W"    #Use Veritas winter atm
then
  ln -s $inpDir/atmprof21.dat atmprof21.dat
  AtmSpecOption='-AtmosphereSpecification=atmprof21.dat'

  ln -s $inpDir/V.Winter.US76.50km.profile.ext V.Winter.US76.50km.profile.ext
  ExtinctionFileOption='-ExtinctionFile=V.Winter.US76.50km.profile.ext'
fi

if test "$AtmSpec" == "S"    #Use Veritas Summer atm
then
  ln -s $inpDir/atmprof22.dat atmprof22.dat
  AtmSpecOption='-AtmosphereSpecification=atmprof22.dat'

  ln -s $inpDir/V.Summer.US76.50km.profile.ext V.Summer.US76.50km.profile.ext
  ExtinctionFileOption='-ExtinctionFile=V.Summer.US76.50km.profile.ext'
fi

if test "$AtmSpec" == "C"    #Use Veritas crab atm
then 
  ln -s $inpDir/atmprof20.dat atmprof20.dat
  AtmSpecOption='-AtmosphereSpecification=atmprof20.dat'

  ln -s $inpDir/V.Crab.US76.50km.profile.ext V.Crab.US76.50km.profile.ext
  ExtinctionFileOption='-ExtinctionFile=V.Crab.US76.50km.profile.ext'
fi
echo $AtmSpecOption
echo $ExtinctionFileOption

#############################################################################
#Production SetUP
#############################################################################
if [ -n "$Production" ] || [ -n "$MKPlots" ]; then #Get 20_180:
    ZNAZSpec=${PrimarySpec:1}            #Strip off leading V
    TypeSpec=${ZNAZSpec:0:1}        #get leading G,P,E or H
    if [ $TypeSpec = "H" ] || [ $TypeSpec = "F" ] ; then
      if [ $TypeSpec = "H" ]; then
        TypeSpec=He4_
        ZNAZSpec=${ZNAZSpec##He4_}  #Remove He4_ from beginning
      fi
      if [ $TypeSpec = "F" ]; then
        TypeSpec=Fe56_
        ZNAZSpec=${ZNAZSpec##Fe56_}  #Remove Fe56__ from beginning
      fi
      ZNAZSpec=${ZNAZSpec%%Deg*}  #Strip Deg off end
      TEDIR=$AtmSpec$TelSpec$TypeSpec$ZNAZSpec'Deg'$MOON
    else 
       ZNAZSpec=${ZNAZSpec:1}     #remove  leading G,P,E     
       ZNAZSpec=${ZNAZSpec%%Deg*} #Strip of Trailing from DEG: 
       if [ $TypeSpec = "P" ]; then
         TEDIR=$AtmSpec$TelSpec$TypeSpec$ZNAZSpec'Deg'$MOON
       else
         TEDIR=$AtmSpec$TelSpec$TypeSpec$ZNAZSpec'Deg2D'$MOON  #E and G
       fi
    fi

    echo ZN_AZ: $ZNAZSpec
    echo TypeSpec: $TypeSpec
    echo teDir: $TEDIR                          

fi

###################################
#Build MK's Segment filename for plotting
if [ -n "$MKPlots" ]; then
    EnergySpec=$1'GeV' 
    echo EnergySpec: $EnergySpec
    #particletypespec=${jobSpec:2:1}  Replaced by $TypeSpec
    #directionspec=${jobSpec%%Deg*}'Deg'
    #directionspec=${directionspec:1}
    #directionspec=${directionspec:1}
    #directionspec=${directionspec:1}  Replaced by  ZNAZSpec
    MKShowerOutSpec=$TypeSpec$EnergySpec$ZNAZSpec'Deg'
    echo MKShowerOutSpec: $MKShowerOutSpec
fi

#########################################################################
#Setup to loop over showers
i="$3"
while test $i -le $4
  do
#ksKascade
  segfile='Seg.d'$i              #Temp file, deleted later
  if [ -n "$MKPlots" ]; then
      MKPlotsDir=~/projects/showerdisplay/
      mkdir -pv $MKPlotsDir
      MKSegShowerOutFile=$MKShowerOutSpec'.d'$i #File for making segment plots
      MKPeShowerOutFile=$MKShowerOutSpec'_pe.d'$i #File for making pe plots
      echo MKSegShowerOutFile: $MKSegShowerOutFile
      echo MKPeShowerOutFile: $MKPeShowerOutFile
  fi
  if [ -n "$KascadeEnable" ]; then
    if [ -e "$segfile" ]; then
	rm $segfile
    fi

   echo kascade Command: $src/ksKascade -config=$ksKascadeConfig -RandomSeedFileName=ksKascade.ran -PrimaryEnergyGeV=$1 -ShowerID=$i $AtmSpecOption $segfile

    $src/ksKascade -config=$ksKascadeConfig -RandomSeedFileName=ksKascade.ran \
                  -PrimaryEnergyGeV=$1 -ShowerID=$i $AtmSpecOption $segfile

   if [ -n "$MKPlots" ]; then
       cp -v $segfile $MKPlotsDir'/'$MKSegShowerOutFile
   fi
 fi
		   
#ksLight
  pefile='Pe.d'$i                #Temp file, deleted later
  if [ -n "$LightEnable" ]; then
    if [ -e "$pefile" ]; then 
	rm $pefile
    fi
    if [ -n "$MoonFilterEnable" ]; then
	MoonFilterOption='-MoonFilter=1'
    fi

    $src/ksLight -config=$ksLightConfig -RandomSeedFileName=ksLight.ran \
	$ExtinctionFileOption $MoonFilterOption $segfile $pefile

    if [ -n "$MKPlots" ]; then
	cp -v $pefile $MKPlotsDir'/'$MKPeShowerOutFile
    fi
    if [ -n "$CleanupEnable" ]; then
           rm -v $segfile		#Remove segment file
    fi
  fi

#ksPeSortMerg
  pesfile='Pes.d'$i           #Temp file, deleted later
  if [ -n "$PeSortMergeEnable" ]; then
    if [ -e "$pesfile" ]; then
	rm $pesfile
    fi

    $src/ksPeSortMerge $pefile $pesfile
    rm Temp*            #delete temp sort files.
  fi

  

#ksTrigger
  if [ -n "$TriggerEnable" ]; then
      tefile=$ShwrTe'.d'$i                  #We keep this one
      if [ -e "$tefile" ]; then
	  rm $tefile
      fi
      
      $src/ksTrigger  -config=$ksTriggerConfig \
	  -RandomSeedFileName=ksTrigger.ran $pesfile $tefile
      
     ##########################################################################
     #For Carver Te Gamma  Production move the file to the te directory off of 
     # $PSFDir.  mkdir the dir if it doesn't exist yet
     #Note this is for gammas only: $5 ends in /gammas or /protons see above
     ##########################################################################
      if [ -n "$Production" ]; then
	  lcl="$PWD"
	  cd $5
	  mkdir -p $PSFDir
	  cd $PSFDir
	  mkdir -p $TEDIR
	  mv -v $tefile  $5'/'$PSFDir'/'$TEDIR
	  cd $lcl
      fi

  fi
  if [ -n "$TriggerEnable" ] && [ -n "$CleanupEnable" ] ; then
      rm $pesfile
  fi


  if test $dcount = 0
      then
      let dlast=1
  else
      let dlast=$dcount
  fi


#ksAomega
  if [ -n "$AomegaEnable" ]; then

      tefile=$ShwrTe'.d'$i

      #############################################################
      # we will have to change the path of the te file for the
      #CarverGammaProdution mode of operation.
      #Assume the file has been moved to TEDIR and get the new path.
      ###########################################################
      if [ -n "$Production" ]; then
	  tefileName=${tefile##/*/}
	  tePath=$5'/'$PSFDir'/'$TEDIR
	  tefile=$tePath'/'$tefileName
      fi

    #Loop over config files
      let j=0
      while test $j -lt $dlast
	do
	if test $dcount = 0
	    then
	    VBFFile=$SingleShwr'.d'$i'.vbf'
	else
	    VBFFile=$SingleShwr${dspec[$j]}'.d'$i'.vbf'
	fi


	if [ -n "$DebugPrintEnable" ]; then
	    echo tefile $tefile
	    echo VBFOutputFileName: $VBFFile
	    echo j: $j ksAomegaConfig[j] ${ksAomegaConfig[$j]}
	fi
        if [ ! -e ${ksAomegaConfig[$j]} ]; then
            echo ksallVBF--Fatal-- no such file ${ksAomegaConfig[$j]} 
            exit
        fi
	$src/ksAomega -config=${ksAomegaConfig[$j]} \
	    -RandomSeedFileName=ksAomega.ran \
	    -VBFOutputFileName=$VBFFile  $tefile
  
	j=$((j+1))
      done
  fi


#ksArrayTrigger		   
  if [ -n "$ArrayTrigEnable" ]; then

  #Make multiple links to file to use for different telescopes
  #Note if dcount=0 we use the same file for all telescopes.
    VBFFileMult=$MultShwr'.d'$i'.vbf'      #Output file Not local

    #Zero the  ShowerNames options list.
    ShowerNameOptions=

    if [ ${ArrayConfig:0:1} = '1' ]; then
      VBFFileT1=T1.vbf       #local
      if test $dcount = 0
      then
         ln -s $VBFFile $VBFFileT1
      else
         ln -s $SingleShwr${DetectArraySpec:0:1}'.d'$i'.vbf' $VBFFileT1
      fi

      ShowerNameOptions=$ShowerNameOptions' -T1ShowerFileName='
      ShowerNameOptions=$ShowerNameOptions$VBFFileT1
    fi

    if [ ${ArrayConfig:1:1} = '2' ]; then
      VBFFileT2=T2.vbf       #local
      if test $dcount = 0
      then
         ln -s $VBFFile $VBFFileT2
      else
         ln -s $SingleShwr${DetectArraySpec:1:1}'.d'$i'.vbf' $VBFFileT2
      fi

      ShowerNameOptions=$ShowerNameOptions' -T2ShowerFileName='
      ShowerNameOptions=$ShowerNameOptions$VBFFileT2
    fi

    if [ ${ArrayConfig:2:1} = '3' ]; then
      VBFFileT3=T3.vbf       #local
      if test $dcount = 0
      then
         ln -s $VBFFile $VBFFileT3
      else
         ln -s $SingleShwr${DetectArraySpec:2:1}'.d'$i'.vbf' $VBFFileT3
      fi

      ShowerNameOptions=$ShowerNameOptions' -T3ShowerFileName='
      ShowerNameOptions=$ShowerNameOptions$VBFFileT3
    fi

    if [ ${ArrayConfig:3:1} = '4' ]; then
      VBFFileT4=T4.vbf       #local
      if test $dcount = 0
      then
         ln -s $VBFFile $VBFFileT4
      else
         ln -s $SingleShwr${DetectArraySpec:3:1}'.d'$i'.vbf' $VBFFileT4
      fi

      ShowerNameOptions=$ShowerNameOptions' -T4ShowerFileName='
      ShowerNameOptions=$ShowerNameOptions$VBFFileT4
    fi

    if [ -n "$DebugPrintEnable" ]; then
        echo MultOption: $MultOption
        echo  ShowerNameOptions: $ShowerNameOptions 
    fi

#########################################################################
#This is where we can specify an external mount position file
#########################################################################
if [ -z "$Fall09ArrayPositions" ]; then
      ArrayPositionsOptions='-TelescopeArrayPositions='$KASCADEBASE'/inputs/BasecampConfigurationList '  
else
       ArrayPositionsOptions='-TelescopeArrayPositions='$KASCADEBASE'/inputs/BaseCampFall2009ConfigurationList'  
fi
##########################################################################
  
    echo ArrayPositionsOptions: $ArrayPositionsOptions
    $src/ksArrayTrigger -config=$ksArrayTriggerConfig \
               -RandomSeedFileName=ksArrayTrigger.ran $ArrayPositionsOptions \
               $MultOption $ShowerNameOptions $VBFFileMult

    #Remove links.
    if [ -n "$CleanupEnable" ]; then
      if [ -e "$VBFFileT1" ]; then
       rm -v $VBFFileT1
      fi
      if [ -e "$VBFFileT2" ]; then
       rm -v $VBFFileT2
      fi
      if [ -e "$VBFFileT3" ]; then
       rm -v $VBFFileT3
      fi
      if [ -e "$VBFFileT4" ]; then
       rm -v $VBFFileT4
      fi
    fi

    #Remove single tel VBF files. (mostly for isis where space is tight)
    if [ -n "$RemoveSingleVBF" ]; then
	echo Removing Singel Tel VBF files
	if test $dcount = 0
	then
	    if [ -e "$VBFFile" ]; then
		rm -v $VBFFile
	    fi
	else
	    VBFFile=$SingleShwr${DetectArraySpec:0:1}'.d'$i'.vbf'
	    if [ -e "$VBFFile" ]; then
		rm -v $VBFFile
	    fi
	    VBFFile=$SingleShwr${DetectArraySpec:1:1}'.d'$i'.vbf'
	    if [ -e "$VBFFile" ]; then
		rm -v $VBFFile
	    fi
	    VBFFile=$SingleShwr${DetectArraySpec:2:1}'.d'$i'.vbf'
	    if [ -e "$VBFFile" ]; then
		rm -v $VBFFile
	    fi
	    VBFFile=$SingleShwr${DetectArraySpec:3:1}'.d'$i'.vbf'
	    if [ -e "$VBFFile" ]; then
		rm -v $VBFFile
	    fi
	fi
    fi
    
    #########################################################################
    # Move the vbf file to the vbf directory. mkdir the directory if needed
    # This used to be in GProcessAll and CRProcessAll
    #########################################################################
    #echo 'Testing Production: '$Production
    if [ -n "$Production" ]; then
        lcl=$PWD
	VBFDir=$TEDIR$ThreshSpec'1234M2'$AtmSpec
	if [ -n "$VBFOutputToDetectorSpecDir" ]; then
	    VBFDir=$VBFDir$DetectArraySpec
        fi
	echo 'Production: Move shower vbf file '$VBFFileMult' to ' $5'/'$VBFDir
        cd $5
	mkdir -pv $VBFDir
	mv -v $VBFFileMult $5'/'$VBFDir
	cd $lcl
    fi

  fi
  i=$((i+1))			#do next shower
done


##Cleanup:
if [ -n "$CleanupEnable" ]; then
    cd $wrkdir
    rm -vf *
    cd ..
    rmdir $dirID

fi


