
#This is a short utility script to create a combined summary vbf file from 
#many individual shower vbf files. 

##################################################
# THIS IS THE NORMAL SPECTRUM WEIGHTED VERSION
##################################################

#$1 particle ID (VG20DegS0.5Deg50mv) Required
#$2 Run Number  (95001, 90020)       Required 
#$3 Arrayconfig/Multiplicity  (12--M2 123-M2 1234M3) Not required
#$4 (or $3) Direction index. If $3 has no 'M' in it then $3 is 
#   considered the direction index and $4 is ignored.Not required
#Ex ./ksWeRock.scr VG20Deg50mv  95020 123-M2 
#Ex ./ksWeRock.scr VG20Deg2D50mv 95021 123-M2 4
#Ex ./ksWeRock.scr VG1Deg50mv 95002 8
#Ex../ksWeRock.scr VCRA10Deg50mv 96010 1234M2

CleanupEnable=enable
DebugPrintEnable=enable

inpDir=$KASCADEBASE'/inputs'

Spec=$1
let SpecEnd=$(expr length $Spec)
SpecEnd=$((SpecEnd-1))
if [ -n "$DebugPrintEnable" ]; then
  echo Spec: $Spec
fi


host=$(hostname)
echo hostname: $host

AMDAHL=amdahl.physics.purdue.edu
ISIS=isis.depauw.edu
IO=io.physics.purdue.edu
PULSAR=analysis
NODE00=node00
NODE01=node01
NODE02=node02
NODE03=node03
NODE04=node04
NODE05=node05

PDSF1=pdsf1
PDSF2=pdsf2
PDSF3=pdsf3
PDSF4=pdsf4
PDSF5=pdsf5

if [ $host = $PDSF1 ] || [ $host = $PDSF2 ] || [ $host = $PDSF3 ] || [ $host = $PDSF4 ] || [ $host = $PDSF5 ]; then
    dataDirBase=/project/projectdirs/astrogfs/veritas_data/glenn/simulations
    dstDir=/project/projectdirs/astrogfs/veritas_data/glenn/simulations
fi

if [ $host = $AMDAHL ] ; then
    dataDirBase=/project/veritas/sembrosk/simulations
    dstDir=/project/veritas/sembrosk/simulations
fi

if [ $host = $ISIS ] ; then
    lcl="$PWD"
    if [ ${lcl:1:4} = "disk" ]; then
       Disk=${lcl:0:6}
    fi
    dataDirBase=$Disk/simulations
    dstDir=/simulations
fi

if [ $host = $IO ] ; then
    lcl="$PWD"
    Disk=${lcl:0:12}
    dataDirBase=$Disk/simulations  
    dstDir=$Disk/simulations
fi

if [ $host = $PULSAR ] ||  [ $host = $NODE00 ]  ||  [ $host = $NODE01 ] ||  [ $host = $NODE02 ] ||  [ $host = $NODE03 ] ||  [ $host = $NODE04 ] ||  [ $host = $NODE05 ]; then
    dataDirBase=/usr/local/data/sembrosk/simulations  
    dstDir=/usr/local/data/sembrosk/simulations
fi

if [ -z $dstDir ] ; then      #Default is pdsf
    dataDirBase=/project/projectdirs/astrogfs/veritas_data/glenn/simulations
    dstDir=/project/projectdirs/astrogfs/veritas_data/glenn/simulations
fi




if [ ${Spec:1:1} = "V" ] ; then
	dataDirBase=$dataDirBase'/veritas'
	dstDir=$dstDir'/veritas'
fi

if [ ${Spec:1:1} = "W" ] ; then
	dataDirBase=$dataDirBase'/whipple'
	dstDir=$dstDir'/whipple'
fi

echo dataDirBase: $dataDirBase

cd $dataDirBase

if [ ! -d "workingScratch" ]; then
       mkdir -p workingScratch
       chmod 777 workingScratch
fi
cd workingScratch

#use combo of process id ($$)and number of nanosec(date +%N) since last 
#second tick to get unique value. (least count is micro sec at best)
let dirID=$(date +10#%N)+$$     # The 10# prevents leading 0's causeing errors
while [ -d "$dirID" ]; do
  let dirID=$(date +10#%N)+$$
done

#create working directory.
mkdir  $dirID
cd $dirID
if [ -n "$DebugPrintEnable" ]; then
  echo Working dir: $PWD
fi


AC=$3                      #Check to see if $3 is an array configuration

if [ ${AC:4:1} != "M" ]; then
    if [ -n "$3" ]; then
	DirIndexOption='-DirectionIndex='$3
        direction=$3
	echo direction from 3
    fi
else
    ArConfig=$3
    if [ -n "$4" ]; then
	DirIndexOption='-DirectionIndex='$4
        direction=$4
        echo 'direction from 4:'$direction':'
    fi
fi	


	


if [ ${Spec:2:1} = "G" ]  ; then
    ZenithAngleDir=$Spec$ArConfig   #comment this out if using base directory.
    if [ -n "$DebugPrintEnable" ]; then
        echo ZenithAngleDir: $dataDirBase/gammas/$ZenithAngleDir
    fi
    find $dataDirBase/gammas/$ZenithAngleDir -name $Spec$ArConfig'GeV*.vbf'  >GList
    gawk 'gsub(/.vbf/,"",$1)' GList >ShowerList

fi

if [ ${Spec:2:2} = "CR" ] ; then

   if [ ${Spec:4:1} = "A" ] || [ ${Spec:4:1} = "B" ] || [ ${Spec:4:1} = "C" ]; then
	TypeSpc=${Spec:4:1}
   fi
   AtmSpec=${Spec:0:1}
   TelSpec=${Spec:1:1}
   Pspec=$AtmSpec$TelSpec'P'${Spec#*CR$TypeSpc} #gets 20DegN0.3Deg50mv from 
                                       #WCR20DegN0.3Deg50mv
				       #with P. see pg 97 Bash book.
   PDirSpec=$AtmSpec$TelSpec'P'${Spec#*CR}

   He4spec=$AtmSpec$TelSpec'He4_'${Spec#*CR$TypeSpc} #Replace CR with He4_
   He4DirSpec=$AtmSpec$TelSpec'He4_'${Spec#*CR}

   echo find argument1: $dataDirBase/protons/$PDirSpec$ArConfig/
   echo find argument1: $Pspec$ArConfig'GeV*.vbf'

   find $dataDirBase/protons/$PDirSpec$ArConfig/ -name $Pspec$ArConfig'GeV*.vbf'  >CRList

   find $dataDirBase/he4/$He4DirSpec$ArConfig/ -name $He4spec$ArConfig'GeV*.vbf'    >>CRList
   gawk 'gsub(/.vbf/,"",$1)' CRList  >ShowerList  
fi


#Setup unique random seed file
cp -v $inpDir/ksKascade.ran ksSumFiles.ran #Copy in a file to overwrite
let seedK=$(date +10#%N)+$$      #Add in process id ($$),10# prevents error

$KASCADEBASE/bin/randomCreateRanluxSeed -s $seedK -o ksSumFiles.ran
	                    #date +%N  +$$ gives Number of nanoseconds from 
			    #last second  + process id.

if [ -n  "$direction" ] ; then
     DDir=D$direction
echo direction defined
fi




#                             -EnableDebugPrint \
#This is normal version 

     $KASCADEBASE/bin/ksSumFiles -EnableSpectrumWeighting \
                           -MinimumWeightFraction=.0 \
	                   -RunNumber=$2 \
                      	   -OutputVBFFileName=$dstDir/$Spec$ArConfig$DDir'.vbf' \
			   $DirIndexOption \
                           ShowerList 

#This is A No-Weights version (weights set to 1) for making LT (LookUp Tables)
#     $KASCADEBASE/bin/ksSumFiles  \
#	                   -RunNumber=$2  \
#                      	   -OutputVBFFileName=$dstDir/$Spec$ArConfig$DDir'.vbf' \
#			   $DirIndexOption \
#                           ShowerList 

#Cleanup
##Cleanup:
if [ -n "$CleanupEnable" ]; then
   cd ..
   rm -vrf $dirID
fi
