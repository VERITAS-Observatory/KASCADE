#!/bin/bash
#Utility functions for use with KSAuto,VAAuto,CRProcessAll,EProcessAll,GProcessAll,
#                               ksProduction.scr
# Glenn Sembroski
# Purdue Univ
# 2014-12-18
#
# Include in files with:
#
#:  if [ ! -e UtilityFunctions.scr ]; then
#:      cp $KASCADEBASE/scripts/UtilityFunctions.scr .
#:  fi
#:  source UtilityFunctions.scr
#
###################################################################################
# Functions:
#    function DefineShowers: Loads the energy, start and end arrays.
#    function GenerateVBFName()
#    function GetUniqueNumber
#
#####################################################################################

function GetUniqueNumber()
{
  #use combo of process id ($$)and number of nanosec(date +%N) since last 
  #second tick to get unique value. (least count is micro sec at best)
  let UNIQUE=$(date +10#%N)+$$     # The 10# prevents leading 0's causeing errors
}
####################################################################################

function DefineShowers()
##########################################################################
# This function loads the energy, start,end arrays for the VERITAS KASCADE 
# shower specifications.
#$1: Particle type: EX. G or E or P or He4_
#$2: Use to enable special MDL CR spec: Ex: Blank or MDL
# Defines global arrays "energy", "start", "end"
##########################################################################
# Used in scripts like ksProduction.scr, KSAutoFileCheck.scr, KSAuto.scr
{
  echo 'DefineShowers:Type: ' $1 ' Special flag: '$2
  local DFPARTSPEC=$1

  #The following arrays came from ksProduction.scr for CR
  energy=([1]=20   23.9 28.6 34.2 40.9 48.9 58.5 69.9 83.6 100 119.6 143 171 204.5 244.5 292.4 350  418 500 598 715 855 1022 1223 1462 1748 2091 2500 2990 3575 4275 5112 6113 7310 8741 10453 12500 14948 17875 21375 25560 30565 36550 43707 52265 )

   start=([1]=1    1    1    1    1    1    1    1    1    1   1     1   1   1     1     1     1    1   1   1   1   1   1    1    1    1    1    1    1    1    1    1    1    1    1    1     1     1     1     1     1     1     1     1     1) 

  if [ "$DFPARTSPEC" = "G" ] || [  "$DFPARTSPEC" = "E" ]; then
#Gamma,Electrons for LT and EA: index= -2.0
  end=([1]=1001 837  700  585  490  409  342  286  240  200 168   140 117 98    82    69    58   48  40  34  28  24  20   20   20   20   20   20   20   20   20   20   20   20   20   20    20    20    20    20    20    20    10    10    10)

#Electrons:index=-3.18 Generated with $KASCADEBASE/scripts/PrintEnergySteps.C 
# GHS: 2014-12-22
 #end=([1]=6681 4524 3064 2075 1405 952 645 437 296 200 136 92 63 43 29 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 )
  fi

  if [ "$DFPARTSPEC" = "P" ]; then
    if [ -n "$2" ]; then
      #MDL  (.5 of full)
      end=([1]=1382 1007 734   535   390  284  207  151  110  80  59    43  31  23    17    12    10   10  10  10  10  10  10   10   10   10   10   10   10   10   10   10   10   10   10   10    10    10    10    10    10    5     5     5     5)
    else
      end=([1]=2764 2014 1468  1070  780  568  414  302  220  160 118   86  62  46    34    24    20   20  20  20  20  20  20   20   20   20   20   20   20   20   20   20   20   20   20   20    20    20    20    20    20    20    20    10    10)
    fi
  fi

  if [ "$DFPARTSPEC" = "He4_" ]; then
    if [ -n "$2" ]; then
      #MDL  (.5 of full)
      end=([1]=757  565  421  318  235  175  132  97   78   54  42    32  23  17    13    10    10   10  10  10  10  10  10   10   10   10   10   10   10   10   10   10   10   10   10   10    10    10    10    10    10    5     5     5     5 )
    else
      #Old he4
      #end=([1]=1038 774  578  430  321  240  180  134  100  74  56    41  32  24    20    20    20   20  20  20  20  20  20   20   20   20   20   20   20   20   20   20   20   20   20   20    20    20    20    20    20    10    10    10    10)

      # GHS 2015-02-17: New (lower by .6875) P spectrum measurment by ams-2 requires more He4:
    #start=([1]=1039 775  579  431  322  241  181  135  101  75  57    42  33  25    21    20    20   20  20  20  20  20  20   20   20   20   20   20   20   20   20   20   20   20   20   20    20    20    20    20    20    10    10    10    10)
      end=([1]=1513 1129 842  628  469  350  261  195  145  108 81    61  45  34    25    20    20   20  20  20  20  20  20   20   20   20   20   20   20   20   20   20   20   20   20   20    20    20    20    20    20    10    10    10    10)
    fi
  fi
}
######################################################################################

function GenerateVBFName()
################################################################
# Generates VBF file name
################################################################
#$1 Particle type: SPECPART: G or E or P or He4_ or CR
#$2 Array  EX: UA or NA or OA
#$3 Season EX: W (Winter)  or S (Summer)
#$4 Zenith angle (Deg)
#$5 Azimuth angle (Deg)
#$6 Offset angle OptionalEx 0.5 or 0.0 or 1.75. If $7 is to be specified but no 
#   offset is wanted specify this as "-1" 
#$7 Sim Model (optional, overides default ) Ex: MDL1UA etc. Default is MDL10UA or 
#   MDL15NA or MDL8OA
# Generates Global variable: "VBFFILENAME"
#################################################################
{
  local PRIMARYSPEC=$1
  local EPOCHSPEC=$2
  local SEASONSPEC=$3
  local zenith=$4
  local azimuth=$5
  local VBFoffsetID=$6    # $6 and $7 are optional but if you want $7 you 
  local SimModel=$7       # need $6 specified obviously even if just a dummy
 

  #Primay Type:
  local PRIMARY=NULL
  if [ "$PRIMARYSPEC" = "P" ]; then
	PRIMARY=proton
  fi
  if [ "$PRIMARYSPEC" = "He4_" ]; then
	PRIMARY=He4
  fi
  if [ "$PRIMARYSPEC" = "G" ]; then
	PRIMARY=gamma
  fi
  if [ "$PRIMARYSPEC" = "E" ]; then
	PRIMARY=electron
  fi
  if [ "$PRIMARYSPEC" = "CR" ]; then
	PRIMARY=cosmicRay
  fi
  if [ "$PRIMARY" = "NULL" ]; then
     echo Invalid Primary Particle type: $PRIMARYSPEC
     exit
  fi

  #Array type sapecification
  local Epoch=NULL
  if [ "$EPOCHSPEC" = "UA" ]; then
     Epoch=V6_PMTUpgrade
     if [ ! -n "$SimModel" ]; then
       SimModel=MDL10UA
     fi
  fi

  if [ "$EPOCHSPEC" = "NA" ]; then
     Epoch=V5_T1Move
     if [ ! -n "$SimModel" ]; then
       SimModel=MDL15NA
     fi
  fi
  if [ "$EPOCHSPEC" = "OA" ]; then
     Epoch=V4_OldArray
     if [ ! -n "$SimModel" ]; then
       SimModel=MDL8OA
     fi
  fi
  if [ "$Epoch" = "NULL" ]; then
     echo Invalid array specification: $EPOCHSPEC
     exit
  fi

  #winter/summer season atm spec
  local SeasonID=NULL
  if [ "$SEASONSPEC" = "W" ]; then
    SeasonID='21'
  fi
  if [ "$SEASONSPEC" = "S" ]; then
    SeasonID='22'
  fi
  if [ "$SeasonID" = "NULL" ]; then
     echo Invalid winter/summer specification: $SEASONSPEC
     exit
  fi 
  #echo SeasonID: $SeasonID 'for ' $3

  if [ -n "$VBFoffsetID" ]; then
    if [ "$VBFoffsetID" = "-1" ]; then
     VBFoffsetID=""           #Set to zero length string which is what -n tests for
    fi
  fi
 
  ###################################################
  # Ready to build VBF file name (From OAWG 2.5 wiki page)
  ###################################################
  # [PrimaryType]_[SimModel]_[Epoch]_ATM[SeasonID]_[SimulationSource]_
  #zen[ZenithAngle]deg_az[AzimuthAngle]deg_[OffsetAngle]wobb.[VBFExtention]{

  VBFFILENAME=$PRIMARY'_'$SimModel'_'$Epoch'_ATM'$SeasonID'_KASCADE_zen'$zenith
  VBFFILENAME=$VBFFILENAME'deg_az'$azimuth'deg'
  if [ -n "$VBFoffsetID" ]; then
      VBFFILENAME=$VBFFILENAME'_'$VBFoffsetID'wobb'
  fi
  VBFFILENAME=$VBFFILENAME'.vbf'
return
}
##############################################################################

function SetupForHost()
{
 ###################################################################
 #Specifics for cluster we are runing on
 ###################################################################
if [ -n "$NERSC_HOST" ]; then
 host=$NERSC_HOST
else
 host=$(hostname)
fi

 echo host: $host
 
 hostString=${host:0:6}
 if test  "$hostString" = "edison"  #Are we running on Edison
  then
   EDISON=enabled
   QSUB='qsub.serial -V'
   PBSCMD='PBS'
   QUEUE='-q serial'
   WALLTIME='-l walltime=10:00:00'
   MEMREQUEST=' -l vmem=8GB '
   let SUBMITLIMIT=175
   echo '***Edison Cluster***'
 fi
 
 hostString=${host:0:4}
 if test  "$hostString" = "cori"  #Are we running on Cori
  then
   CORI=enabled
   QSUB='sbatch'
   PBSCMD='SBATCH'
   QUEUE='-p shared'
   WALLTIME='-t 10:00:00'
   let SUBMITLIMIT=10000
   echo '***Cori Phase 1 Cluster***'
 fi


 hostString=${host:0:6}
 if test  "$hostString" = "hansen"  #Are we running on Hansen
  then
   HANSEN=enabled
   QSUB='qsub -V'
   PBSCMD='PBS'
   QUEUE1='-q physics'
   WALLTIME1='-l walltime=10:00:00'
   QUEUE2='-q standby'
   WALLTIME2='-l walltime=04:00:00'
   QUEUE=$QUEUE1
   WALLTIME=$WALLTIME1
   MEMREQUEST=' -l mem=8GB'
   let SUBMITLIMIT=975
   echo '***Hansen Cluster:'$QUEUE' queue ***'
 fi

 hostString=${host:0:6}
 if test  "$hostString" = "coates"  #Are we running on coates
  then
   COATES=enabled
   QSUB='qsub -V'
   PBSCMD='PBS'
   QUEUE1='-q physics'
   WALLTIME1='-l walltime=30:00:00'
   QUEUE2='-q standby'
   WALLTIME2='-l walltime=04:00:00'
   QUEUE=$QUEUE1
   WALLTIME=$WALLTIME1
   MEMREQUEST=' -l mem=8GB'
   let SUBMITLIMIT=975
   echo '***Coates Cluster:'$QUEUE' queue ***'
 fi

 hostString=${host:0:5}
 if test  "$hostString" = "conte"  #Are we running on conte
  then
   CONTE=enabled
   QSUB='qsub -V'
   PBSCMD='PBS'
   QUEUE1='-q physics'
   WALLTIME1='-l walltime=30:00:00'
   QUEUE2='-q standby'
   WALLTIME2='-l walltime=04:00:00'
   QUEUE=$QUEUE1
   WALLTIME=$WALLTIME1
   MEMREQUEST=' -l mem=8GB'
   let SUBMITLIMIT=975
   echo '***Conte Cluster:'$QUEUE' queue ***'
 fi

 hostString=${host:0:6}
 if test  "$hostString" = "flogin"  #Are we running on ANL Fusion
  then
   FUSION=enabled
   QSUB='qsub -V'
   PBSCMD='PBS'
   # queue is determined by pbs.
   WALLTIME='-l walltime=30:00:00'
   let SUBMITLIMIT=975
 fi

 hostString=${host:0:4}
 if test  "$hostString" = "isis"  #Are we running on ISIS
  then
   ISIS=enabled
   let SUBMITLIMIT=975
 fi

if [ -n "$HANSEN" ] || [ -n "$CONTE" ] || [ -n "$COATES" ] ; then
   PURDUE=enabled
 fi
 if [ -n "$EDISON" ] || [ -n "$CORI" ] || [ -n "$FUSION" ]; then
  NERSCorARGN=enabled
 fi	
 if [ ! -n "$PURDUE" ] && [ ! -n "$ NERSCorARGN" ] && [ ! -n "$ISIS" ]  && [ ! -n "$FUSION" ]; then
  echo Fatal- Unknown host machine: $Host   
  exit
fi 
return
}
#############################################################################

function SgeFilePBSCmds()
##########################################################################
# Adds PBS or SBATCH commands to "pbs" files to be submitted
# $1: This scipts name of output "pbs" file
# $2: Energy(Gev (rounded down to int)Purdue: When low energy switch from the 
#     defualt physics queue to standbuy queue
####################################################################
{
 local sgeFile=$1
 let SgeEnergy=$2
 echo "#"!/bin/bash -l                 >$sgeFile
 if [ -n "$2" ] && [ -n "$PURDUE" ]; then
   if [ "$SgeEnergy" -lt "20000" ]; then
     echo "#"$PBSCMD $QUEUE2          >>$sgeFile
     echo "#"$PBSCMD $WALLTIME2       >>$sgeFile
   else
     echo "#"$PBSCMD $QUEUE           >>$sgeFile
     echo "#"$PBSCMD $WALLTIME        >>$sgeFile
   fi
 else
   echo "#"$PBSCMD $QUEUE             >>$sgeFile
   echo "#"$PBSCMD $WALLTIME          >>$sgeFile
 fi

 if [ -n "$CORI" ]; then
   echo "#"$PBSCMD -N 1               >>$sgeFile
   echo "#"$PBSCMD -n 1               >>$sgeFile
 else
   echo "#"$PBSCMD -l $MEMREQUEST     >>$sgeFile
 fi
}
#########################################################################

function SgeFileBashCmds()
##########################################################################
# Adds Batch commands to "pbs" files to be submitted
# $1: This scipts name of output "pbs" file
####################################################################
{
  sgeFile=$1
  if [ -n "$PURDUE" ]; then
    echo module load gcc/4.7.2                >>$sgeFile
    echo source /etc/profile                  >>$sgeFile
    echo lcl=$$PBSCMD_O_WORKDIR               >>$sgeFile
  fi
  echo cd $lcl                                >>$sgeFile
}
#########################################################################
