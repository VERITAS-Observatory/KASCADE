#!/bin/bash
#This script is used to automate the generation of the veritas Te files
#It has some arguments listed below.
# ************************************************************************
#$1 ksProduction Type spec: Ex:   G or  P or He4_ or CR or E
#$2 ksProduction season spec: Ex: W or S
#$3 telescope designation: W or V or U (Whipple, veritas, Upgrade)
#$4 comma seperated list of ZN values: Ex 1,10,20,30,40,50,60,70
#$5 comma seperated list of AZ values: Ex 0,45,90,135,180,225,270,315
#$6 Threshold: Ex 45mv or 50mv
#************************************************************************
# This will loop over all combinations of $4 and $5 entries
# Resulting te files will all be placed in same  directory

# Within that loop we can do:

GenerateTeFiles=enabled
CheckGeneratedTeFiles=enabled
HTARTeFiles=enabled
CheckHTARTeFiles=enabled
#Cleanup=enabled                 #should only enable  this if 
                                #"ExitOnTeCreationFailure" (below) is enabled

#ExitOnTeCreationFailure=enabled  

###########################################################################
function checkRunningJobs()
{
  RunningList=RunningList$2'.dat'
  SingleRunList=singleRunList$2'dat'

  if [ -s $RunningList ]; then
      rm $RunningList
  fi
  {
    while  read jobID;  do
      qstat $jobID &>$SingleRunList
      cat $SingleRunList | grep -v Unknown >>$RunningList
    done
  } <$1

  rm $SingleRunList
  if [ -s  $RunningList ]; then
    return 1
  else
    return 0
  fi
}
###########################################################################
function checkTeFiles()
#$1 V190Dir
#$2 TeName
#$3 Particle type
{
  cd $lcl
  V190Dir=$1
  TeName=$2
  Particle=$3
  
  TeDirName=$V190Dir'/'$TeName
  #Check we actually got some files (ie made the Te Directory)
  if [ ! -d $TeDirName ]; then
    echo 'KSAuto: Directory '$TeDirName' does not exist!'
    echo 'KSAuto: Apparently no te files were generated!'
    echo 'KSAuto: *************Exiting. Cluster failure?********'
    cd $lcl
    exit
  fi

  #Get a list of the files into CheckTe$ZnAz.txt
  CheckTeFile='CheckTe'$ZnAz'.txt'
  echo CheckTeFile: $CheckTeFile

  cd $TeDirName
  ls |xargs -n1 >$lcl'/'$CheckTeFile
  cd $lcl

  #checking this list for all files that should be there takes 5 - 10 min
  #thus , to insure we don't over run the 30 min time limit
  #we will have to submit the te file check and sleep until it finishes
  echo 'KSAuto: Checking for all te files in: '$TeName
       
  CheckTeFiles $CheckTeFile $TeName  $Particle
       
  date
  cd $lcl
  Result=$CheckTeFile'.Result'
  if [ -s $Result ]; then
     cat  $Result
     iFilesNotFound=1
     if [ -n "$ExitOnTeCreationFailure" ]; then
       exit
     fi
     return 1
  else
       echo 'KSAuto: All files present in file: ' $TeName
     return 0
  fi
}
#############################################################################

function CheckTeFiles()

#$1 is list of files to match
#$2 is base name of all files.
#$3 particle type
{
  FileList=$1
  TeName=$2
  Particle=$3

  #build a submission .pbs file
  sgeFile=$lcl'/'$TeName'TeCheck.pbs'
  echo "#"PBS -q $QUEUE                                          >$sgeFile
  echo "#"PBS -l walltime=01:00:00                              >>$sgeFile
  if [ -n "$HANSEN" ]; then
    echo source /etc/profile                                    >>$sgeFile
    echo module load gcc/4.5.1                                  >>$sgeFile
  fi
  echo cd $lcl                                                  >>$sgeFile
  echo $lcl/TeFileCheck.scr $lcl'/'$FileList  $TeName $Particle >>$sgeFile
  chmod 700 $sgeFile
  TECHECKLOG=$lcl'/TeCheck'$ZnAz'.log'

  qsub -V -e $sgeFile'.err' -o $sgeFile'.log' $sgeFile >$TECHECKLOG

  TECLOG=TEC$ZnAz'.log'
  cat $TECHECKLOG | grep $JobIDHost >$TECLOG
  echo "KSAuto: Sleeping until TeCeckFile finishes."
  runsNotDone=1
  while test $runsNotDone -eq 1 
    do
      sleep 300s
      checkRunningJobs $TECLOG $ZnAz
      let runsNotDone=$?
    done
  return
} 
#########################################################################


lcl=$PWD
source /etc/profile

host=$(hostname)
echo host: $host

hostString=${host:0:6}
if test  "$hostString" = "cvrsvc"  #Are we running on Carver
then
  CARVER=enabled
  V190DirBase='/project/projectdirs/m1304/veritas_CM/simulations/veritas/'
  JobIDHost='cvrsvc'
  QUEUE=serial
  echo '***Carver Cluster***'
fi

hostString=${host:0:6}
if test  "$hostString" = "hansen"  #Are we running on Hansen
then
  HANSEN=enabled
  V190DirBase='/scratch/lustreC/s/sembrosk/simulations/veritas/'
  JobIDHost='hansen-adm'
  QUEUE=physics
  echo ***Hansen Cluster***
fi

#To find the Zn amd AZ combinations first put $4 and $5 into arrays
#This is tricky. We save away the present Internal Filed Seperator and then
# set IFS to a comma. We then use the -a option with the read command to 
# read in our stings into arrays. Then we restore the IFS.

PMT=$3

SAVEIFS=$IFS
IFS=, read -a Zenith <<< "$4"
IFS=, read -a Azimuth <<< "$5"
IFS=$SAVEIFS

#Check if the is for 2D offsets, blank if not
if [ "$1" = "G" ] || [ "$1" = "E" ]; then
  OffSetSpec="2D"
fi

#now we loop

#Zenith
let izn=0
let iznEnd=${#Zenith[@]}
let iFilesNotFound=0
while test $izn -lt $iznEnd
  do

   #Iterate through Azimuth
   let kaz=0
   let kazEnd=${#Azimuth[@]}
   while test $kaz -lt $kazEnd
    do
     #Make   Zn_Az string
     if test ${Azimuth[$kaz]} = "0"
      then
       ZnAz=${Zenith[$izn]}'Deg'
     else
       ZnAz=${Zenith[$izn]}'_'${Azimuth[$kaz]}'Deg'
     fi
# *****************************************************************************
#  Now all the things we can do for a particular Zn_AZ
# *****************************************************************************
     if [ -n "$GenerateTeFiles" ]; then
       echo '##########################################################'
       echo '# GenerateTeFiles '
       echo '##########################################################'

       cd $lcl
       date

       #make up our ksProduction designation
       Spec=$2$PMT$1$ZnAz$OffSetSpec$6'1234M2'
  
       echo "KSAuto: Submitting ksProduction for " $Spec 
       echo "KSAuto: This takes a few minuts"

       ./ksProduction.scr $Spec ksallVBF.scr >KSProd$ZnAz'.log'

       #####################################################################
       # We are now going to wait for all of these to finish.
       #####################################################################

       echo "KSAuto: Submission of ksProduction to make shower TE files on "
       if [ -n "$HANSEN" ]; then
         echo "KSAuto: Hansen cluster for "$ZnAz" complete."
       fi
       if [ -n "$CARVER" ]; then
         echo "KSAuto: Carver cluster for "$ZnAz" complete."
       fi
       date
       echo "KSAuto: Sleeping until they all finish."
       # Cleanup the log file to only have Hansen cluster pids in it
 
       cat KSProd$ZnAz'.log' | grep $JobIDHost  |grep -v host >ShowerMakeTE$ZnAz'.log'

       runsNotDone=1
        
       while test $runsNotDone -eq 1 
	 do
          sleep 300s
	  checkRunningJobs 'ShowerMakeTE'$ZnAz'.log' $ZnAz
          let runsNotDone=$?
	 done
       echo "KSAuto: Te file generation complete"
     fi
     #######################################################################

 
     TeName=$2$PMT$1$ZnAz$OffSetSpec
     if [ "$1" = "G" ] ; then
           ParticleDir='gammas'
     fi
     if [ "$1" = "E" ] ; then
           ParticleDir='electrons'
     fi
     if [ "$1" = "P" ] ; then
           ParticleDir='protons'
     fi
     if [ "$1" = "He4_" ] ; then
           ParticleDir='he4'
     fi
     
     if [ "$1" = "CR" ] ; then
       V190DirP=$V190DirBase'/protons/V190' 
       V190DirHe4=$V190DirBase'/he4/V190' 
       V190Dir=$V190DirP
       TeNameP=$2$PMT'P'$ZnAz$OffSetSpec
       TeNameHe4=$2$PMT'He4_'$ZnAz$OffSetSpec
       TeName=$TeNameP
     else
       V190Dir=$V190DirBase'/'$ParticleDir'/V190'
       TeName=$2$PMT$1$ZnAz$OffSetSpec
     fi

     #######################################################################

     if [ -n "$CheckGeneratedTeFiles" ]; then
       echo '##########################################################'
       echo '# CheckGeneratedTeFiles '
       echo '##########################################################'

       cd $lcl
       date


       if [ "$1" = "CR" ] ; then
         checkTeFiles $V190Dir $TeNameP 'P'
         PFilesMissing=$?
         if [ "$PFilesMissing" -ne "1" ]; then
            echo 'KSAuto: All Te files present in '$TeNameP' directory'
         fi

         checkTeFiles $V190Dir $TeNameHe4 'He4_'
         He4FilesMissing=$?
         if [ "$He4FilesMissing" -ne "1" ]; then
            echo 'KSAuto: All Te files present in '$TeNameHe4' directory'
         fi

	 if [ "$PFilesMissing" -eq "1" ] || [ "$He4FilesMissing" -eq "1" ]; then
	    FilesMissing=1
         fi
       else
         checkTeFiles $V190Dir $TeName $1
         FilesMissing=$?
         if [ "$FilesMissing" -ne "1" ]; then
            echo 'KSAuto: All Te files present in '$TeName' directory'
         fi
       fi

       if [ "$FilesMissing" -eq "1" ]; then
         echo 'KSAuto: '$iFilesNotFound' files not created.'
         if [ -n "$ExitOnTeCreationFailure" ]; then
           echo 'KSAuto: *************Exiting. Missing files***********'
           cd $lcl
	   exit
         fi
       fi
     fi

     if [ -n "$HANSEN" ]; then
         HtarDestinationDir="/archive/fortress/group/veritas/simulations/"
     fi     
     # Carver HTAR just goes into base directory so don't define 
     # HtarDestinationDir       

     if [ -n "$HTARTeFiles" ]; then
       echo '##########################################################'
       echo '# HTARTeFiles '
       echo '##########################################################'
         #In order to not have this task (KSAuto.scr) be killed because it
         #runs too long, we have to submit this htar command to the cluster.
   
       cd $lcl
       date

       echo "KSAuto: htar "$TeName" to archive."

       #build a submission .pbs file
       sgeFile=$lcl'/'$TeName'HTAR.pbs'
       echo "#"PBS -q $QUEUE                        >$sgeFile
       echo "#"PBS -l walltime=04:00:00            >>$sgeFile
       if [ -n "$HANSEN" ]; then
          echo source /etc/profile                 >>$sgeFile
          echo module load gcc/4.5.1               >>$sgeFile
       fi
       echo cd $V190Dir                            >>$sgeFile
       echo htar -cvf   \\                         >>$sgeFile
       echo $HtarDestinationDir$TeName'.tar' \\    >>$sgeFile
       echo ./$TeName \\                           >>$sgeFile  
       echo '>'$lcl'/'$TeName'HTAR.log'            >>$sgeFile
       chmod 700 $sgeFile
       #pwd
       #echo lcl: $lcl
       HTARLOG=$lcl'/KSHTAR'$ZnAz'.log'
       #echo HTARLOG: $HTARLOG
       qsub -V -e $TeName'HTAR.pbs.err' -o $TeName'HTAR.pbs.log' $sgeFile >$HTARLOG
      
       #####################################################################
       # We are now going to wait for the htar to finish.
       #####################################################################

       if [ -n "$HANSEN" ]; then
         echo "KSAuto: htar $TeName job submission to Hansen cluster complete."
       fi
       if [ -n "$CARVER" ]; then
         echo "KSAuto: htar $TeName job submission to Carver cluster complete."
       fi
       date
       echo "KSAuto: Sleeping until it finishes."
       # Cleanup the log file to only have Hansen cluster pids in it
 
       ShowerMakeTE='ShowerMakeTE'$ZnAz'.log'
       cat $HTARLOG | grep $JobIDHost >$ShowerMakeTE

       runsNotDone=1
       while test $runsNotDone -eq 1 
	 do
          sleep 300s
	  checkRunningJobs $ShowerMakeTE $ZnAz
          let runsNotDone=$?
	 done
       echo "KSAuto: HTAR of "$TeName" complete"

       # And now cleanup: change protection
       chmod 775 $HtarDestinationDir$TeName'.tar'
       cd $lcl
     fi

     if [ -n "$CheckHTARTeFiles" ]; then
       echo '##########################################################'
       echo '# CheckHTARTeFiles '
       echo '##########################################################'
       
       cd $lcl
       date

       #Get a list of the files into CheckTe.txt
       TEDIR=$HtarDestinationDir$TeName'.tar'
       echo 'KSAuto: Get listing of htar file: '$TEDIR
       TeFileList=TeFileList$ZnAz
       htar -tf $TEDIR >$TeFileList

       #go through this file and edit the names so that only the filename 
       #part remains
       CheckTeFile=CheckTeHTAR$ZnAz'.txt'
       rm $CheckTeFile
    
       #echo 'Make file CheckTe.txt with only file names'
       {
         while read string
           do
             HtarFileName=${string##*/}
             # make sure its a filename
             if [ "${HtarFileName%%GeV*}" = "$TeName" ]; then
               echo $HtarFileName >>$CheckTeFile
             fi   
           done
        }<$TeFileList
       #checking this list for all files that should be there takes 5 - 10 min
       #thus , to insure we don't over run the 30 min time limit
       #we will have to submit the te file check and sleep until it finishes
       echo 'KSAuto: Checking for all te files in: '$TEDIR
       
       CheckTeFiles $CheckTeFile $TeName $1
       
       date
       cd $lcl
       if [ -s $CheckTeFile'.Result' ]; then
         cat  $CheckTeFile'.Result'
         if [ -n "$ExitOnTeCreationFailure" ]; then
	   exit
         fi
       else
         echo 'KSAuto: All files present in htar file'$TEDIR
       fi
     fi
 
     #########################################################################
     if [ -n "$Cleanup" ]; then
       echo '##########################################################'
       echo '# Cleanup '
       echo '##########################################################'
       echo 'KSAuto:  Removing *.err,*.pbs and moving k*.log to ./log/' 
       cd $lcl
       date
       rm *.err
       rm *.pbs
       mv k*.log ./log/   #Don't want to move KAuto.log out of V.
       cd $V190Dir
       echo 'KSAuto:  Removing directory '$TeName 
       rm -rf $TeName
       cd $lcl
     fi
     #########################################################################
     #Should all be done now. Go on to next combo. This all could take a
     # couple of  weeks or so
     date
     kaz=$((kaz+1))
    done
   izn=$((izn+1))
  done
 date
echo 'KSAuto: All done!--Good bye!'

###########################################################################

      
