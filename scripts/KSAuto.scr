#!/bin/bash
#This script is used to automate the generation of the veritas Te files
#It has some arguments listed below.
# ************************************************************************
#$1 ksProduction Type spec: Ex:   G or  P or He4_ or CR or E
#$2 ksProduction season spec: Ex: W or S
#$3 telescope designation: W, OA, NA or U (Whipple, OldArray,NewArray, Upgrade)
#$4 comma seperated list of ZN values: Ex 1,10,20,30,40,50,60,70
#$5 comma seperated list of AZ values: Ex 0,45,90,135,180,225,270,315 or "All"
#$6 Threshold: Ex 45mv or 50mv
#$7 MDL file name for VBF files: Ex MDL12U
#$8 Telescope 4 character spec: Ex: ABCD or wxyz
#$9 Reference real data Stage2 or later root file(in lcl dir): Ex: 63559.root
#************************************************************************
# We may want a function that makes sure all scripts are in place
##########################################################################

# This will loop over all combinations of $4(Zn) and $5(Az) entries

# Within that loop we can do:         #"dm" below indicates dummy value needed
#(Note:Only set up to do one operation at a time. Some operations don't wait!)
GenerateTeFiles=enabled                #needs $1 $2 $3 $4 $5 $6          WAITS!
#HTARTeFilesFromArchive=enabled         #needs $1 $2 $3 $4 $5
#CheckGeneratedTeFiles=enabled          #needs $1 $2 $3 $4 $5            WAITS!
#HTARTeFilesToArchive=enabled           #needs $1 $2 $3 $4 $5
#CheckHTARTeFiles=enabled               #needs $1 $2 $3 $4 $5
#BuildMDLAomeagaConfig=enabled          #needs $1 $2 $3 $4 $5 $6 $7 $8 $9 
#GenerateShowerVBFFiles=enabled         #needs $1 $2 $3 $4 $5 $6 $7 $8 NO WAIT!
#CheckGeneratedShwrVBFFiles=enabled     #needs $1 $2 $3 $4 $5 $6 dm $8 
#HTARShowerVBFFilesFromArchive=enabled    #needs $1 $2 $3 $4 $5 $6 $7 $8 
#GenerateZnAzVBFFile=enabled            #needs $1 $2 $3 $4 $5 $6 $7 $8
#HTARShowerVBFFilesToArchive=enabled    #needs $1 $2 $3 $4 $5 $6 $7 $8 

#DisableSleep=enabled           #Don't wait for files to finish. ususally use 
                                #only when we have a a group of small runs of 
                                #GenerateTeFiles and want to load up the 
                                #cluster


#Cleanup=enabled                #should only enable  this if 
                                #"ExitOnTeCreationFailure" (below) is enabled
#ExitOnTeCreationFailure=enabled  


EntryGEStart=1          #Gammas and Electrons 
                        #This for the checks not the running
#EntryGEEnd=44
EntryGEEnd=46

EntryPStart=1
EntryPEnd=44

EntryHe4Start=5
EntryHe4End=44


###########################################################################
function checkRunningJobs()
#$1 Job ID List
#$2 Zn_Az

{
  RunningList=RunningList$2'.dat'
  SingleRunList=singleRunList$2'dat'

  if [ -s $RunningList ]; then
      rm $RunningList
  fi
  {
    while  read jobID;  do
      qstat $jobID &>$SingleRunList
      cat $SingleRunList | grep -v Unknown >>$RunningList
    done
  } <$1

  rm $SingleRunList
  if [ -s  $RunningList ]; then
    rm $RunningList
    return 1
  else
    rm $RunningList
    return 0
  fi
}
###########################################################################
function checkFilesExist()
#$1 FileDir
#$2 TeName
#$3 Particle type
#$4 File Type (TE or VBF)
#$5 EntryStart
#$6 EntryEnd
#$7 Threshold speck (for file type VBF only)
{
  #echo checkFilesExist:args:1: $1' 2:' $2 ' 3:'$3' 4:' $4' 5:' $5' 6:' $6' 7:' $7
 
  cd $lcl
  FileDir=$1
  TeName=$2
  Particle=$3
  FileType=$4
  EntryStart=$5
  EntryEnd=$6
  Threshold=$7

  #Check we actually got some files (ie made the Directory)
  if [ ! -d $FileDir ]; then
    echo 'KSAuto: Directory '$FileDir' does not exist!'
    echo 'KSAuto: Apparently no te files were generated!'
    echo 'KSAuto: *************Exiting. Cluster failure?********'
    cd $lcl
    exit
  fi

  #Get a list of the files into Check$ZnAz.txt
  CheckListFiles='Check'$ZnAz'.txt'
  echo CheckListFiles: $CheckListFiles

  cd $FileDir
  ls |xargs -n1 >$lcl'/'$CheckListFiles
  cd $lcl

  #checking this list for all files that should be there takes 5 - 10 min
  #thus , to insure we don't over run the 30 min time limit
  #we will have to submit the te file check and sleep until it finishes
  echo 'KSAuto: Checking for all '$FileType' files in: '$FileDir
       
  Result=$CheckListFiles'.Result'
  rm $Result
  CheckList $CheckListFiles $TeName $Particle $FileType $EntryStart $EntryEnd $Threshold
       
  date
  cd $lcl
  if [ -s $Result ]; then
     cat  $Result
     iFilesNotFound=1
     if [ -n "$ExitOnTeCreationFailure" ]; then
       echo 'KSAuto: Exiting on File check failure'
       echo 'KSAuto: Goodbye'
       exit
     fi
     return 1
  else
     echo 'KSAuto: All files in Directory: '$FileDir' are present!'
     return 0
  fi
}
#############################################################################

function CheckList()

#$1 is list of files to match
#$2 is base name of all files.
#$3 Particle type (P He4 G or E)
#$4 File Type ( TE or VBF)
#$5 EntryStart
#$6 EntryEnd
#$7 Threshold (45mv needed only for FileType= VBF)
{
  #echo CheckkList:Args:1: $1' 2:' $2 ' 3:'$3' 4:' $4' 5:' $5' 6:' $6' 7:' $7
  FileList=$1
  TeName=$2
  Particle=$3
  FileType=$4
  EntryStart=$5
  EntryEnd=$6
  Threshold=$7


  #build a submission .pbs file
  sgeFile=$lcl'/'$TeName'Check'$FileType'.pbs'
  echo "#"PBS -q $QUEUE                                          >$sgeFile
  echo "#"PBS -l walltime=01:00:00                              >>$sgeFile
  if [ -n "$HANSEN" ]; then
    echo source /etc/profile                                    >>$sgeFile
    echo module load gcc/4.7.2                                  >>$sgeFile
  fi
  echo cd $lcl                                                  >>$sgeFile
  echo $lcl/KSAutoFileCheck.scr $lcl'/'$FileList $TeName \\     >>$sgeFile
  echo $Particle $FileType $EntryStart $EntryEnd $Threshold     >>$sgeFile
  chmod 700 $sgeFile
  CHECKLOG=$lcl'/'$FileType'Check'$ZnAz'.log'

  qsub -V -e $sgeFile'.err' -o $sgeFile'.log' $sgeFile >$CHECKLOG

  CLOG=$FileType'C'$ZnAz'.log'
  cat $CHECKLOG | grep $JobIDHost >$CLOG
  #rm $CHECKLOG
  echo "KSAuto: Running KSAutoFileCheck: Entries: " $EntryStart "-" $EntryEnd
  echo "KSAuto: Sleeping until CheckFile finishes. "
  runsNotDone=1
  while test $runsNotDone -eq 1 
    do
     sleep 60s
     checkRunningJobs $CLOG $ZnAz
     let runsNotDone=$?
    done
  #rm $CLOG
  #rm $sgeFile
  return
} 
#########################################################################

function SubmitHtarToArchive()
{
  #$1 directory that holds directory we want to archive
  #$2 Directory we want to archive
  #$3 filename (Directiory to archive)
  DestinationDir=$1    #Archive directory
  SourceDir=$2         #Disk Base Directory
  ShwrDir=$3           #filename (Directiory to archive)
  
  echo DestinationDir: $DestinationDir
  echo SourceDir: $SourceDir
  echo ShwrDir: $ShwrDir


  local=$PWD
  cd $SourceDir 
  pwd
  if [ ! -e "$ShwrDir" ]; then
      echo 'KSAuto: '$SourceDir'/'$ShwrDir' Does not exist. Exiting.'
      cd $local
      exit
  fi
  cd $local

  #build a submission .pbs file
  sgeFile=$lcl'/'$ShwrDir'HTAR.pbs'
  echo "#"PBS -q $QUEUE                                            >$sgeFile
  echo "#"PBS -l walltime=04:00:00                                >>$sgeFile
  if [ -n "$HANSEN" ]; then  
    echo source /etc/profile                                      >>$sgeFile
    echo module load gcc/4.7.2                                    >>$sgeFile
  fi
  echo cd $SourceDir                                              >>$sgeFile
  echo htar -cvf  $DestinationDir'/'$ShwrDir'.tar  ./'$ShwrDir \\ >>$sgeFile
  echo '>'$local'/'$ShwrDir'.log'     >>$sgeFile

  chmod 700 $sgeFile
  HTARLOG=$local'/KSHTAR'$ZnAz'To.log'
  qsub -V -e $ShwrDir'HTARTo.pbs.err' -o $ShwrDir'HTARTo.pbs.log' $sgeFile >$HTARLOG

  #####################################################################
  # We are now going to wait for the htar to finish.
  #####################################################################

  if [ -n "$HANSEN" ]; then
   echo "KSAuto: htar to archive "$ShwrDir" job submission to Hansen "$QUEUE" queue complete."
  fi
  if [ -n "$CARVER" ]; then
   echo "KSAuto: htar to archive "$ShwrDir" job submission to Carver cluster complete."
  fi
  date
  echo "KSAuto: Sleeping until it finishes."
  # Cleanup the log file to only have Hansen cluster pids in it
 
  ShowerMakeTE='ShowerMakeTE'$ZnAz'.log'
  cat $HTARLOG | grep $JobIDHost >$ShowerMakeTE

  runsNotDone=1
  while test $runsNotDone -eq 1 
    do
     sleep 60s
     checkRunningJobs $ShowerMakeTE $ZnAz
     let runsNotDone=$?
    done
  echo "KSAuto: HTAR of "$TeName" complete"

  # And now cleanup: change protection
  chmod 775 $HtarDir$ShwrDir'.tar'
  cd $lcl
}
#########################################################################

function SubmitHtarFromArchive()
{
  #$1 Archive directory where our tar file exists
  #$2 Destination directory where we want to unTar into.
  #$3 name of the Tar file we want to untar(without .tar extention).

  local=$PWD

  ArchiveDir=$1          #Archive direxctory
  DestinationDir=$2      #Base Disk directory
  Source=$3              #Base Tar file name
  SourceTarFile=$3'.tar'

  echo 'Src: '$ArchiveDir'/'$SourceTarFile 

  #build a submission .pbs file
  sgeFile=$lcl'/'$Source'From.pbs'
  echo "#"PBS -q $QUEUE                                     >$sgeFile
  echo "#"PBS -l walltime=04:00:00                         >>$sgeFile
  if [ -n "$HANSEN" ]; then
    echo source /etc/profile                               >>$sgeFile
    echo module load gcc/4.7.2                             >>$sgeFile
  fi
  echo cd $DestinationDir                                  >>$sgeFile
  echo htar -xvf  $ArchiveDir'/'$SourceTarFile  . \\         >>$sgeFile
  echo '>'$local'/'$Source'.log'     >>$sgeFile

  chmod 700 $sgeFile
  HTARLOG=$local'/KSHTAR'$ZnAz'From.log'
  qsub -V -e $Source'HTARFrom.pbs.err' -o $Source'HTARFrom.pbs.log' $sgeFile >$HTARLOG

  #####################################################################
  # We are now going to wait for the htar to finish.
  #####################################################################

  if [ -n "$HANSEN" ]; then
   echo "KSAuto: htar from archive "$ShwrDir" job submission to Hansen "$QUEUE" queue complete."
  fi
  if [ -n "$CARVER" ]; then
   echo "KSAuto: htar from archive "$ShwrDir" job submission to Carver cluster complete."
  fi
#  date
#  echo "KSAuto: Sleeping until it finishes."
#  # Cleanup the log file to only have Hansen cluster pids in it
# 
#  ShowerMakeTE='ShowerMakeTE'$ZnAz'.log'
#  cat $HTARLOG | grep $JobIDHost >$ShowerMakeTE
#
#  runsNotDone=1
#  while test $runsNotDone -eq 1 
#    do
#     sleep 60s
#     checkRunningJobs $ShowerMakeTE $ZnAz
#     let runsNotDone=$?
#    done
#  echo "KSAuto: HTAR of "$TeName" complete"

  # And now cleanup: change protection
  chmod 775 $HtarDir$ShwrDir'.tar'
  cd $lcl
}
  ##########################################################################



lcl=$PWD
source /etc/profile

host=$(hostname)
echo host: $host

hostString=${host:0:6}
if test  "$hostString" = "cvrsvc"  #Are we running on Carver
then
  CARVER=enabled
  VDirBase=$VERITASBASE'/simulations/veritas/'
  JobIDHost='cvrsvc'
  QUEUE=serial
  echo '***Carver Cluster***'
fi

hostString=${host:0:6}
if test  "$hostString" = "hansen"  #Are we running on Hansen
then
  HANSEN=enabled
  VDirBase=$SCRATCH'/simulations/veritas/'
  JobIDHost='hansen-adm'
  #QUEUE=physics
  QUEUE=standby
  echo ***Hansen Cluster***
fi

TELESPEC=$3
if [ "$3" = "W" ]; then
   PMT="W"
fi
if [ "$3" = "OA" ]; then
   PMT="V"
fi
if [ "$3" = "NA" ]; then
   PMT="V"
fi
if [ "$3" = "U" ]; then
   PMT="U"
fi

Threshold=$6

#To find the Zn amd AZ combinations first put $4 and $5 into arrays
#This is tricky. We save away the present Internal Filed Seperator and then
# set IFS to a comma. We then use the -a option with the read command to 
# read in our stings into arrays. Then we restore the IFS.

SAVEIFS=$IFS
IFS=, read -a Zenith <<< "$4"

if [ $5 = "All" ]; then
  Azimuth=([0]=0 45 90 135 180 225 270 315)
else  
  IFS=, read -a Azimuth <<< "$5"
fi

IFS=$SAVEIFS

#Check if the is for 2D offsets, blank if not
if [ "$1" = "G" ] || [ "$1" = "E" ]; then
  OffSetSpec="2D"
fi


if [ ! -e "$lcl/KSAutoFileCheck.scr" ]; then
  cp -v $KASCADEBASE'/scripts/KSAutoFileCheck.scr' $lcl
fi




#now we loop

#Zenith
let izn=0
let iznEnd=${#Zenith[@]}
let iFilesNotFound=0
while test $izn -lt $iznEnd
  do

   #Iterate through Azimuth
   let kaz=0
   let kazEnd=${#Azimuth[@]}
   while test $kaz -lt $kazEnd
    do
     #Make   Zn_Az string
     if test ${Azimuth[$kaz]} = "0"
      then
       ZnAz=${Zenith[$izn]}'Deg'
     else
       ZnAz=${Zenith[$izn]}'_'${Azimuth[$kaz]}'Deg'
     fi
# *****************************************************************************
#  Now all the things we can do for a particular Zn_AZ
# *****************************************************************************
     #make up our ksProduction designation
     ksProdSpec=$2$PMT$1$ZnAz$OffSetSpec$Threshold'1234M2'
  
     if [ -n "$GenerateTeFiles" ]; then
       echo '##########################################################'
       echo '# GenerateTeFiles '
       echo '##########################################################'

       cd $lcl
       date

       ####################################################################
       #Make sure ksallVBF.scr is set up correctly to generate Te files
       ####################################################################
       cp $KASCADEBASE/scripts/ksallVBF.scr ksallVBF$ZnAz'.scr'
       sed '/#KascadeEnable=enable/s/#Kascade/Kascade/g' \
                                                  <ksallVBF$ZnAz'.scr' >tmp1
       sed '/#LightEnable=enable/s/#Light/Light/g'               <tmp1 >tmp2
       sed '/#PeSortMergeEnable=enable/s/#PeSort/PeSort/g'       <tmp2 >tmp1
       sed '/#TriggerEnable=enable/s/#Trigger/Trigger/g'         <tmp1 >tmp2
       sed '/AomegaEnable=enable/s/Aomega/#Aomega/g'             <tmp2 >tmp1
       sed '/ArrayTrigEnable=enable/s/Array/#Array/g'            <tmp1 >tmp2
       sed '/#Production=enable/s/#Production/Production/g'      <tmp2 >tmp1
       if [ "$TELESPEC" = "OA" ]; then
         sed '/Fall09ArrayPositionsEnable=enable/s/Fall/#Fall/g' <tmp1 >tmp2
       else
         sed '/#Fall09ArrayPositionsEnable=enable/s/#Fall/Fall/g'<tmp1 >tmp2
       fi
       sed '/#RemoveSingleVBFEnable=enable/s/#Remove/Remove/g'   <tmp2 >tmp1
       sed '/#CleanupEnable=enable/s/#Cleanup/Cleanup/g'         <tmp1 >tmp2
       sed '/#DebugPrintEnable=enable/s/#Debug/Debug/g'          <tmp2 >tmp1
       sed '/#VBFOutputToDetectorSpecDir=enable/s/#VBF/VBF/g'    <tmp1 >tmp2
       sed '/MoonFilterEnable=enable/s/Moon/#Moon/g' <tmp2 >ksallVBF$ZnAz'.scr'
       rm tmp1
       rm tmp2
       ####################################################################

       echo "KSAuto: Submitting ksProduction for " $Spec 
       echo "KSAuto: This submission takes a few minuts"

       ./ksProduction.scr $ksProdSpec ksallVBF$ZnAz'.scr' >KSProd$ZnAz'.log'

       #####################################################################
       # We are now going to wait for all of these to finish.
       #####################################################################

       echo "KSAuto: Submission of ksProduction to make shower TE files on "
       if [ -n "$HANSEN" ]; then
         echo "KSAuto: Hansen "$QUEUE" queue for "$ZnAz" complete."
       fi
       if [ -n "$CARVER" ]; then
         echo "KSAuto: Carver cluster for "$ZnAz" complete."
       fi
       date

       if [ -n "$DisableSleep" ]; then
         echo 'SAuto: Done submission (but not generation) ' $ZnAz
       else
         echo "KSAuto: Sleeping until they all finish."
         #Cleanup the log file to only have Hansen cluster pids in it
 
         cat KSProd$ZnAz'.log' | grep $JobIDHost  |grep -v host >ShowerMakeTE$ZnAz'.log'
         rm KSProd$ZnAz'.log'
         runsNotDone=1
        
         while test $runsNotDone -eq 1 
	   do
            sleep 300s
	    checkRunningJobs 'ShowerMakeTE'$ZnAz'.log' $ZnAz
            let runsNotDone=$?
	   done
           rm 'ShowerMakeTE'$ZnAz'.log'
           rm ksallVBF$ZnAz'.scr'
           echo "KSAuto: Te file generation complete"
       fi
     fi
     #######################################################################
 
     TeName=$2$PMT$1$ZnAz$OffSetSpec
     if [ "$1" = "G" ] ; then
           ParticleDir='gammas'
     fi
     if [ "$1" = "E" ] ; then
           ParticleDir='electrons'
     fi
     if [ "$1" = "P" ] ; then
           ParticleDir='protons'
     fi
     if [ "$1" = "He4_" ] ; then
           ParticleDir='he4'
     fi
     
     if [ "$1" = "CR" ] ; then
       V190DirP=$VDirBase'/protons/V190' 
       V190DirHe4=$VDirBase'/he4/V190' 
       V190Dir=$V190DirP
       TeNameP=$2$PMT'P'$ZnAz$OffSetSpec
       TeNameHe4=$2$PMT'He4_'$ZnAz$OffSetSpec
       TeName=$TeNameP
       ShowerVBFProtonDir=$TeNameP$Threshold'1234M2'$2$8
       ShowerPDir=$VDirBase'/protons/'$ShowerVBFProtonDir
       ShowerVBFHe4Dir=$TeNameHe4$Threshold'1234M2'$2$8
       ShowerHe4Dir=$VDirBase'/he4/'$ShowerVBFHe4Dir
     else
       V190Dir=$VDirBase'/'$ParticleDir'/V190'
       TeName=$2$PMT$1$ZnAz$OffSetSpec
       ShowerVBFDir=$TeName$Threshold'1234M2'$2$8
       ShowerDir=$VDirBase'/'$ParticleDir'/'$ShowerVBFDir
     fi
   
     if [ -n "$HANSEN" ]; then
         HtarDir="/archive/fortress/group/veritas/simulations/"
     fi     
     # Carver HTAR just goes into base directory so don't define 
     # HtarDir       
 

     if [ -n "$HTARTeFilesFromArchive" ]; then
       echo '##########################################################'
       echo '# HTARTeFilesFromArchive'
       echo '##########################################################'
         #In order to not have this task (KSAuto.scr) be killed because it
         #runs too long, we have to submit this htar command to the cluster.
       SubmitHtarFromArchive $HtarDir'/'$2$PMT$1$OffSetSpec'TE/' $V190Dir $TeName 
     fi


     if [ -n "$CheckGeneratedTeFiles" ]; then
       echo '##########################################################'
       echo '# CheckGeneratedTeFiles '
       echo '##########################################################'

       cd $lcl
       date

       if [ "$1" = "CR" ] ; then
         checkFilesExist $V190Dir'/'$TeNameP $TeNameP 'P' 'TE' $EntryPStart $EntryPEnd $Threshold
         PFilesMissing=$?
         if [ "$PFilesMissing" -ne "1" ]; then
            echo 'KSAuto: All Te files present in '$TeNameP' directory'
         fi

         checkFilesExist $V190Dir'/'$TeNameHe4 $TeNameHe4 'He4_' 'TE' $EntryHe4Star $EntryHe4End $Threshold
         He4FilesMissing=$?
         if [ "$He4FilesMissing" -ne "1" ]; then
            echo 'KSAuto: All Te files present in '$TeNameHe4' directory'
         fi

	 if [ "$PFilesMissing" -eq "1" ] || [ "$He4FilesMissing" -eq "1" ]; 
         then
	    FilesMissing=1
         fi
       else
         checkFilesExist $V190Dir'/'$TeName $TeName $1 'TE' $EntryGEStart $EntryGEEnd $Threshold
         FilesMissing=$?
         if [ "$FilesMissing" -ne "1" ]; then
            echo 'KSAuto: All Te files present in '$TeName' directory'
         fi
       fi

       if [ "$FilesMissing" -eq "1" ]; then
         echo 'KSAuto: '$iFilesNotFound' files not created.'
         if [ -n "$ExitOnTeCreationFailure" ]; then
           echo 'KSAuto: *************Missing files***********'
           echo 'KSAuto: Exiting on File check failure'
           echo 'KSAuto: Goodbye'
           cd $lcl
	   exit
         fi
       fi
     fi
   #########################################################################

     if [ -n "$HTARTeFilesToArchive" ]; then
       echo '##########################################################'
       echo '# HTARTeFilesToArchive'
       echo '##########################################################'
         #In order to not have this task (KSAuto.scr) be killed because it
         #runs too long, we have to submit this htar command to the cluster.
   
       cd $lcl
       date

       SubmitHtarToArchive $HtarDir'/'$2$PMT$1$OffSetSpec'TE/' $V190Dir $TeName
      
    fi
     #########################################################################


     if [ -n "$CheckHTARTeFiles" ]; then
       echo '##########################################################'
       echo '# CheckHTARTeFiles '
       echo '##########################################################'
       cd $lcl
       date
       ###############################################
       #Only good for gammas and electrons
       ########################################

       #Get a list of the files into CheckTe.txt
       TEDIR=$HtarDir$TeName'.tar'
       echo 'KSAuto: Get listing of htar file: '$TEDIR
       TeFileList=TeFileList$ZnAz
       htar -tf $TEDIR >$TeFileList

       #go through this file and edit the names so that only the filename 
       #part remains
       CheckTeFile=CheckTeHTAR$ZnAz'.txt'
       rm $CheckTeFile
    
       #echo 'Make file CheckTe.txt with only file names'
       {
         while read string
           do
             HtarFileName=${string##*/}
             # make sure its a filename
             if [ "${HtarFileName%%GeV*}" = "$TeName" ]; then
               echo $HtarFileName >>$CheckTeFile
             fi   
           done
        }<$TeFileList
       #checking this list for all files that should be there takes 5 - 10 min
       #thus , to insure we don't over run the 30 min time limit
       #we will have to submit the te file check and sleep until it finishes
       echo 'KSAuto: Checking for all te files in: '$TEDIR
       
       CheckList $CheckTeFile $TeName $1 $EntryGEStart $EntryGEEnd
       
       date
       cd $lcl
       if [ -s $CheckTeFile'.Result' ]; then
         cat  $CheckTeFile'.Result'
         if [ -n "$ExitOnTeCreationFailure" ]; then
           echo 'KSAuto: ***Exiting on File check failure***'
           echo 'KSAuto: Goodbye'
	   exit
         fi
       else
         echo 'KSAuto: All files present in htar file '$TEDIR
       fi
     fi
     ######################################################################

     if [ -n "$BuildMDLAomeagaConfig" ]; then
	 echo '##########################################################'
	 echo '# BuildMDLAomeagaConfig '
	 echo '##########################################################'
	 echo 'KSAuto: Generating ksAomega config files from '$7'.dat'

	 cd $KASCADEBASE/inputs
	 rm -f tmp1
         rm -f tmp2
         rm -f Base.config

	 tConfig=$8
	 T1=${tConfig:0:1}
	 T2=${tConfig:1:1}
	 T3=${tConfig:2:1}
	 T4=${tConfig:3:1}
	 ../bin/ksAomega -save_config_and_exit=Base.config

         ##############################################################
         # now update each file with sed commands
         ##############################################################
 
         ################################################################
         #Read in the $7.txt file and set params
         ################################################################
         echo 'KSAuto: Setting ksAomegaV'$Threshold'('$8').config files to '$7'.dat values'

	 PFile=$lcl'/../simulations/veritas/'$9
 
	 {
	     while read tel threshold noise eff gain 
	       do
	sed '/DiscriminatorThreshold/s/10/'$threshold'/g' <Base.config  >tmp1
	       sed '/NoiseRate/s/12.5/'$noise'/g'                <tmp1  >tmp2
	       sed '/Efficiency/s/1/'$eff'/g'                    <tmp2 >tmp1
	       sed '/DigitalCountsPerPE/s/4.2/'$gain'/g'         <tmp1 >tmp2
	       sed '/Telescope "T1"/s/T1/'$tel'/g'               <tmp2 >tmp1
	       sed '/PixelStatsFileName " "/s:" ":"'$PFile'":g'  <tmp1 >tmp2
	       sed '/LightConeConcentration/s/0.35/0.45/g'       <tmp2 >tmp1
	       sed '/BadPixelSupression/s/ON/OFF/g'              <tmp1 >tmp2
	       if [ "$PMT" = "U" ]; then
		   sed '/SinglePeRiseTimeNS/s/0/1.7/g'           <tmp2 >tmp1
		   sed '/SinglePeFallTimeNS/s/0/4.75/g'          <tmp1 >tmp2
	       else
		   sed '/SinglePeRiseTimeNS/s/0/3.2/g'           <tmp2 >tmp1
		   sed '/SinglePeFallTimeNS/s/0/8.5/g'           <tmp1 >tmp2
	       fi
	       sed '5 a \#This is special for tel '$tel'.'<tmp2 >$tel'.config'
	     done
	     }<$lcl'/'$7".dat"

	 mv  -f T1.config ksAomegaV$Threshold$T1'.config'
	 mv  -f T2.config ksAomegaV$Threshold$T2'.config'
	 mv  -f T3.config ksAomegaV$Threshold$T3'.config'
	 mv  -f T4.config ksAomegaV$Threshold$T4'.config'
	 rm tmp1
         rm tmp2
         rm Base.config
	 cd $lcl
     fi

     #########################################################################
     if [ -n "$GenerateShowerVBFFiles" ]; then
       echo '##########################################################'
       echo '# GenerateShowerVBFFiles '
       echo '##########################################################'

       cd $lcl'/../simulations/veritas/'
       date

       ####################################################################
       #Make sure ksallVBF.scr is set up correctly to generate VBF shower files
       ####################################################################
       cp $KASCADEBASE/scripts/ksallVBF.scr ksallVBF$ZnAz'.scr'
       sed '/KascadeEnable=enable/s/Kascade/#Kascade/g' \
                                                <ksallVBF$ZnAz'.scr' >tmp1
       sed '/LightEnable=enable/s/Light/#Light/g'                <tmp1 >tmp2
       sed '/PeSortMergeEnable=enable/s/PeSort/#PeSort/g'        <tmp2 >tmp1
       sed '/TriggerEnable=enable/s/Trigger/#Trigger/g'          <tmp1 >tmp2
       sed '/#AomegaEnable=enable/s/#Aomega/Aomega/g'            <tmp2 >tmp1
       sed '/#ArrayTrigEnable=enable/s/#Array/Array/g'           <tmp1 >tmp2
       sed '/#Production=enable/s/#Production/Production/g'      <tmp2 >tmp1
       if [ "$TELESPEC" = "OA" ]; then
	 sed '/Fall09ArrayPositionsEnable=enable/s/Fall/#Fall/g'  <tmp1 >tmp2
       else
	 sed '/#Fall09ArrayPositionsEnable=enable/s/#Fall/Fall/g' <tmp1 >tmp2
       fi
       sed '/#RemoveSingleVBFEnable=enable/s/#Remove/Remove/g'   <tmp2 >tmp1
       sed '/#CleanupEnable=enable/s/#Cleanup/Cleanup/g'         <tmp1 >tmp2
       sed '/#DebugPrintEnable=enable/s/#Debug/Debug/g'          <tmp2 >tmp1
       sed '/#VBFOutputToDetectorSpecDir=enable/s/#VBF/VBF/g'    <tmp1 >tmp2
       sed '/MoonFilterEnable=enable/s/Moon/#Moon/g'   \
                                                   <tmp2 >ksallVBF$ZnAz'.scr'
       rm tmp1
       rm tmp2
       ####################################################################
       echo 'KSAuto: Process ksAomega*.config: ' $8 ' through ksAomega and ksArrayTrig'
       echo 'KSLAuto:  use less KSProcess'$ZnAz'.log or qstat to monitor progress.'
       cd $lcl'/../simulations/veritas/'

       date
       #make up our ksProduction designation
       Spec=$ksProdSpec$8

       './ksProduction.scr'  $Spec ksallVBF$ZnAz'.scr' >KSProcess$ZnAz'.log'

       #####################################################################
       # We are now going to wait for all of these to finish.
       ### #################################################################

       echo "KSAuto: Submission of ksProduction to make shower TE files on "
       if [ -n "$HANSEN" ]; then
         echo "KSAuto: Hansen "$QUEUE" queue for "$ZnAz" complete."
       fi
       if [ -n "$CARVER" ]; then
         echo "KSAuto: Carver cluster for "$ZnAz" complete."
       fi
       date
#       echo "KSAuto: Sleeping until they all finish."
#       # Cleanup the log file to only have cluster pids in it
# 
#       cat KSProcess$ZnAz'.log' | grep $JobIDHost  |grep -v host >ShowerMakeVBF$ZnAz'.log'
#
#       runsNotDone=1
#        
#       while test $runsNotDone -eq 1 
#	 do
#          sleep 300s
#	  checkRunningJobs 'ShowerMakeVBF'$ZnAz'.log' $ZnAz
#          let runsNotDone=$?
#	 done
#       rm ksallVBF$ZnAz'.scr'
       echo "KSAuto: VBF shower file generation complete"
      
       cd $lcl
     fi
     #######################################################################



     if [ -n "$CheckGeneratedShwrVBFFiles" ]; then
       echo '##########################################################'
       echo '# CheckGeneratedShwrVBFFiles '
       echo '##########################################################'

       cd $lcl
       date


       if [ "$1" = "CR" ] ; then
         checkFilesExist $ShowerPDir  $TeNameP 'P' 'VBF' $EntryPStart $EntryPEnd $Threshold
         PFilesMissing=$?
         if [ "$PFilesMissing" -ne "1" ]; then
            echo 'KSAuto: All Te files present in '$TeNameP' directory'
         fi

         checkFilesExist $ShowerHe4Dir $TeNameHe4 'He4_' 'VBF' $EntryHe4Star $EntryHe4End $Threshold
         He4FilesMissing=$?
         if [ "$He4FilesMissing" -ne "1" ]; then
            echo 'KSAuto: All Te files present in '$TeNameHe4' directory'
         fi

	 if [ "$PFilesMissing" -eq "1" ] || [ "$He4FilesMissing" -eq "1" ]; 
         then
	    FilesMissing=1
         fi
       else
         checkFilesExist $ShowerDir $TeName $1 'VBF' $EntryGEStart $EntryGEEnd $Threshold
         FilesMissing=$?
         if [ "$FilesMissing" -ne "1" ]; then
            echo 'KSAuto: All '$FileType' files present in '$ShowerDir
         fi
       fi

       if [ "$FilesMissing" -eq "1" ]; then
         echo 'KSAuto: '$iFilesNotFound' files not created.'
         if [ -n "$ExitOnTeCreationFailure" ]; then
           echo 'KSAuto: *************Missing files***********'
           echo 'KSAuto: Exiting on File check failure'
           echo 'KSAuto: Goodbye'
           cd $lcl
	   exit
         fi
       fi
     fi
     #########################################################################


     if [ -n "$HTARShowerVBFFilesFromArchive" ]; then
       echo '##########################################################'
       echo '# HTARShowerVBFFilesFromArchive'
       echo '##########################################################'
         #In order to not have this task (KSAuto.scr) be killed because it
         #runs too long, we have to submit this htar command to the cluster.
   
       cd $lcl'/../simulations/veritas/'
       date
       if [ "$1" = "CR" ] ; then
	 SubmitHtarFromArchive $HtarDir'/'$2$PMT$1$7'VBFShowers/' $VDirBase'/protons/' $ShowerVBFProtonsDir   
         echo "KSAuto: htar " $ShowerVBFProtonsDir" to archive complete."
	 SubmitHtarFromArchive $HtarDir'/'$2$PMT$1$7'VBFShowers/' $VDirBase'/he4/' $ShowerVBFHe4Dir  
         echo "KSAuto: htar "$ShowerVBFHe4Dir" to archive complete."
       else
	ShowerMDLDir=$2$PMT$1$ZnAz$OffSetSpec$Threshold'1234M2'$2$7

        SubmitHtarFromArchive $HtarDir'/'$2$PMT$1$7'VBFShowers/' $VDirBase'/'$ParticleDir'/' $ShowerMDLDir 
       fi
    fi
     #########################################################################
  #$1 Archive directory wqhere our tar file exists
  #$2 name of the Tar file we want to untar(without .tar extention).
  #$3 Destination directory where we want to unTar into.


     #Following only works for G so far!
     if [ -n "$GenerateZnAzVBFFile" ]; then
       echo '##########################################################'
       echo '# GenerateZnAzVBFFile '
       echo '##########################################################'
       SVDir=$lcl'/../simulations/veritas/'
       cd $SVDir
       ProcessAll=$1'ProcessAll'
       if [ ! -e "$ProcessAll" ]; then
	   cp -v $KASCADEBASE'/scripts/'$ProcessAll .
       fi
 

       if [ "$1" = "CR" ] ; then
         echo"CRProcessAll not working with KSAuto yet"
	 exit
	   #./CRProcessAll V190 $ZnAz $Threshold $2$PMT $7 $8
       fi

       if [ "$1" = "G" ] || [ "$1" = "E" ] ; then
         $SVDir'/'$ProcessAll V190 $ZnAz $Threshold $2$PMT $7 $8 >$ProcessAll$ZnAz'.log'
       fi
       date

       #Wait for it!

#       cat $ProcessAll$ZnAz'.log' | grep $JobIDHost  |grep -v host >ShowerProcessAll$ZnAz'.log'

#       runsNotDone=1
        
#       while test $runsNotDone -eq 1 
#	 do
#          sleep 300s
#	  checkRunningJobs ShowerProcessAll$ZnAz'.log' $ZnAz
#          let runsNotDone=$?
#	 done
#       rm ksallVBF$ZnAz'.scr'
       echo "KSAuto: "$ProcessAll" VBF wobble shower file generation complete"
      fi
     ########################################################################


     if [ -n "$HTARShowerVBFFilesToArchive" ]; then
       echo '##########################################################'
       echo '# HTARShowerVBFFilesToArchive'
       echo '##########################################################'
         #In order to not have this task (KSAuto.scr) be killed because it
         #runs too long, we have to submit this htar command to the cluster.
   
       cd $lcl'/../simulations/veritas/'
       date
       if [ "$1" = "CR" ] ; then
	 SubmitHtarToArchive $HtarDir'/'$2$PMT'P'$7'VBFShowers/' $VDirBase'/protons/'  $ShowerVBFProtonsDir
         echo "KSAuto: htar " $ShowerVBFProtonsDir" to archive complete."
	 SubmitHtarToArchive $HtarDir'/'$2$PMT'He4'$7'VBFShowers/' $VDirBase'/he4/'  $ShowerVBFHe4Dir
         echo "KSAuto: htar "$ShowerVBFHe4Dir" to archive complete."
       else
        ShowerMDLDir=$2$PMT$1$ZnAz$OffSetSpec$Threshold'1234M2'$2$7

        SubmitHtarToArchive $HtarDir'/'$2$PMT$1$7'VBFShowers/' $VDirBase'/'$ParticleDir'/'  $ShowerMDLDir
       fi
    fi
     #########################################################################





#For reference
#$1 ksProduction Type spec: Ex:   G or  P or He4_ or CR or E
#$2 ksProduction season spec: Ex: W or S
#$3 telescope designation: W or V or U (Whipple, veritas, Upgrade)
#$4 comma seperated list of ZN values: Ex 1,10,20,30,40,50,60,70
#$5 comma seperated list of AZ values: Ex 0,45,90,135,180,225,270,315
#$6 Threshold: Ex 45mv or 50mv
#$7 MDL file name for VBF files: Ex MDL12U
#$8 Telescope 4 character spec: Ex: ABCD or wxyz
#$9 Reference real data Stage2 or later root file(in lcl dir): Ex: 63559.root





     if [ -n "$Cleanup" ]; then
       echo '##########################################################'
       echo '# Cleanup '
       echo '##########################################################'
       echo 'KSAuto:  Removing *.err,*.pbs and moving k*.log to ./log/' 
       cd $lcl
       date
       rm *.err
       rm *.pbs
       mv k*.log ./log/   #Don't want to move KAuto.log out of V.
       cd $V190Dir
       echo 'KSAuto:  Removing directory '$TeName 
       rm -rf $TeName
       cd $lcl
     fi
     #########################################################################
     #Should all be done now. Go on to next combo. This all could take a
     #couple of weeks or so
     date
     kaz=$((kaz+1))
    done
   izn=$((izn+1))
  done
date
echo 'KSAuto: All done!--Good bye!'

###########################################################################

      
