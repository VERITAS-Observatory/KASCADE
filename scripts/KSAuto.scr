#!/bin/bash
#This script is used to automate the generation of the veritas Te files
#It has some arguments listed below.
# ************************************************************************
#$1 ksProduction Type spec: Ex:   G or  P or He4_ or CR or E
#$2 ksProduction season spec: Ex: W or S
#$3 telescope designation: W or V or U (Whipple, veritas, Upgrade)
#$4 comma seperated list of ZN values: Ex 1,10,20,30,40,50,60,70
#$5 comma seperated list of AZ values: Ex 0,45,90,135,180,225,270,315
#$6 Threshold: Ex 45mv or 50mv
#************************************************************************
# This will loop over all combinations of $4 and $5 entries
# Resulting te files will all be placed in same  directory

# Within that loop we can do:

#GenerateTeFiles=enabled
CheckGeneratedTeFiles=enabled
#HTARTeFiles=enabled
#CheckHTARTeFiles=enabled
#Cleanup=enabled                 #should only enabler this is 
                                #"ExitOnTeCreationFailure" (below) is enabled

#ExitOnTeCreationFailure=enabled  

###########################################################################
function checkRunningJobs()
{
  if [ -s checkRunners.dat ]; then
      rm checkRunners.dat
  fi
  {
    while  read jobID;  do
      qstat $jobID &>checkJobRun.dat
      cat checkJobRun.dat | grep -v Unknown >>checkRunners.dat
    done
  } <$1
  rm checkJobRun.dat
  if [ -s checkRunners.dat ]; then
    return 1
  else
    return 0
  fi
}
###########################################################################
function checkTeFiles()
#$1 V190Dir
#$2 TeName
#$3 Particle type
{
  let iEntryStart=1
  let iEntryEnd=44

  energy=([1]=20   23.9 28.6 34.2 40.9 48.9 58.5 69.9 83.6 100 119.6 143 171 204.5 244.5 292.4 350  418 500 598 715 855 1022 1223 1462 1748 2091 2500 2990 3575 4275 5112 6113 7310 8741 10453 12500 14948 17875 21375 25560 25560 30565 30565 43707 52265 ) 
  
  if [ "$3" = "G" ] || [ "$3" = "E" ]; then
     start=([1]=1    1    1    1    1    1    1    1    1    1   1     1   1   1     1     1     1    1   1   1   1   1   1    1    1    1    1    1    1    1    1    1    1    1    1    1     1     1     1     1     1     11    1     11    1     1) 
     end=([1]=1001 837  700  585  490  409  342  286  240  200 168   140 117 98    82    69    58   48  40  34  28  24  20   20   20   20   20   20   20   20   20   20   20   20   20   20    20    20    20    20    10    20    10    20    10    10 )
  fi


  if [ "$3" = "P" ]; then
     start=([1]=1    1    1    1    1    1    1    1    1    1   1     1   1   1     1     1     1    1   1   1   1   1   1    1    1    1    1    1    1    1    1    1    1    1    1    1     1     1     1     1     1     1     1     1 ) 
     end=([1]=1382 1007 734  535  390  284  207  151  110  80  59    43  31  23    17    12    10   10  10  10  10  10  10   10   10   10   10   10   10   10   10   10   10   10   10   10    10    10    10    10    10    5     5     5 )
  fi

  if [ "$3" = "He4_" ]; then
     echo '***Helium4***'
     let iEntryStart=5

     start=([1]=1    1    1    1    1    1    1    1    1    1   1     1   1   1     1     1     1    1   1   1   1   1   1    1    1    1    1    1    1    1    1    1    1    1    1    1     1     1     1     1     1     1     1     1 ) 
     end=([1]=519  387  289  215  161  120  90   67   50   37  28    21  16  12    10    10    10   10  10  10  10  10  10   10   10   10   10   10   10   10   10   10   10   10   10   10    10    10    10    10    10    5     5     5 )
  fi





  TeDirName=$1'/'$2
  #Check we actually got some files (ie made the Te Directory)
  if [ ! -d $TeDirName ]; then
    echo 'KSAuto: Directory '$TeDirName' does not exist!'
    echo 'KSAuto: Apparently no te files were generated!'
    echo 'KSAuto: *************Exiting. Cluster failure?********'
    cd $lcl
    exit
  fi

  #Get a list of the files into CheckTe.txt
  cd $TeDirName
  ls |xargs -n1 >CheckTe.txt
  let iFilesNotFound=0

  let j=$iEntryStart
  echo 'KSAuto: Searching  for Te files in '$TeDirName
  while test $j -le $iEntryEnd
    do      
     let iShStart=${start[$j]}
     let iShEnd=${end[$j]}
     e=${energy[$j]}
     #echo 'Searching energy '$e' GeV for '$iShEnd' showers'
     let k=$iShStart

     while test $k -le $iShEnd
       do
        #Make up the file name
        TeFile=$2'GeV'$e'te.d'$k
        Found=0
        {
         while read FileName
           do
	    if [ "$TeFile" = "$FileName" ]; then
             Found=1
             break
            fi
          done
        }<CheckTe.txt
        if [ "$Found" = "0" ]; then
          echo 'File Not found: '$TeFile
          let iFilesNotFound=iFilesNotFound+1
        fi
        let k=k+1
       done
     let j=j+1
    done
  if [ $iFilesNotFound != 0 ]; then
      return 1
  else
      return 0
  fi
}
#############################################################################

lcl=$PWD
source /etc/profile

host=$(hostname)
echo host: $host

hostString=${host:0:6}
if test  "$hostString" = "cvrsvc"  #Are we running on Carver
then
  V190DirBase='/project/projectdirs/m1304/veritas_CM/simulations/veritas/'
  echo '***Carver Cluster***'
fi

hostString=${host:0:6}
if test  "$hostString" = "hansen"  #Are we running on Hansen
then
  V190DirBase='/scratch/lustreC/s/sembrosk/simulations/veritas/'
  echo ***Hansen Cluster***
fi

#To find the Zn amd AZ combinations first put $4 and $5 into arrays
#This is tricky. We save away the present Internal Filed Seperator and then
# set IFS to a comma. We then use the -a option with the read command to 
# read in our stings into arrays. Then we restore the IFS.

PMT=$3

SAVEIFS=$IFS
IFS=, read -a Zenith <<< "$4"
IFS=, read -a Azimuth <<< "$5"
IFS=$SAVEIFS

#Check if the is for 2D offsets, blank if not
if [ "$1" = "G" ] || [ "$1" = "E" ]; then
  OffSetSpec="2D"
fi

#now we loop

#Zenith
let izn=0
let iznEnd=${#Zenith[@]}
let iFilesNotFound=0
while test $izn -lt $iznEnd
  do

   #Iterate through Azimuth
   let kaz=0
   let kazEnd=${#Azimuth[@]}
   while test $kaz -lt $kazEnd
    do
     #Make   Zn_Az string
     if test ${Azimuth[$kaz]} = "0"
      then
       ZnAz=${Zenith[$izn]}'Deg'
     else
       ZnAz=${Zenith[$izn]}'_'${Azimuth[$kaz]}'Deg'
     fi
# *****************************************************************************
#  Now all the things we can do for a particular Zn_AZ
# *****************************************************************************
     if [ -n "$GenerateTeFiles" ]; then
       echo '##########################################################'
       echo '# GenerateTeFiles '
       echo '##########################################################'

       cd $lcl
       date

       #make up our ksProduction designation
       Spec=$2$PMT$1$ZnAz$OffSetSpec$6'1234M2'
  
       echo "KSAuto: Submitting ksProduction for " $Spec 
       echo "KSAuto: This takes a few minuts"

       ./ksProduction.scr $Spec ksallVBF.scr >KSProd.log

       #####################################################################
       # We are now going to wait for all of these to finish.
       #####################################################################

       echo "KSAuto: Submission of ksProduction to make shower TE files on "
       echo "KSAuto: Hansen cluster for "$ZnAz" complete."
       date
       echo "KSAuto: Sleeping until they all finish."
       # Cleanup the log file to only have Hansen cluster pids in it
 
       cat KSProd.log | grep hansen-adm >ShowerMakeTE.log

       runsNotDone=1
       while test $runsNotDone -eq 1 
	 do
          sleep 60s
	  checkRunningJobs "ShowerMakeTE.log"
          let runsNotDone=$?
	 done
       echo "KSAuto: Te file generation complete"
     fi
     #######################################################################

 
     TeName=$2$PMT$1$ZnAz$OffSetSpec
     if [ "$1" = "G" ] ; then
           ParticleDir='gammas'
     fi
     if [ "$1" = "E" ] ; then
           ParticleDir='electrons'
     fi
     if [ "$1" = "P" ] ; then
           ParticleDir='protons'
     fi
     if [ "$1" = "He4_" ] ; then
           ParticleDir='he4'
     fi
     
     if [ "$1" = "CR" ] ; then
       V190DirP=$V190DirBase'/protons/V190' 
       V190DirHe4=$V190DirBase'/he4/V190' 
       V190Dir=$V190DirP
       TeNameP=$2$PMT'P'$ZnAz$OffSetSpec
       TeNameHe4=$2$PMT'He4_'$ZnAz$OffSetSpec
       TeName=$TeNameP
     else
       V190Dir=$V190DirBase'/'$ParticleDir'/V190'
       TeName=$2$PMT$1$ZnAz$OffSetSpec
     fi

     #######################################################################

     if [ -n "$CheckGeneratedTeFiles" ]; then
       echo '##########################################################'
       echo '# CheckGeneratedTeFiles '
       echo '##########################################################'

       cd $lcl
       date


       if [ "$1" = "CR" ] ; then
         checkTeFiles $V190Dir $TeNameP 'P'
         PFilesMissing=$?
         if [ "$PFilesMissing" -ne "1" ]; then
            echo 'KSAuto: All Te files present in '$TeNameP' directory'
         fi

         checkTeFiles $V190Dir $TeNameHe4 'He4_'
         He4FilesMissing=$?
         if [ "$He4FilesMissing" -ne "1" ]; then
            echo 'KSAuto: All Te files present in '$TeNameHe4' directory'
         fi

	 if [ "$PFilesMissing" -eq "1" ] || [ "$He4FilesMissing" -eq "1" ]; then
	    FilesMissing=1
         fi
       else
         checkTeFiles $V190Dir $TeName $1
         FilesMissing=$?
         if [ "$FilesMissing" -ne "1" ]; then
            echo 'KSAuto: All Te files present in '$TeName' directory'
         fi
       fi

       if [ "$FilesMissing" -eq "1" ]; then
         echo 'KSAuto: '$iFilesNotFound' files not created.'
         if [ -n "$ExitOnTeCreationFailure" ]; then
           echo 'KSAuto: *************Exiting. Missing files***********'
           cd $lcl
	   exit
         fi
       fi
     fi

     HtarDestinationDir="/archive/fortress/group/veritas/simulations/"

     if [ -n "$HTARTeFiles" ]; then
	 echo '##########################################################'
	 echo '# HTARTeFiles '
	 echo '##########################################################'

	 cd $V190Dir
	 date

         echo "KSAuto: htar "$TeName" to archive."

	 if htar -cvf $HtarDestinationDir'/'$TeName'.tar' ./$TeName  
	 then
	 # And now cleanup: change protections and remove it from the scratch
           chmod 775 $HtarDestinationDir'/'$TeName'.tar'
           echo 'KSAuto: htar sucessful.'
	 else
	    echo "KSAuto: Fatal--htar failed for "$TeName
            echo 'KSAuto: ***********Exiting. htar failure!**************'
            cd $lcl
            exit
         fi
         cd $lcl
     fi

     if [ -n "$CheckHTARTeFiles" ]; then
       echo '##########################################################'
       echo '# CheckHTARTeFiles '
       echo '##########################################################'
       
       cd $lcl
       date

       #Get a list of the files into CheckTe.txt
       TEDIR=$HtarDestinationDir'/'$TeName'.tar'
       echo 'KSAuto: Get listing of htar file: '$TEDIR
       htar -tf $TEDIR >TeFileList

       #go through this file and edit the names so that only the filename 
       #part remains
       rm CheckTe.txt
    
       #echo 'Make file CheckTe.txt with only file names'
       {
         while read string
           do
             HtarFileName=${string##*/}
             # make sure its a filename
             if [ "${HtarFileName%%GeV*}" = "$TeName" ]; then
               echo $HtarFileName >>CheckTe.txt
             fi   
           done
        }<TeFileList
       checkTeFiles "CheckTe.txt"
       FilesMissing=$?

       cd $lcl

       if [ "$FilesMissing" -eq "1" ]; then
         echo 'KSAuto: '$iFilesNotFound' files not created.'
         if [ -n "$ExitOnTeCreationFailure" ]; then
	   exit
         fi
       else
         echo 'KSAuto: All files present in htar file'$TEDIR
       fi
     fi
 
     #########################################################################
     if [ -n "$Cleanup" ]; then
       echo '##########################################################'
       echo '# Cleanup '
       echo '##########################################################'
       echo 'KSAuto:  Removing *.err,*.pbs and moving k*.log to ./log/' 
       cd $lcl
       date
       rm *.err
       rm *.pbs
       mv k*.log ./log/   #Don't want to move KAuto.log out of V.
       cd $V190Dir
       echo 'KSAuto:  Removing directory '$TeName 
       rm -rf $TeName
       cd $lcl
     fi
     #########################################################################
     #Should all be done now. Go on to next combo. This all could take a
     # couple of  weeks or so
     date
     kaz=$((kaz+1))
    done
   izn=$((izn+1))
  done
 date
echo 'KSAuto: All done!--Good bye!'

###########################################################################

      
