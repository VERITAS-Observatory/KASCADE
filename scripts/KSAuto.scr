#!/bin/bash
# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# UNDER CONSTRUTION: Gradulally changeing from WV,SV to WN,SN (for consistancy)
# fixed for:
#  HTARTeFilesToArchive 
#  HTARTeFilesFromArchive
#  HTARShowerVBFFilesToArchive
#  HTARShowerVBFFilesFromArchive
# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

#This script is used to automate the generation of the veritas Te files
#************************************************************************
# We may want a function that makes sure all scripts are in placeeanup
##########################################################################


# This will loop over all combinations of $4(Zn) and $5(Az) entries

LimitSubmissions=enabled      #Enable if you want to generate Shower files 
MaxQsubsDefault=200            #with ksProduction and only want to make
                              #750 submission in queue at one time.Causes us to
                              #wait
#Cleanup=enabled                

#DisableSleep=enabled           #Don't wait for files to finish. ususally use 
                                #only when we have a a group of small runs of 
                                #GenerateTeFiles and want to load up the 
                                #cluster
#CheckByPBS=enabled
#ExitOnTeCreationFailure=enabled  

############################################################
# Force the Check files to  match shower entry numberes to those used in ksProduction.scr
############################################################
EntryGEStart=1          #Gammas and Electrons 
                        #This for the checks and for TE gen only for now.
EntryGEEnd=45

EntryPStart=1
EntryPEnd=45
EntryHe4Start=5
EntryHe4End=45
if [ "$1" = "CR" ]; then
  EntryPEnd=45
  EntryHe4End=45
fi
#############################################################
function commandEnable()
{
  if [ "$1" = "ListCommands" ]; then
    usage
    echo '***KSAuto.scr Valid Commands:'
    echo '    #------------------------      #------------------------ '  
    echo '    # KASCADE ksTrigger TE Files   # VBF Shower File Generation'
    echo '    #  Uses arguments $1-$7        # Uses arguments $1-${10}'  
    echo '    #------------------------      #------------------------ '
    echo '    GenerateTeFiles                BuildMDLAomegaConfig'
    echo '    HTARTeFilesFromArchive         GenerateShowerVBFFiles'
    echo '    CheckGeneratedTeFiles          CheckGeneratedShwrVBFFiles'
    echo '    HTARTeFilesToArchive           HTARShowerVBFFilesFromArchive'
    echo '    CheckHTARTeFiles               HTARShowerVBFFilesToArchive'
    echo
    echo '    #------------------------'
    echo '    # VBF files'
    echo '    #  Uses arguments $1-${10}'
    echo '    #------------------------'
    echo '    GenerateZnAzVBFFile'
    echo
    exit
  else
    if [ "$1" = "GenerateTeFiles" ]; then eval $1=enable; return 0; fi;
    if [ "$1" = "HTARTeFilesFromArchive" ]; then eval $1=enable; return 0; fi;
    if [ "$1" = "CheckGeneratedTeFiles" ]; then eval $1=enable; return 0; fi;  
    if [ "$1" = "HTARTeFilesToArchive" ]; then eval $1=enable; return 0; fi;     
    if [ "$1" = "CheckHTARTeFiles" ]; then eval $1=enable; return 0; fi;
    if [ "$1" = "BuildMDLAomegaConfig" ]; then eval $1=enable; return 0; fi;
    if [ "$1" = "GenerateShowerVBFFiles" ]; then eval $1=enable; return 0; fi;         
    if [ "$1" = "CheckGeneratedShwrVBFFiles" ]; then eval $1=enable; return 0; fi;       
    if [ "$1" = "HTARShowerVBFFilesFromArchive" ]; then eval $1=enable; return 0; fi;       
    if [ "$1" = "HTARShowerVBFFilesToArchive" ]; then eval $1=enable; return 0; fi;  
    if [ "$1" = "GenerateZnAzVBFFile" ]; then eval $1=enable; return 0; fi;
    echo ' VAAuto: Invalid Command: '$1
    echo ' VAAuto: Do "./VAAuto ListCommands" for a list of valid commands.'
    exit
  fi
}
###########################################################################

function usage()
{
  echo '***KSAuto.scr: Usage:'
  echo '  $1: Command. Do "KSAuto.scr ListCommands" to see list.'
  echo '  $2 Type spec: Ex: G or P or He4_ or CR or E'
  echo '  $3 Season spec: Winter (ATM21) Summer (ATM22) Ex: W or S'
  echo '  $4 ArraySpec: Whipple, OldArray, NewArray, UpgradeArray. Ex: W, OA, NA or UA'
  echo '  $5 Zn List: Ex: 1,10,20,30,40,50,60,70 or "All"'
  echo '  $6 Az List: Ex: 0,45,90,135,180,225,270,315 or "All"'
  echo '  $7 Threshold Spec (+MoonFilter opt): Ex:  45mv or 50mv or M50mv of M25mv'
  echo '  $8 MDL Spec for VBF files: Ex: MDL10UA or MDL15NA of MDL8OA'
  echo '  $9 Tele-Detector Config(ksAomega*.config): Ex:  ABCD or wxyz'
  echo '  ${10} Data Reference File (in lcl dir): Ex:  63559.root'
  echo
  echo '  Ex: ./kKSAuto.scr GenerateTeFiles G W UA 20 All 45mv MDL10UA WXYZ 64954.root'
  echo
}
###########################################################################

function CheckQsubSubmissions()
#$1  Max HTAR Qsubs active at one time
#$2  Running qsub List File name
{
  #############################################################
  # File RunningQsubListFile is a list of the names of the sgeFile.Done files 
  # that will be generated when the various running .qsub jobs complete.
  # Until the jobs complete the *.Done don't exist.  We count the not existing
  # files. If less than $1 files don't exist  which means the jobs are still 
  # active, we sleep for 60 seconds and try again. When a *.Done is  found to 
  # exist it is removed from the RunningQsubListFile file and this function 
  # returns so a new submission can be made. Other wise the code just sits 
  # here sleeping for 60 sec between checks.
  ################################################################
  RunningQsubListFile=$2   
  RunningQsubListTmp=$2'.tmp'
  if [ ! -e "$RunningQsubListFile" ]; then  #empty (just starting up)
     echo no $RunningQsubListFile
     return
  fi
  if [ -e "$RunningQsubListTmp" ]; then
      rm -v $RunningQsubListTmp
  fi

  #echo $2':'
  #cat $2

  let count=$1
  while test "$count" -ge  $1 
   do
   let count=0
   {
    while read QsublogFile
     do
	if [ -e "$QsublogFile" ]; then
	    rm $QsublogFile
	else
	    count=$((count+1))
            #echo count During: $count
	    echo $QsublogFile >>$RunningQsubListTmp
        fi
     done
   }<$RunningQsubListFile

   if [ -e "$RunningQsubListTmp" ]; then
     cp $RunningQsubListTmp  $RunningQsubListFile
     rm $RunningQsubListTmp
   else
     rm $RunningQsubListTmp
     #echo empty count: $count
   fi
   #echo countAfter: $count

   if [ $count -ge $1 ]; then       #We are full, wait a bit and try again
     sleep 120
   fi
  done
}
####################################################################

function checkRunningJobs()
#$1 Job ID List
#$2 Zn_Az
{
  RunningList=RunningList$2'.dat'
  SingleRunList=singleRunList$2'dat'

  if [ -s $RunningList ]; then
      rm $RunningList
  fi
  {
    while  read jobID;  do
      qstat $jobID &>$SingleRunList
      cat $SingleRunList | grep -v Unknown >>$RunningList
    done
  } <$1

  rm $SingleRunList
  if [ -s  $RunningList ]; then
    rm $RunningList
    return 1
  else
    rm $RunningList
    return 0
  fi
}
###########################################################################

function checkFilesExist()
#$1 FileDir
#$2 TeName
#$3 Particle type
#$4 File Type (TE or VBF)
#$5 EntryStart
#$6 EntryEnd
#$7 Threshold speck (for file type VBF only)
#$8 Alternate Dile Dirt (optional, used for ShowerVBF only)
{
  #echo checkFilesExist:args:1: $1' 2:' $2 ' 3:'$3' 4:' $4' 5:' $5' 6:' $6' 7:' $7
 
  cd $lcl
  FileDir=$1
  TeName=$2
  Particle=$3
  FileType=$4
  EntryStart=$5
  EntryEnd=$6
  Threshold=$7
  FileDirAlt=$8

  #Check we actually got some files (ie made the Directory)
  if [ ! -d $FileDir ]; then
      echo 'KSAuto: Directory '$FileDir' does not exist!'
      if [ -e  "$8" ]; then
	  if [ ! -d $FileDirAlt ]; then
	      echo 'KSAuto: Alternate Directory '$FileDirAlt' does not exist!'
	      echo 'KSAuto: Apparently no ' $4 ' files were generated!'
	      echo 'KSAuto: *************Exiting. Cluster failure?********'
	      exit
	  else
	      FileDir=$FileDirAlt
	  fi
      else
	  echo 'KSAuto: Apparently no ' $4 ' files were generated!'
	  echo 'KSAuto: *************Exiting. Cluster failure?********'
	  exit
     fi
  fi
  
  #Get a list of the files into Check$ZnAz.txt
  CheckListFiles='Check'$ZnAz'.txt'
  echo CheckListFiles: $CheckListFiles

  cd $FileDir
  ls |xargs -n1 >$lcl'/'$CheckListFiles
  cd $lcl

  #checking this list for all files that should be there takes 5 - 10 min
  #thus , to insure we don't over run the 30 min time limit
  #we will have to submit the te file check and sleep until it finishes
  echo 'KSAuto: Checking for all '$FileType' files in: '$FileDir
       
  Result=$CheckListFiles'.Result'
  if [ -e "$Result" ]; then
      rm $Result
  fi
  
  CheckList $CheckListFiles $TeName $Particle $FileType $EntryStart $EntryEnd $Threshold
       
  date
  cd $lcl
  if [ -s $Result ]; then
     cat  $Result
     iFilesNotFound=$(cat $Result | wc -l)
     if [ -n "$ExitOnTeCreationFailure" ]; then
       echo 'KSAuto: Exiting on File check failure'
       echo 'KSAuto: Goodbye'
       exit
     fi
     return 1
  else
     echo 'KSAuto: All files in Directory: '$FileDir' are present!'
     return 0
  fi
}
#############################################################################

function CheckList()

#$1 is list of files to match
#$2 is base name of all files.
#$3 Particle type (P He4 G or E)
#$4 File Type ( TE or VBF)
#$5 EntryStart
#$6 EntryEnd
#$7 Threshold (45mv needed only for FileType= VBF)
{
  #echo CheckkList:Args:1: $1' 2:' $2 ' 3:'$3' 4:' $4' 5:' $5' 6:' $6' 7:' $7
  FileList=$1
  TeName=$2
  Particle=$3
  FileType=$4
  EntryStart=$5
  EntryEnd=$6
  Threshold=$7

  if [ -n "$CheckByPBS" ]; then
    #build a submission .pbs file
    sgeFile=$lcl'/'$TeName'Check'$FileType'.pbs'
    if [ ! -n "$FUSION" ]; then
      echo "#"PBS -q $QUEUE                                        >$sgeFile
    fi
    echo "#"PBS -l walltime=01:00:00                              >>$sgeFile
    echo "#PBS -l " $MEMREQUEST                                   >>$sgeFile
    if [ -n "$EDISON" ]; then
      echo "#"PBS -A mpccc                                        >>$sgeFile
    fi

    if [ -n "$HANSEN" ] || [ -n "$COATES" ] ; then
      echo source /etc/profile                                    >>$sgeFile
      echo module load gcc/4.7.2                                  >>$sgeFile
    fi
    echo cd $lcl                                                  >>$sgeFile
    echo $lcl/KSAutoFileCheck.scr $lcl'/'$FileList $TeName \\     >>$sgeFile
    echo $Particle $FileType $EntryStart $EntryEnd $Threshold     >>$sgeFile
    chmod 700 $sgeFile

    qsub$QSUBEXT -V -e $sgeFile'.err' -o $sgeFile'.log' $sgeFile >$CHECKLOG

    CHECKLOG=$lcl'/'$FileType'Check'$ZnAz'.log'
    CLOG=$FileType'C'$ZnAz'.log'
    cat $CHECKLOG | grep $JobIDHost >$CLOG
    #rm $CHECKLOG
    echo "KSAuto: Running KSAutoFileCheck on PBS: Entries: " $EntryStart "-" $EntryEnd
    echo "KSAuto: Sleeping until CheckFile finishes. "
    runsNotDone=1
    while test $runsNotDone -eq 1 
      do
       sleep 60s
       checkRunningJobs $CLOG $ZnAz
       let runsNotDone=$?
      done
    #rm $CLOG
    #rm $sgeFile
    return
  else
   #Run interactivly
   cd $lcl
   echo "KSAuto: Running KSAutoFileCheck interactivly: Entries: " $EntryStart "-" $EntryEnd

   $lcl/KSAutoFileCheck.scr $lcl'/'$FileList $TeName $Particle $FileType $EntryStart $EntryEnd $Threshold
   return
  fi
} 
#########################################################################

function SubmitHtarToArchive()
{
  #$1 directory that holds directory we want to archive
  #$2 Directory we want to archive
  #$3 filename (Directiory to archive)
  #$4 List of files to look for to determine completion.
  #$5 Max HTAR programs to run at a time

  DestinationDir=$1    #Archive directory
  SourceDir=$2         #Disk Base Directory
  ShwrDir=$3           #filename (Directiory to archive)
  QsubDoneList=$4
  MaxHTARQsubs=$5

  echo DestinationDir: $DestinationDir
  echo SourceDir: $SourceDir
  echo ShwrDir: $ShwrDir

  #################################
  #Wait for romm for next file in queue
  #################################
  
  if [ -n  "$LimitSubmissions" ]; then
    CheckQsubSubmissions  $MaxHTARQsubs  $QsubDoneList 
  fi 

  local=$PWD
  cd $SourceDir 
  pwd
  if [ ! -e "$ShwrDir" ]; then
      echo 'KSAuto: '$SourceDir'/'$ShwrDir' Does not exist. Exiting.'
      cd $local
      exit
  fi
  cd $local


  #build a submission .pbs file
  sgeFile=$ShwrDir'HTAR.pbs'
  sgeDoneFile=$sgeFile'.Done'
  if [ -n  "$LimitSubmissions" ] || [ -e "$sgeDoneFile" ]; then
      rm $sgeDoneFile
  fi


  sgeFile=$lcl'/'$sgeFile
  echo "#"PBS -q $QUEUE                                            >$sgeFile
  echo "#"PBS -l walltime=04:00:00                                >>$sgeFile
  echo "#PBS -l " $MEMREQUEST                                     >>$sgeFile
  if [ -n "$EDISON" ]; then
   echo "#"PBS -A mpccc                                           >>$sgeFile
  fi
  if [ -n "$HANSEN" ] || [ -n "$COATES" ]; then  
    echo source /etc/profile                                      >>$sgeFile
    echo module load gcc/4.7.2                                    >>$sgeFile
  fi
  echo cd $SourceDir                                              >>$sgeFile
  echo htar -cvf  $DestinationDir'/'$ShwrDir'.tar  ./'$ShwrDir    >>$sgeFile
  if [ -n "$LimitSubmissions" ]; then
    echo adding: $sgeDoneFile
    echo $sgeDoneFile >>$QsubDoneList #add the next one
    echo 'echo Done >'$sgeDoneFile                                >>$sgeFile
  fi

  chmod 700 $sgeFile
  HTARLOG=$local'/KSHTAR'$ZnAz'To.log'


  qsub$QSUBEXT -V -e $ShwrDir'HTARTo.pbs.err' -o $ShwrDir'HTARTo.pbs.log' $sgeFile >$HTARLOG

  cd $lcl
}
#########################################################################

function SubmitHtarFromArchive()
{
  #$1 Archive directory where our tar file exists
  #$2 Destination directory where we want to unTar into.
  #$3 name of the Tar file we want to untar(without .tar extention).
  #$4 List of files to look for to determine completion.
  #$5 Max HTAR programs to run at a time

  local=$PWD

  ArchiveDir=$1          #Archive direxctory
  DestinationDir=$2      #Base Disk directory
  Source=$3              #Base Tar file name
  SourceTarFile=$3'.tar'
  QsubDoneList=$4
  MaxHTARQsubs=$5

  echo 'Src: '$ArchiveDir'/'$SourceTarFile 

  #################################
  #Wait for romm for next file in queue
  #################################
  
  if [ -n  "$LimitSubmissions" ]; then
    CheckQsubSubmissions  $MaxHTARQsubs  $QsubDoneList 
  fi 

  #build a submission .pbs file
  sgeFile=$Source'From.pbs'
  sgeDoneFile=$sgeFile'.Done'
  if [ -n  "$LimitSubmissions" ] || [ -e "$sgeDoneFile" ]; then
      rm $sgeDoneFile
  fi
  
  sgeFile=$lcl'/'$sgeFile
  echo "#"PBS -q $QUEUE                                     >$sgeFile
  echo "#"PBS -l walltime=04:00:00                         >>$sgeFile
  echo "#PBS -l " $MEMREQUEST                              >>$sgeFile
  if [ -n "$EDISON" ]; then
   echo "#"PBS -A mpccc                                    >>$sgeFile
  fi
  if [ -n "$HANSEN" ] || [ -n "$COATES" ]; then
    echo source /etc/profile                               >>$sgeFile
    echo module load gcc/4.7.2                             >>$sgeFile
  fi
  echo cd $DestinationDir                                  >>$sgeFile
#  echo htar -xvf  $ArchiveDir'/'$SourceTarFile ./  \\     >>$sgeFile
  echo htar -xvf  $ArchiveDir'/'$SourceTarFile   \\        >>$sgeFile
  echo '>'$local'/'$Source'.log'                           >>$sgeFile
  if [ -n "$LimitSubmissions" ]; then
    echo adding: $sgeDoneFile
    echo $sgeDoneFile >>$QsubDoneList #add the next one
    echo 'echo Done >'$sgeDoneFile                         >>$sgeFile
  fi

  chmod 700 $sgeFile
  HTARLOG=$local'/KSHTAR'$ZnAz'From.log'
  qsub$QSUBEXT -V -e $Source'HTARFrom.pbs.err' -o $Source'HTARFrom.pbs.log' $sgeFile >$HTARLOG

  cd $lcl
}
##########################################################################

function SubmitQsubJobs()
#################################################
#$1  List of .qsub jobs to submit
#$2  file with all the names of the *.qsub.Done files the submitted jobs will 
#    write when they finish
#$3  Maximum jobs to have running or waiting to run in the queue
# Due to differences in memory requirments for Te and ShowerrVBF jobs we also
# use the defined string MEMREQUEST. If exists is uaually has a value like
#  MEMREQUEST=' -l pvmem=30GB '
{
  QsubList=$1
  QsubDoneList=$2
  MaxQsubs=$3

  if [ -e "$QsubDoneList" ]; then
    rm $QsubDoneList
  fi

  {
    while read sgeFileFull
      do
        CheckQsubSubmissions  $MaxQsubs $QsubDoneList 
                                     #Gets here when we can submit the next job
        sgeFile=${sgeFileFull##*/}
        echo $sgeFile
        sgeDoneFile=$sgeFileFull'.Done'
        if [ -e "$sgeDoneFile" ]; then
          rm $sgeDoneFile
        fi
        echo adding: $sgeDoneFile
	echo $sgeDoneFile >>$QsubDoneList #add the next one
       
       qsub$QSUBEXT -V $MEMREQUEST -e $sgeFile'.err' -o $sgeFile'.log' $sgeFileFull 
       #For Hansen pause between submissions
       if [ -n "$HANSEN" ] ; then
         sleep 10
       fi
      done
   }<$QsubList
}
###########################################################################


############################################################################
# Main
############################################################################
if [ ! -n "$1" ]; then
  usage
  exit
fi

commandEnable $1   #This will enable the specified command or exit if its not a 
                   #known command.


SPECPART=$2
SPECSEA=$3
SPECCFG=$4
SPECZN=$5
SPECAZ=$6
SPECTHR=$7
SPECMDL=$8
ARRAYCONFIG=$9
REFDATAFILE=${10}



lcl=$PWD
source /etc/profile

host=$(hostname)
echo host: $host

hostString=${host:0:6}
if test  "$hostString" = "cvrsvc"  #Are we running on Carver
then
  CARVER=enabled
  VDirBase=$SCRATCH'/simulations/veritas/'
  JobIDHost='cvrsvc'
  QUEUE=serial
  echo '***Carver Cluster***'
  if [ -n "$LimitSubmissions" ]; then
    let MaxQsubs=$MaxQsubsDefault
#    let MaxQsubs=750
    let MaxHTARQsubs=9
  fi
fi

hostString=${host:0:6}
if test  "$hostString" = "edison"  #Are we running on Edison
then
  EDISON=enabled
  VDirBase=$SCRATCH'/simulations/veritas/'
  JobIDHost='edison'
  QUEUE=serial
  QSUBEXT='.serial'
  echo '***Edison Cluster***'
  if [ -n "$LimitSubmissions" ]; then
    let MaxQsubs=$MaxQsubsDefault
    let MaxHTARQsubs=9
  fi
fi

hostString=${host:0:6}
if test  "$hostString" = "hansen"  #Are we running on Hansen
then
  HANSEN=enabled
  VDirBase=$SCRATCH'/simulations/veritas/'
  JobIDHost='hansen-adm'
  #QUEUE=physics
  QUEUE=standby
  echo ***Hansen Cluster***
  if [ -n "$LimitSubmissions" ]; then
     #let MaxQsubs=150
     let MaxQsubs=$MaxQsubsDefault
     let MaxHTARQsubs=9  
  fi
fi

hostString=${host:0:6}
if test  "$hostString" = "coates"  #Are we running on coates
 then
  COATES=enabled
  VDirBase=$SCRATCH'/simulations/veritas/'
  JobIDHost='coates-adm'
  #QUEUE=physics
  QUEUE=standby
  echo ***Coates Cluster***
  if [ -n "$LimitSubmissions" ]; then
     #let MaxQsubs=150
     let MaxQsubs=$MaxQsubsDefault
     let MaxHTARQsubs=9  
  fi
fi

hostString=${host:0:6}
if test  "$hostString" = "flogin"  #Are we running on ANL fusion?
 then                               
  ##############################################################
  # Fusion has no Archive so none of the HTAR using options are viable  
  ############################################################## 
  echo ***ANL Fusion Cluster***
  if [ -n "$HTARTeFilesFromArchive" ] || [ -n "$HTARTeFilesToArchive" ]  || [ -n "$CheckHTARTeFiles" ]  || [ -n "$HTARShowerVBFFilesFromArchiv" ]e  || [ -n "$HTARShowerVBFFilesToArchive" ]; then
    echo KSAuto: Fatal-Fusion has no Archive so none of the HTAR using options are viable
    exit
  fi
  FUSION=enabled
  VDirBase=$SCRATCH'/simulations/veritas/'
  JobIDHost='fmgt2'
  #No queue specification necessary for Fusion. It figures it out.
  if [ -n "$LimitSubmissions" ]; then
     let MaxQsubs=$MaxQsubsDefault
     #No Archive for fusion.
  fi
fi



if [ -n "$LimitSubmissions" ]; then
 echo "KSAuto: Overall qsub active submissions being limited to "$MaxQsubs 
 echo "KSAuto: Overall HTAR active submissions being limited to "$MaxHTARQsubs
fi

#######################################################################

TELESPEC=$SPECCFG

if [ "$TELESPEC" = "W" ]; then   #Whipple telescope (not really implimented, 
   PMT="W"                       #place holder)
   DirPSF=V190
   TELCONFIG=W
fi
if [ "TELESPEC" = "OA" ]; then  #Old Veritas Array (Before T1 move, Old PMTs,
   PMT="O"                      #with old V330 PSF)
   TELCONFIG=O
   DirPSF=V330
fi
if [ "$TELESPEC" = "NA" ]; then  #New Veritas Array (after T1 move, Old PMTs,
   PMT="V"                      #with new  V190 PSF)
   DirPSF=V190
   TELCONFIG=N
fi
if [ "$TELESPEC" = "UA" ]; then #Upgrade Veritas Array (after T1 move, New PMTs,
   PMT="U"                     #with new  V190 PSF)
   DirPSF=V190
   TELCONFIG=U
fi

Threshold=$SPECTHR
MoonFilterSpec=${Threshold:0:1}  #Get leading M if there is one

if [ "$MoonFilterSpec" = "M" ];then    #Moon filter else $MOON is blank.
   MOON=M
   Threshold=${Threshold:1}      #Strip off the M
fi

#Check if this is for 2D offsets, blank if not
if [ "$SPECPART" = "G" ] || [ "$SPECPART" = "E" ]; then
 WblFilterSpec="2D"
 EnergyStart=$EntryGEStart
 EnergyEnd=$EntryGEEnd
fi
if [ "$SPECPART" = "P" ]; then 
 EnergyStart=$EntryPStart     #CR hadled seperatly in GenerateTE
 EnergyEnd=$EntryPEnd
fi
if  [ "$SPECPART" = "He4_" ]; then
 EnergyStart=$EntryHe4Start     #CR hadled seperatly in GenerateTE
 EnergyEnd=$EntryHe4End
fi


WblFilterSpec=$WblFilterSpec$MOON    #Add the M if needed or all could even be blank

#To find the Zn amd AZ combinations first put $SPECZN and $SPECAZ into arrays
#This is tricky. We save away the present Internal Filed Seperator and then
# set IFS to a comma. We then use the -a option with the read command to 
# read in our stings into arrays. Then we restore the IFS.

SAVEIFS=$IFS
IFS=, read -a Zenith <<< "$SPECZN"

if [ $SPECAZ = "All" ]; then
  Azimuth=([0]=0 45 90 135 180 225 270 315)
else  
  IFS=, read -a Azimuth <<< "$SPECAZ"
fi

IFS=$SAVEIFS



if [ ! -e "$lcl/KSAutoFileCheck.scr" ]; then
  cp -v $KASCADEBASE'/scripts/KSAutoFileCheck.scr' $lcl
fi

if [ -n "$LimitSubmissions" ]; then
  QsubLogs='Running'$SPECSEA$PMT$SPECPART$'KASCADEQsubLogs.txt'
  QsubHTARLogs=Running'HTARLogs.txt'
  if [ -n "$GenerateTeFiles" ] || [ -n "$GenerateShowerVBFFiles" ]; then
    QsubFileNameList='KS'$SPECSEA$PMT$SPECPART$'AutoqsubList'
    echo QsubFileNameList: $QsubFileNameList
    if [ -e "$QsubFileNameList" ]; then
	rm $QsubFileNameList
    fi
    if [ -e "$QsubLogs" ]; then
      rm $QsubLogs                     #Just some cleanup if previous run died.
    fi
  else
    if [ -e "$QsubHTARLogs" ]; then
      rm $QsubHTARLogs                #Just some cleanup if previous run died.
    fi
  fi
fi



#########################################################################
#now we loop

#Zenith
let izn=0
let iznEnd=${#Zenith[@]}
let iFilesNotFound=0
while test $izn -lt $iznEnd
  do

   #Iterate through Azimuth
   let kaz=0
   let kazEnd=${#Azimuth[@]}
   while test $kaz -lt $kazEnd
    do
     #Make   Zn_Az string
     if test ${Azimuth[$kaz]} = "0"
      then
       ZnAz=${Zenith[$izn]}'Deg'
     else
       ZnAz=${Zenith[$izn]}'_'${Azimuth[$kaz]}'Deg'
     fi
# *****************************************************************************
#  Now all the things we can do for a particular Zn_AZ
# *****************************************************************************
     #make up our ksProduction designation
     ksProdSpec=$SPECSEA$PMT$SPECPART$ZnAz$WblFilterSpec$Threshold'1234M2'
  
     if [ -n "$GenerateTeFiles" ]; then
       echo '##########################################################'
       echo '# GenerateTeFiles '
       echo '##########################################################'

       cd $lcl
       date

       Sort='Sort'

       ####################################################################
       #Make sure ksallVBF.scr is set up correctly to generate Te files
       ####################################################################
       cp $KASCADEBASE/scripts/ksallVBF.scr ksallVBF$ZnAz'.scr'
       sed '/#KascadeEnable=enable/s/#Kascade/Kascade/g' \
                                                  <ksallVBF$ZnAz'.scr' >tmp1
       sed '/#LightEnable=enable/s/#Light/Light/g'               <tmp1 >tmp2
       sed '/#PeSortMergeEnable=enable/s/#PeSort/PeSort/g'       <tmp2 >tmp1
       sed '/#TriggerEnable=enable/s/#Trigger/Trigger/g'         <tmp1 >tmp2
       sed '/AomegaEnable=enable/s/Aomega/#Aomega/g'             <tmp2 >tmp1
       sed '/ArrayTrigEnable=enable/s/Array/#Array/g'            <tmp1 >tmp2
       sed '/#Production=enable/s/#Production/Production/g'      <tmp2 >tmp1
       echo TELESPEC: $TELESPEC
       if [ "$TELESPEC" = "OA" ]; then
         echo Using OldArray tel positions
         sed '/Fall09ArrayPositions=enable/s/Fall/#Fall/g' <tmp1 >tmp2
       else
        echo Using NewArray tel Positions
	sed '/#Fall09ArrayPositions=enable/s/#Fall/Fall/g' <tmp1 >tmp2
       fi
       sed '/#RemoveSingleVBFEnable=enable/s/#Remove/Remove/g'   <tmp2 >tmp1
       sed '/#CleanupEnable=enable/s/#Cleanup/Cleanup/g'         <tmp1 >tmp2
       sed '/#DebugPrintEnable=enable/s/#Debug/Debug/g'          <tmp2 >tmp1
       sed '/#VBFOutputToDetectorSpecDir=enable/s/#VBF/VBF/g'    <tmp1 >ksallVBF$ZnAz'.scr'
       rm tmp1
       rm tmp2
       ####################################################################

       echo "KSAuto: Submitting ksProduction for " $ksProdSpec" Energy entries "$EnergyStart" to "$EnergyEnd
 
       echo "KSAuto: This submission takes a few minuts"

       if [ -n LimitSubmissions ]; then     #We submit max number of jobs and 
                                            #wait until to submit more in our 
                                            #list
	   if [ -e $QsubFileNameList ]; then
	      rm $QsubFileNameList
           fi
           if [ -n "$EDISON" ]; then
	     MEMREQUEST=' -l vmem=8GB '
	     echo 'KSAuto: For Edison use #PBS '$MEMREQUEST
           fi
           if [ -n "$CARVER" ]; then
	     #MEMREQUEST=' -l pvmem=30GB '
	     MEMREQUEST=' -l pvmem=8GB '
	     echo 'KSAuto: For Carver use #PBS '$MEMREQUEST
           fi


	   if [ "$SPECPART" = "CR" ]; then
		./ksProduction.scr $ksProdSpec ksallVBF$ZnAz'.scr' $Sort $QsubFileNameList $EntryPStart $EntryPEnd $EntryHe4Start $EntryHe4End

	   else
                ./ksProduction.scr $ksProdSpec ksallVBF$ZnAz'.scr' $Sort $QsubFileNameList $EnergyStart $EnergyEnd
                                  #Above will fill the list file 
                                  # $QsubFileNameList with the names of the 
                                  # .qsub files to run(but it won't run them)
                                  #Below will run them with a max of $MaxQsubs
                                  # in the queue at one time, submitting more 
                                  # as it can
           fi
          
           SubmitQsubJobs  $QsubFileNameList $QsubLogs $MaxQsubs
       
       else
           ./ksProduction.scr $ksProdSpec ksallVBF$ZnAz'.scr'
       fi
     fi
     #######################################################################
 
     TeName=$SPECSEA$PMT$SPECPART$ZnAz$WblFilterSpec
     if [ "$SPECPART" = "G" ] ; then
           ParticleDir='gammas'
     fi
     if [ "$SPECPART" = "E" ] ; then
           ParticleDir='electrons'
     fi
     if [ "$SPECPART" = "P" ] ; then
           ParticleDir='protons'
     fi
     if [ "$SPECPART" = "He4_" ] ; then
           ParticleDir='he4'
     fi
     
     if [ "$SPECPART" = "CR" ] ; then
       PSFDirP=$VDirBase'/protons/'$DirPSF 
       PSFDirHe4=$VDirBase'/he4/'$DirPSF 
       PSFDir=$PSFDirP
       TeNameP=$SPECSEA$PMT'P'$ZnAz$WblFilterSpec
       TeNameHe4=$SPECSEA$PMT'He4_'$ZnAz$WblFilterSpec
       TeName=$TeNameP

       ShowerVBFProtonDir=$TeNameP$Threshold'1234M2'$SPECSEA$ARRAYCONFIG
       ShowerVBFProtonDirAlt=$TeNameP$Threshold'1234M2'$SPECSEA$SPECMDL
       ShowerPDir=$VDirBase'/protons/'$ShowerVBFProtonDir
       ShowerPDirAlt=$VDirBase'/protons/'$ShowerVBFProtonDirAlt

       ShowerVBFHe4Dir=$TeNameHe4$Threshold'1234M2'$SPECSEA$ARRAYCONFIG
       ShowerVBFHe4DirAlt=$TeNameHe4$Threshold'1234M2'$SPECSEA$SPECMDL
       ShowerHe4Dir=$VDirBase'/he4/'$ShowerVBFHe4Dir
       ShowerHe4DirAlt=$VDirBase'/he4/'$ShowerVBFHe4DirAlt

     else
       PSFDir=$VDirBase'/'$ParticleDir'/'$DirPSF
       TeName=$SPECSEA$PMT$SPECPART$ZnAz$WblFilterSpec
       ShowerVBFDir=$TeName$Threshold'1234M2'$SPECSEA$ARRAYCONFIG
       ShowerVBFDirAlt=$TeName$Threshold'1234M2'$SPECSEA$SPECMDL
       ShowerDir=$VDirBase'/'$ParticleDir'/'$ShowerVBFDir
       ShowerDirAlt=$VDirBase'/'$ParticleDir'/'$ShowerVBFDirAlt
     fi
   
     if [ -n "$HANSEN" ] || [ -n "$COATES" ] ; then
         HtarDir="/archive/fortress/group/veritas/simulations/"
     fi     
     if [ -n "$EDISON" ] || [ -n "$CARVER" ] ; then
         HtarDir='/home/u/u15013/'$SPECMDL'/'
     fi     
 

     if [ -n "$HTARTeFilesFromArchive" ]; then
       echo '##########################################################'
       echo '# HTARTeFilesFromArchive'
       echo '##########################################################'
       #In order to not have this task (KSAuto.scr) be killed because it
       #runs too long, we have to submit this htar command to the cluster.
       ###############################################################
       # Since the if QsubHTARLogs $MaxHTARQsubs variable are not defined 
       #(ie are blank)  if LimitSubmissions is not enabled we really don't 
       # need the following test but it does make things clearer
       ################################################################
       if [ -n "$LimitSubmissions" ]; then

	 SubmitHtarFromArchive $HtarDir'/'$SPECSEA$TELCONFIG$SPECPART$WblFilterSpec'TE/' $PSFDir $TeName $QsubHTARLogs $MaxHTARQsubs

       else
         SubmitHtarFromArchive $HtarDir'/'$SPECSEA$TELCONFIG$SPECPART$WblFilterSpec'TE/' $PSFDir $TeName 
       fi
     fi
     #####################################################################

     if [ -n "$CheckGeneratedTeFiles" ]; then
       echo '##########################################################'
       echo '# CheckGeneratedTeFiles '
       echo '##########################################################'

       cd $lcl
       date

       if [ "$SPECPART" = "CR" ] ; then
         checkFilesExist $PSFDirP'/'$TeNameP $TeNameP 'P' 'TE' $EntryPStart $EntryPEnd $Threshold
         PFilesMissing=$?
         if [ "$PFilesMissing" -ne "1" ]; then
            echo 'KSAuto: All Required Te files present in '$TeNameP' directory'
         fi

         checkFilesExist $PSFDirHe4'/'$TeNameHe4 $TeNameHe4 'He4_' 'TE' $EntryHe4Start $EntryHe4End $Threshold
         He4FilesMissing=$?
         if [ "$He4FilesMissing" -ne "1" ]; then
            echo 'KSAuto: All  Required Te files present in '$TeNameHe4' directory'
         fi

	 if [ "$PFilesMissing" -eq "1" ] || [ "$He4FilesMissing" -eq "1" ]; 
         then
	    FilesMissing=1
         fi
       else
         checkFilesExist $PSFDir'/'$TeName $TeName $SPECPART 'TE' $EntryGEStart $EntryGEEnd $Threshold
         FilesMissing=$?
         if [ "$FilesMissing" -ne "1" ]; then
            echo 'KSAuto: All  Required Te files present in '$TeName' directory'
         fi
       fi

       if [ "$FilesMissing" -eq "1" ]; then
         echo 'KSAuto: '$iFilesNotFound' files not created.'
         if [ -n "$ExitOnTeCreationFailure" ]; then
           echo 'KSAuto: *************Missing files***********'
           echo 'KSAuto: Exiting on File check failure'
           echo 'KSAuto: Goodbye'
           cd $lcl
	   exit
         fi
       fi
     fi
   #########################################################################

     if [ -n "$HTARTeFilesToArchive" ]; then
       echo '##########################################################'
       echo '# HTARTeFilesToArchive'
       echo '##########################################################'
       cd $lcl
       date

       #In order to not have this task (KSAuto.scr) be killed because it
       #runs too long, we have to submit this htar command to the cluster.
       ###############################################################
       # Since the if QsubHTARLogs $MaxHTARQsubs variable are not defined 
       #(ie are blank)  if LimitSubmissions is not enabled we really don't 
       # need the following test but it does make things clearer
       ################################################################
       if [ -n "$LimitSubmissions" ]; then

         #SubmitHtarToArchive $HtarDir'/'$SPECSEA$PMT$SPECPART$WblFilterSpec'TE/' $PSFDir $TeName $QsubHTARLogs $MaxHTARQsubs
         SubmitHtarToArchive $HtarDir'/'$SPECSEA$TELCONFIG$SPECPART$WblFilterSpec'TE/' $PSFDir $TeName $QsubHTARLogs $MaxHTARQsubs

       else 
#         SubmitHtarToArchive $HtarDir'/'$SPECSEA$PMT$SPECPART$WblFilterSpec'TE/' $PSFDir $TeName 
         SubmitHtarToArchive $HtarDir'/'$SPECSEA$TELCONFIG$SPECPART$WblFilterSpec'TE/' $PSFDir $TeName 
       fi

     fi
     #########################################################################


     if [ -n "$CheckHTARTeFiles" ]; then
       echo '##########################################################'
       echo '# CheckHTARTeFiles '
       echo '##########################################################'
       cd $lcl
       date
       ###############################################
       #Only good for gammas and electrons
       ########################################

       #Get a list of the files into CheckTe.txt
       TEDIR=$HtarDir$TeName'.tar'
       echo 'KSAuto: Get listing of htar file: '$TEDIR
       TeFileList=TeFileList$ZnAz
       htar -tf $TEDIR >$TeFileList

       #go through this file and edit the names so that only the filename 
       #part remains
       CheckTeFile=CheckTeHTAR$ZnAz'.txt'
       rm $CheckTeFile
    
       #echo 'Make file CheckTe.txt with only file names'
       {
         while read string
           do
             HtarFileName=${string##*/}
             # make sure its a filename
             if [ "${HtarFileName%%GeV*}" = "$TeName" ]; then
               echo $HtarFileName >>$CheckTeFile
             fi   
           done
        }<$TeFileList
       #checking this list for all files that should be there takes 5 - 10 min
       #thus , to insure we don't over run the 30 min time limit
       #we will have to submit the te file check and sleep until it finishes
       echo 'KSAuto: Checking for all te files in: '$TEDIR
       
       CheckList $CheckTeFile $TeName $SPECPART $EntryGEStart $EntryGEEnd
       
       date
       cd $lcl
       if [ -s $CheckTeFile'.Result' ]; then
         cat  $CheckTeFile'.Result'
         if [ -n "$ExitOnTeCreationFailure" ]; then
           echo 'KSAuto: ***Exiting on File check failure***'
           echo 'KSAuto: Goodbye'
	   exit
         fi
       else
         echo 'KSAuto: All files present in htar file '$TEDIR
       fi
     fi
     ######################################################################

     if [ -n "$BuildMDLAomegaConfig" ]; then
	 echo '##########################################################'
	 echo '# BuildMDLAomegaConfig '
	 echo '##########################################################'
	 echo 'KSAuto: Generating ksAomega config files from '$SPECMDL'.dat'

	 cd $KASCADEBASE/inputs
	 rm -f tmp1
         rm -f tmp2
         rm -f Base.config

	 tConfig=$ARRAYCONFIG
	 T1=${tConfig:0:1}
	 T2=${tConfig:1:1}
	 T3=${tConfig:2:1}
	 T4=${tConfig:3:1}
	 ../bin/ksAomega -save_config_and_exit=Base.config

         ##############################################################
         # now update each file with sed commands
         ##############################################################
 
         ################################################################
         #Read in the $SPECMDL.txt file and set params
         ################################################################
         echo 'KSAuto: Setting ksAomega'$TELCONFIG$Threshold'('$ARRAYCONFIG').config files to '$SPECMDL'.dat values'

	 PFile=$lcl'/../simulations/veritas/'$REFDATAFILE
 
	 {
	     while read tel threshold noise eff gain 
	       do
	sed '/DiscriminatorThreshold/s/10/'$threshold'/g' <Base.config  >tmp1
	       sed '/NoiseRate/s/12.5/'$noise'/g'                <tmp1  >tmp2
	       sed '/Efficiency/s/1/'$eff'/g'                    <tmp2 >tmp1
	       sed '/DigitalCountsPerPE/s/4.2/'$gain'/g'         <tmp1 >tmp2
	       sed '/Telescope "T1"/s/T1/'$tel'/g'               <tmp2 >tmp1
	       sed '/PixelStatsFileName " "/s:" ":"'$PFile'":g'  <tmp1 >tmp2
	       sed '/LightConeConcentration/s/0.35/0.45/g'       <tmp2 >tmp1
	       sed '/BadPixelSupression/s/ON/OFF/g'              <tmp1 >tmp2
	       if [ "$PMT" = "U" ]; then
		   sed '/SinglePeRiseTimeNS/s/0/1.7/g'           <tmp2 >tmp1
		   sed '/SinglePeFallTimeNS/s/0/4.75/g'          <tmp1 >tmp2
	       else
		   sed '/SinglePeRiseTimeNS/s/0/3.2/g'           <tmp2 >tmp1
		   sed '/SinglePeFallTimeNS/s/0/8.5/g'           <tmp1 >tmp2
	       fi
	       sed '5 a \#This is special for tel '$tel'.'<tmp2 >$tel'.config'
	     done
	     }<$lcl'/'$SPECMDL".dat"

	 mv  -f T1.config ksAomega$TELCONFIG$Threshold$T1'.config'
	 mv  -f T2.config ksAomega$TELCONFIG$Threshold$T2'.config'
	 mv  -f T3.config ksAomega$TELCONFIG$Threshold$T3'.config'
	 mv  -f T4.config ksAomega$TELCONFIG$Threshold$T4'.config'
	 rm tmp1
         rm tmp2
         rm Base.config
	 cd $lcl
     fi

     #########################################################################
     if [ -n "$GenerateShowerVBFFiles" ]; then
       echo '##########################################################'
       echo '# GenerateShowerVBFFiles '
       echo '##########################################################'

       cd $lcl'/../simulations/veritas/'
       date
       if [ -n "$Cleanup" ]; then
         echo '##########################################################'
         echo '# GenerateShowerVBFFiles:Cleanup '
         echo '##########################################################'
         echo 'KSAuto:  Removing *.err,*.pbs and moving k*.log to ./log/' 
         rm *.err
         rm *.pbs
         mv *.log ./log/

       	 #Following reduces file count so we don't exceed our file number quota
         DATE=$(date +%F.%H.%M.%S)
         LogFile='simulationVeritasLogDir'$DATE.tar
         tar -cvf $LogFile ./log/* >'simulationVeritasLogDir'$DATE.log
         rm ./log/*
       fi

       cd $lcl'/../simulations/veritas/'

       ####################################################################
       #Make sure ksallVBF.scr is set up correctly to generate VBF shower files
       ####################################################################
       cp $KASCADEBASE/scripts/ksallVBF.scr ksallVBF$ZnAz'.scr'
       sed '/KascadeEnable=enable/s/Kascade/#Kascade/g' \
                                                <ksallVBF$ZnAz'.scr' >tmp1
       sed '/LightEnable=enable/s/Light/#Light/g'                <tmp1 >tmp2
       sed '/PeSortMergeEnable=enable/s/PeSort/#PeSort/g'        <tmp2 >tmp1
       sed '/TriggerEnable=enable/s/Trigger/#Trigger/g'          <tmp1 >tmp2
       sed '/#AomegaEnable=enable/s/#Aomega/Aomega/g'            <tmp2 >tmp1
       sed '/#ArrayTrigEnable=enable/s/#Array/Array/g'           <tmp1 >tmp2
       sed '/#Production=enable/s/#Production/Production/g'      <tmp2 >tmp1
       echo TELESPEC: $TELESPEC
       if [ "$TELESPEC" = "OA" ]; then
	 echo using OldArray tell positions
         sed '/Fall09ArrayPositions=enable/s/Fall/#Fall/g'  <tmp1 >tmp2
       else
	 echo Using NewArray tel positions
         sed '/#Fall09ArrayPositions=enable/s/#Fall/Fall/g' <tmp1 >tmp2
       fi
       sed '/#RemoveSingleVBFEnable=enable/s/#Remove/Remove/g'   <tmp2 >tmp1
       sed '/#CleanupEnable=enable/s/#Cleanup/Cleanup/g'         <tmp1 >tmp2
       sed '/#DebugPrintEnable=enable/s/#Debug/Debug/g'          <tmp2 >tmp1
       sed '/#VBFOutputToDetectorSpecDir=enable/s/#VBF/VBF/g'    <tmp1 >ksallVBF$ZnAz'.scr'
       rm tmp1
       rm tmp2
       ####################################################################
       echo "KSAuto: Submitting ksProduction with Energy entries "$EnergyStart" to "$EnergyEnd
       echo 'KSAuto: Process ksAomega*.config: ' $ARRAYCONFIG ' through ksAomega and ksArrayTrig'
       date
       
       NoSort='NoSort'

       #make up our ksProduction designation
       Spec=$ksProdSpec$ARRAYCONFIG

       if [ -n LimitSubmissions ]; then     #We submit max number of jobs and 
                                            #wait until to submit more in our 
                                            #list
	 if [ -e $QsubFileNameList ]; then
	    rm $QsubFileNameList
         fi
         if [ -n "$EDISON" ]; then
	   MEMREQUEST=' -l vmem=8GB '
	   echo 'KSAuto: For EDISON use #PBS '$MEMREQUEST
         fi
         if [ -n "$CARVER" ]; then
	   MEMREQUEST=' -l pvmem=8GB '
	   echo 'KSAuto: For Carver use #PBS '$MEMREQUEST
         fi
	 ./ksProduction.scr $Spec ksallVBF$ZnAz'.scr' $NoSort $QsubFileNameList $EnergyStart $EnergyEnd
                                  #Above will fill the list file 
                                  # $QsubFileNameList with the names of the 
                                  # .qsub files to run(but it won't run them)
                                  #Below will run them with a max of $MaxQsubs
                                  # in the queue at one time, submitting more 
                                  # as it can
          SubmitQsubJobs  $QsubFileNameList $QsubLogs $MaxQsubs
       else
          ./ksProduction.scr  $Spec ksallVBF$ZnAz'.scr' 
       fi
       echo "KSAuto: VBF shower file generation complete"
       cd $lcl
     fi
     #######################################################################



     if [ -n "$CheckGeneratedShwrVBFFiles" ]; then
       echo '##########################################################'
       echo '# CheckGeneratedShwrVBFFiles '
       echo '##########################################################'

       cd $lcl
       date


       if [ "$SPECPART" = "CR" ] ; then
         checkFilesExist $ShowerPDir  $TeNameP 'P' 'VBF' $EntryPStart $EntryPEnd $Threshold ShowerPDirAlt
         PFilesMissing=$?
         if [ "$PFilesMissing" -ne "1" ]; then
            echo 'KSAuto: All Required Shower VBF files present in '$TeNameP' directory'
         fi

         checkFilesExist $ShowerHe4Dir $TeNameHe4 'He4_' 'VBF' $EntryHe4Start $EntryHe4End $Threshold ShowerHe4DirAlt
         He4FilesMissing=$?
         if [ "$He4FilesMissing" -ne "1" ]; then
            echo 'KSAuto: All Required Shower VBF files present in '$TeNameHe4' directory'
         fi

	 if [ "$PFilesMissing" -eq "1" ] || [ "$He4FilesMissing" -eq "1" ]; 
         then
	    FilesMissing=1
         fi
       else
         checkFilesExist $ShowerDir $TeName $SPECPART 'VBF' $EntryGEStart $EntryGEEnd $Threshold $ShowerDirAlt
         FilesMissing=$?
         if [ "$FilesMissing" -ne "1" ]; then
            echo 'KSAuto: All Required '$FileType' files present in '$ShowerDir
         fi
       fi

       if [ "$FilesMissing" = "1" ]; then
         echo 'KSAuto: '$iFilesNotFound' files not created.'
         if [ -n "$ExitOnTeCreationFailure" ]; then
           echo 'KSAuto: *************Missing files***********'
           echo 'KSAuto: Exiting on File check failure'
           echo 'KSAuto: Goodbye'
           cd $lcl
	   exit
         fi
       fi
     fi
     #########################################################################


     if [ -n "$HTARShowerVBFFilesFromArchive" ]; then
       echo '##########################################################'
       echo '# HTARShowerVBFFilesFromArchive'
       echo '##########################################################'
         #In order to not have this task (KSAuto.scr) be killed because it
         #runs too long, we have to submit this htar command to the cluster.
   
       cd $lcl'/../simulations/veritas/'
       date
       ###############################################################
       # Note that the QsubHTARLogs and MaxHTARQsubs variables are not defined 
       #(ie are blank) if LimitSubmissions is not enabled
       ################################################################
       if [ "$SPECPART" = "CR" ] ; then
	SubmitHtarFromArchive $HtarDir'/'$SPECSEA$TELCONFIG$SPECPART$SPECMDL'VBFShowers/' $VDirBase'/protons/' $ShowerVBFProtonsDir   $QsubHTARLogs $MaxHTARQsubs
         echo "KSAuto: htar " $ShowerVBFProtonsDir" to archive complete."
	 SubmitHtarFromArchive $HtarDir'/'$SPECSEA$TELCONFIG$SPECPART$SPECMDL'VBFShowers/' $VDirBase'/he4/' $ShowerVBFHe4Dir  $QsubHTARLogs $MaxHTARQsubs
         echo "KSAuto: htar "$ShowerVBFHe4Dir" to archive complete."
       else
	ShowerMDLDir=$SPECSEA$TELCONFIG$SPECPART$ZnAz$WblFilterSpec$Threshold'1234M2'$SPECSEA$SPECMDL

        SubmitHtarFromArchive $HtarDir'/'$SPECSEA$TELCONFIG$SPECPART$SPECMDL'VBFShowers/' $VDirBase'/'$ParticleDir'/' $ShowerMDLDir $QsubHTARLogs $MaxHTARQsubs
       fi
    fi
     #########################################################################
  #$1 Archive directory wqhere our tar file exists
  #$2 name of the Tar file we want to untar(without .tar extention).
  #$3 Destination directory where we want to unTar into.


     #Following only works for G so far!
     if [ -n "$GenerateZnAzVBFFile" ]; then
       echo '##########################################################'
       echo '# GenerateZnAzVBFFile '
       echo '##########################################################'
       SVDir=$lcl'/../simulations/veritas/'
       cd $SVDir
       ProcessAll=$SPECPART'ProcessAll'
       if [ ! -e "$ProcessAll" ]; then
	   cp -v $KASCADEBASE'/scripts/'$ProcessAll .
       fi
 

       if [ "$SPECPART" = "CR" ] ; then
         #echo"CRProcessAll not working with KSAuto yet"
	 #exit
	  $SVDir'/'$ProcessAll $DirPSF $ZnAz $Threshold $SPECSEA$PMT $SPECMDL $ARRAYCONFIG >$ProcessAll$ZnAz'.log'
       fi

       if [ "$SPECPART" = "G" ] || [ "$SPECPART" = "E" ] ; then
         $SVDir'/'$ProcessAll $DirPSF $ZnAz $Threshold $SPECSEA$PMT $SPECMDL $ARRAYCONFIG >$ProcessAll$ZnAz'.log'
       fi
       date

       echo "KSAuto: "$ProcessAll" VBF file generation complete"
      fi
     ########################################################################


     if [ -n "$HTARShowerVBFFilesToArchive" ]; then
       echo '##########################################################'
       echo '# HTARShowerVBFFilesToArchive'
       echo '##########################################################'
         #In order to not have this task (KSAuto.scr) be killed because it
         #runs too long, we have to submit this htar command to the cluster.
       ###############################################################
       # Note that the QsubHTARLogs and MaxHTARQsubs variables are not defined 
       #(ie are blank) if LimitSubmissions is not enabled
       ################################################################
   
       cd $lcl'/../simulations/veritas/'
       date
       if [ "$SPECPART" = "CR" ] ; then
	 SubmitHtarToArchive $HtarDir'/'$SPECSEA$TELCONGIG'P'$SPECMDL'VBFShowers/' $VDirBase'/protons/'  $ShowerVBFProtonsDir $QsubHTARLogs $MaxHTARQsubs
         echo "KSAuto: htar " $ShowerVBFProtonsDir" to archive complete."
	 SubmitHtarToArchive $HtarDir'/'$SPECSEA$TELCONFIG'He4'$SPECMDL'VBFShowers/' $VDirBase'/he4/'  $ShowerVBFHe4Dir $QsubHTARLogs $MaxHTARQsubs
         echo "KSAuto: htar "$ShowerVBFHe4Dir" to archive complete."
       else
        ShowerMDLDir=$SPECSEA$PMT$SPECPART$ZnAz$WblFilterSpec$Threshold'1234M2'$SPECSEA$SPECMDL

        SubmitHtarToArchive $HtarDir'/'$SPECSEA$TELCONFIG$SPECPART$SPECMDL'VBFShowers/' $VDirBase'/'$ParticleDir'/'  $ShowerMDLDir $QsubHTARLogs $MaxHTARQsubs
       fi
    fi

     #########################################################################
     #Should all be done now. Go on to next combo. This all could take a
     #couple of weeks or so
     date
     kaz=$((kaz+1))
    done
   izn=$((izn+1))
  done
date
echo 'KSAuto: All done!--Good bye!'

###########################################################################


      
