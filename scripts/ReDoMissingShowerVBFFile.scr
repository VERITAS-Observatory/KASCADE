#$1 Check.log file generated by a call of the type:
#  ./KSAuto.scr G S U 1 0,45,90,135,180 45mv MDL10U ABCD 64954StdCuts.root 
#       >Check.log  with "CheckGeneratedShowerVBFFiles=enabled" enabled.
#  Also works from "./FindBadShowerVBFFiles.scr 70 SUG ABCD >Check.log"
#$2 Telescope ksAomega config: Ex ABCD  or wxyz
#$3 Array season spec UA or NA or OA
#$4 Particle type Defauls to G  Optional P He4_  E
#From this file we will make a list Missing or short/failed Shower VBF files

#PARAFLYUPPERENERGY=20000
PARAFLYUPPERENERGY=100        #Special for Electron spectrum




function usage()
{
 echo '***ReDoMissingShowerVBFFile usage:'
 echo '   $1: File with Missing ShowerVBF Files in form: File Not found: SOG1Deg2D50mv1234M2GeV36550.d2.vbf'
 echo '   $2 Telescope ksAomega config: Ex ABCD  or wxyz'
 echo '   $3 Array season spec UA or NA or OA'
 echo '   $4 Particle type Defauls to G  Optional P He4_  E (Note:No CR! P and He4_ must be done sperately)'
 echo ' EX: ./ReDoMissingShowerVBFFile.scr CheckShowerVBFMDL8OAIJKL1_0-135From.log IJKL OA G'
 echo '***'
}


function setup()
{
  lcl=$PWD
  
  SetupForHost
  
  if [ -n "$CORI" ]; then
    WALLTIME='-t 07:00:00'
    dataDirBase=$SCRATCH/simulations
    echo Cori Data Dir: $dataDirBase
    mkdir -vp $dataDirBase
    workingDir=$SCRATCH
  fi

  if [ -n "$EDISON" ]; then
    dataDirBase=$SCRATCH/simulations
    echo Edison Data Dir: $dataDirBase
    mkdir -vp $dataDirBase
    workingDir=$SCRATCH
    WALLTIME='-t 07:00:00'
  fi

  if [ -n "$HANSEN" ]; then
    dataDirBase=$SCRATCH'/simulations'
    echo Hansen Data dir: $dataDirBase
    mkdir -vp $dataDirBase
    workingDir=$SCRATCH
      let NumParaFly=0
      let NumCores=48
      let NumThreadsToUse=10
      let MaxNumInParaFlyList=20
  fi

  if [ -n "$COATES" ]; then
    dataDirBase=$SCRATCH'/simulations'
    echo Coates Data dir: $dataDirBase
    mkdir -vp $dataDirBase
    workingDir=$SCRATCH
  fi

  if [ -n "$CONTE" ]; then
    dataDirBase=$SCRATCH'/simulations'
    echo Conte Data dir: $dataDirBase
    mkdir -vp $dataDirBase
    workingDir=$SCRATCH
      let NumParaFly=0
      let NumCores=16
      let NumThreadsToUse=10
      let MaxNumInParaFlyList=20
  fi

  dataDirBase=$dataDirBase'/veritas'
  mkdir -vp $dataDirBase

  if [ "$PARTYPE" = "G" ]; then
	datadir=$dataDirBase'/gammas'
  fi
  
  if [ "$PARTYPE" = "E" ]; then
	datadir=$dataDirBase'/electrons'
  fi

  if [ "$PARTYPE" = "P" ]; then
     datadir=$dataDirBase'/protons'
  fi

  if [ "$PARTYPE" = "He4_" ]; then
     datadir=$dataDirBase'/he4'
  fi

  if [ ! -n "$datadir" ]; then
     echo ReDoMissingShowerVBFFile - Bad particle spec: $PARTYPE ':Allowable are G or E or P or He4_'
     exit
  fi



  ####################################################################
  #Make sure ksallVBF.scr is set up correctly to generate ShwrVBF files
  ####################################################################
  GetUniqueNumber
  KSALLShwrVBF=ksallVBFShwrVBF$UNIQUE'.scr'
  cp $KASCADEBASE/scripts/ksallVBF.scr $KSALLShwrVBF
  sed '/KascadeEnable=enable/s/Kascade/#Kascade/g' \
                                                <$KSALLShwrVBF >tmp1
  sed '/LightEnable=enable/s/Light/#Light/g'                <tmp1 >tmp2
  sed '/PeSortMergeEnable=enable/s/PeSort/#PeSort/g'        <tmp2 >tmp1
  sed '/TriggerEnable=enable/s/Trigger/#Trigger/g'          <tmp1 >tmp2
  sed '/#AomegaEnable=enable/s/#Aomega/Aomega/g'            <tmp2 >tmp1
  sed '/#ArrayTrigEnable=enable/s/#Array/Array/g'           <tmp1 >tmp2
  sed '/#Production=enable/s/#Production/Production/g'      <tmp2 >tmp1
  if [ "$TELESPEC" = "OA" ]; then
     sed '/Fall09ArrayPositionsEnable=enable/s/Fall/#Fall/g'  <tmp1 >tmp2
  else
     sed '/#Fall09ArrayPositionsEnable=enable/s/#Fall/Fall/g' <tmp1 >tmp2
  fi
  sed '/#RemoveSingleVBFEnable=enable/s/#Remove/Remove/g'   <tmp2 >tmp1
  sed '/#CleanupEnable=enable/s/#Cleanup/Cleanup/g'         <tmp1 >tmp2
  sed '/#DebugPrintEnable=enable/s/#Debug/Debug/g'          <tmp2 >tmp1
  sed '/#VBFOutputToDetectorSpecDir=enable/s/#VBF/VBF/g'    <tmp1 >tmp2
  sed '/MoonFilterEnable=enable/s/Moon/#Moon/g'   \
                                                   <tmp2 >$KSALLShwrVBF
  rm tmp1
  rm tmp2
  ####################################################################
}
#############################################################################

function BuildAndSubmitJobsSingly() 
#**********************************************************************
# Cause serial jobs to be submitted.
# This version submits 1 job per shower.
#**********************************************************************
#$1 energy in GeV
#$2 showerID
#$3 particle spec Ex SUG70Deg2D45mv1234M2ABCD
{
 eGeV=$1     
 showerID=$2
 SPECSHWR=$3

 let E=${eGeV%%.*}
 
 ####################################################################
 # assume 45mv threhiold spec
 ####################################################################

 parspec=${SPECSHWR%%1234M2*}1234M2

 echo Entry:  $SPECSHWR $eGeV $showerID
 let E=${eGeV%%.*}

 #Make up the .pbs file name
 sgeFile=$lcl'/K'$eGeV'd'$showerID$SPECSHWR.pbs

 SgeFilePBSCmds  $sgeFile $E
 SgeFileBashCmds $sgeFile

 echo $lcl'/'$KSALLShwrVBF $eGeV $SPECSHWR \\                  >>$sgeFile
 echo $showerID $showerID $datadir $workingDir \\              >>$sgeFile
 echo ">>"$lcl"/ksProduction_"$eGeV'd'$showerID$SPECSHWR".log" >>$sgeFile

 chmod 700 $sgeFile
 
 $QSUB -e k$eGeV'd'$showerID$SPECSHWR.err -o k$eGeV'd'$showerID$SPECSHWR.log $sgeFile 
}
#**********************************************************************


function BuildForParaFlySubmission() 
#**********************************************************************
# Cause serial jobs to be submitted in a mass form using Parafly
# This version submits $NumCoreToUse  shower jobs per ParaFly pbs submission
# Only for the Standby/hansen queue for now.
# 
#**********************************************************************
#$1 energy in GeV
#$2 showerID
#$3 particle spec Ex SUG70Deg2D45mv1234M2ABCD
{
 eGeV=$1     
 showerID=$2

 if [ ! -n "$2" ]; then
   echo 'ReDoMissingShowerVBF: Fatal - needs Tel Config (like ABCD)'
   exit
 fi
 SPECSHWR=$3
 
 let E=${eGeV%%.*}
 
 ####################################################################
 # assumes 45mv threhold spec
 ####################################################################

 parspec=${SPECSHWR%%1234M2*}1234M2
 echo Entry:  $SPECSHWR $eGeV $showerID

 # ****************************************
 # See if we need to start a new ParaFly file 
 # ****************************************
 if [ "$NumParaFly" -eq "0" ]; then
    GetUniqueNumber
    ParaFlyFile=$lcl/ParaFly$SPECSHWR'.'$UNIQUE'.cmd'
    rm $ParaFlyFile
 fi
 
 # ******************************************
 # Add command to process this shower.
 # No continuations allowed in ParaFly cmd file
 # ******************************************
 PFLYCMD=$lcl'/'$KSALLShwrVBF' '$eGeV' '$SPECSHWR' '$showerID' '$showerID' '$datadir' '$workingDir" >>"$lcl"/ksProduction_"$eGeV'd'$showerID$SPECSHWR".log"

 echo $PFLYCMD  >>$ParaFlyFile
 NumParaFly=$((NumParaFly+1))

 # See if time to submit this list of commands.
 if [ "$NumParaFly" -ge "$MaxNumInParaFlyList" ]; then
    SubmitParaFlyPBSJob
    countPara=$((countPara+$NumParaFly))
    let NumParaFly=0
 fi	
}
# *************************************************************************

function SubmitParaFlyPBSJob
{
  #Make up the .pbs file name
  GetUniqueNumber
  local sgeFile=$lcl/K$UNIQUE$SPECSHWR'.pbs'

  #Build the pbs file (using stndby queue)
  echo "#"!/bin/bash -l                   >$sgeFile
  echo "#"$PBSCMD $QUEUE2                >>$sgeFile
  echo "#"$PBSCMD $WALLTIME2             >>$sgeFile
  if [ -n "$CORI" ]; then
     echo "#"$PBSCMD -N 1                >>$sgeFile
     echo "#"$PBSCMD -n 1                >>$sgeFile
  else
     echo "#"$PBSCMD -l $MEMREQUEST      >>$sgeFile
  fi
  
  if [ -n "$HANSEN" ] || [ -n "$COATES" ] || [ -n "$CONTE" ] ; then
    #Grab a complete Node
    echo "#"PBS -l nodes=1:ppn=$NumCores >>$sgeFile 
    echo source /etc/profile             >>$sgeFile
    echo module load gcc/4.7.2           >>$sgeFile
  fi
  # Add the ParaFly Command
  echo ParaFly -c $ParaFlyFile -CPU $NumThreadsToUse  -failed_cmds FailedCommands$UNIQUE  >>$sgeFile
 
  chmod 700 $sgeFile 
  
  $QSUB  -e $sgeFile'.err' -o $sgeFile'.log' $sgeFile 
}
#**********************************************************************

####################
#Start of main code
####################
if [  ! -n "$3" ]; then
        usage
        exit
fi

##################
# Bring in GetUniqueNumber function
##################
if [ ! -e UtilityFunctions.scr ]; then
    cp $KASCADEBASE/scripts/UtilityFunctions.scr ./
fi
source UtilityFunctions.scr


CheckFile=$1
TELCONFIG=$2
TELESPEC=$3
if [ !  -n "$4" ]; then
   PARTYPE='G'
else
   PARTYPE=$4
fi

setup
pwd 


#######################################################
#Just want the "File Not Found" lines.
#######################################################

grep "File Not found:" $CheckFile >tmp1

#######################################################
#Now we will parse these lines to end up with a file with
#all the info we need to create a .pbs file and submit it.
#A line in the file will look like:
# "File Not found: SUG70Deg2D45mv1234M2GeV52265.d10.vbf"
#######################################################

  sed '/File Not/s/1234M2GeV/1234M2'$TELCONFIG' /g' <tmp1     >tmp2
  sed '/File Not/s/\.d/  /g'                        <tmp2     >tmp1
  sed '/File Not/s/\.vbf/  /g'                      <tmp1     >tmp2
  sed '/File Not/s/File Not found\:/  /g'           <tmp2     >tmp1

##############################################################
#Read in the file we just created and cause the job to be submited
##############################################################
let count=0
let countPara=0
{  
  while read SHWRSPEC  energy  showerID
    do
       if [ $count -gt "$SUBMITLIMIT" ]; then
         echo 'ReDoMisingShowerVBFFile--Over ' $SUBMITLIMIT ' te file creation submisions to '$QUEUE ' queue. Not gonna do any more!'
         exit
       fi
       
   if [ -n "$PURDUE" ] ; then
       let E=${energy%%.*}
       if [ "$E" -gt "$PARAFLYUPPERENERGY" ]; then	
          BuildAndSubmitJobsSingly $energy $showerID $SHWRSPEC  
	  count=$((count+1))
       else
	  BuildForParaFlySubmission $energy $showerID $SHWRSPEC 
       fi
   else
       
       BuildAndSubmitJobsSingly $energy $showerID $SHWRSPEC  
       count=$((count+1))
   fi
   

  done
}<tmp1

# Flush Parafly
if [ -n "$NumParaFly" ]; then
  if [ "$NumParaFly" -gt "0" ]; then
     SubmitParaFlyPBSJob
  fi
fi


echo $count ' ShowerVBF file creation single submissions'
if [ $countPara -gt "0" ]; then
  echo $countPara 'ShowerVBF file creation ParaFly submissions' 
fi
