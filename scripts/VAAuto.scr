#!/bin/bash
#This script is used to automate the generation and processing of the veritas 
# KASCADE vbf files in 1:Noise levbels, LT and EA tables.
# GAMMAS ONLY for now (some electron stuff but nowhere near ready for 
# electrons)
#It has some arguments listed below.
#$1 ksProduction season spec: Ex: W or S
#$2 telescope designation: W or V or U (Whipple, veritas, Upgrade)
#$3 ksProduction Type spec: Ex:   G or  P or He4_ or CR or E
#$4 MDL designation for VBF files: Ex MDL10U
#$5 comma seperated list of ZN values: Ex 1,10,20,30,40,50,60,70 or "All
#$6 comma seperated list of AZ values: Ex 0,45,90,135,180,225,270,315 or "All"
#$7 wbl list Ex: 0.0,0.25,0.5,0.75,1.0  or "All"
#$8 Threshold: Ex 45mv or 50mv
#$9 PedVar list: 4.73, 5.55 6.51 or "All" or "Base"
# ************************************************************************
# Within that loop we can do:   

#GenerateSimLaserFile=enabled
#GetVBFFileFromArchive=enabled
#GenerateStage2Files=enabled
#CheckStage2Files=enabled

#HTARPedVarZnOffsetToArchive=enabled                   #No waiting
#HTARPedVarZnOffsetFromArchive=enabled

#GenerateSubLTListFiles=enabled
#GenerateSubLTConfigFiles=enabled
#ProduceSubLookupTables=enabled                        #No waiting
#CombineSubLT=enable
#BuildLTTree=enable

#GenerateDispSubLTListFiles=enabled
#GenerateDispSubLTConfigFiles=enabled
#ProduceDispSubLookupTables=enabled
CombineDispSubLT=enable
#BuildDispLTTree=enable

#FindNoiseLevels=enabled


###########################################################################
function checkRunningJobs()
#$1 Job ID List
#$2 Zn_Az

{
  RunningList=RunningList$2'.dat'
  SingleRunList=singleRunList$2'dat'
  if [ -s $RunningList ]; then
      rm $RunningList
  fi
  {
    while  read jobID;  do
      qstat $jobID &>$SingleRunList
      cat $SingleRunList | grep -v Unknown >>$RunningList
    done
  } <$1

  rm $SingleRunList
  if [ -s  $RunningList ]; then
    rm $RunningList
    return 1
  else
    rm $RunningList
    return 0
  fi
}
##########################################################################
function GetPedVars()
{
  RFile2=$1
  PVFile=$2
  #################################
  # We now need to run root in batch mode and get list of pedvars
  # and the max one
  #################################
  echo "{"                                                    >VAAuto.C
  echo 'VARootIO io("'$RFile'", true);'                      >>VAAuto.C
  echo 'io.loadTheRootFile();'                               >>VAAuto.C
  echo 'VAQStatsData *q = io.loadTheQStatsData();'           >>VAAuto.C
  echo 'std::ofstream ofs("PedVarBaseRatios.dat");'          >>VAAuto.C
  echo 'std::vector< double > ped;'                          >>VAAuto.C
  echo 'ped.Resize(4,0.0);'                                  >>VAAuto.C
  echo 'ped.at(0)=q->getCameraAverageTraceVarTimeIndpt(0,7)' >>VAAuto.C
  echo 'ped.at(1)=q->getCameraAverageTraceVarTimeIndpt(1,7)' >>VAAuto.C
  echo 'ped.at(2)=q->getCameraAverageTraceVarTimeIndpt(2,7)' >>VAAuto.C
  echo 'ped.at(3)=q->getCameraAverageTraceVarTimeIndpt(3,7)' >>VAAuto.C
  echo 'double max= *max_element(ped.begin(),ped.end());'    >>VAAuto.C
  echo 'ofs<<ped.at(0)<<" "<<ped.at(1)<<" ";'                >>VAAuto.C
  echo '   <<ped.at(2)<<" "<<ped.at(3)<<" ";'                >>VAAuto.C
  echo '   <<max<<std::endl;'                                >>VAAuto.C
  echo 'io.closeTheRootFile();'                              >>VAAuto.C
  echo '}'                                                   >>VAAuto.C

 # ~/Switch.rootrcTo.rootrc_glenn.scr
  root -q -b VAAuto.C  >VAAuto.C.log
}
######################################################################
function LoadPVOpt()
{
  BaseRat=$1
  PVBase=$2
  PVTar=$3
  NewRatioFile=$4
  NewOptFile=$5
  ############################################
  #We have to do some foalingpoint arithmatic and some semi-fancy
  #formatting, so lets do it in root
  ############################################
#  echo "{"                                                      >VAAuto.C
#  echo '  std::string line;'                                   >>VAAuto.C
#  echo '  std::ifstream iBR(\"'$BaseRat'\");'                  >>VAAuto.C
#  echo '  std::getline(iBR,line);'                             >>VAAuto.C
#  echo '  std::istringstream issBR(line);'                     >>VAAuto.C
#  echo '  std::vector< double > oldRat;'                       >>VAAuto.C
#  echo '  double Value;'                                       >>VAAuto.C
#  echo '  for(int i=0;i<4;i++){'                                >>VAAuto.C
#  echo '    issBR>>Value'                                      >>VAAuto.C
#  echo '    oldRat.push_back(Value);'                          >>VAAuto.C
#  echo '  }'                                                   >>VAAuto.C
#  echo '  std::ifstream iPVB(\"'$PVBase'\");'                  >>VAAuto.C
#  echo '  std::getline(iPVB,line);'                            >>VAAuto.C
#  echo '  std::istringstream issPVB(line);'                    >>VAAuto.C
#  echo '  std::vector< double > PVB;'                          >>VAAuto.C
#  echo '  for(int i=0;i<4;i++){'                                >>VAAuto.C
  #echo '    issPVB>>Value'                                     >>VAAuto.C
  #echo '    PVB.push_back(Value);'                             >>VAAuto.C
  #echo '  }'                                                   >>VAAuto.C
  #echo '  std::ofstream oRF(\"'$NewRatioFile'\");'             >>VAAuto.C
  #echo '  std::ofstream oOF(\"'$NewOptFile'\");'               >>VAAuto.C
  #echo '  oOF<<\"IncreasePedVarOption='                        >>VAAuto.C
  #echo '     <<\"\'-PaddingApp=PaddingCustom '                 >>VAAuto.C
  #echo '     << -P_MultiPedvarScaling='                        >>VAAuto.C
  #echo '  for(int i=0;i<4;i++){'                               >>VAAuto.C
  #echo '    Value=oldRat.at(i)*'$PVTar'/PVB.at(i);'            >>VAAuto.C
  #echo '    oOF<<i+1<<\"/\"<<Value;'                           >>VAAuto.C
  #echo '    oRF<<Value<<\" \";'                                >>VAAuto.C
  #echo '  }'                                                   >>VAAuto.C
  #echo '  oOF<<'\"\'\"<<std::endl;                             >>VAAuto.C 
  #echo '  oOF<<\"PedVarBase=\'PedVar'$PVTar'\"<<std::endl;'    >>VAAuto.C 
  #echo '  oRF<<std::endl;'                                     >>VAAuto.C
  #echo '}'                                                     >>VAAuto.C

  ~/Switch.rootrcTo.rootrc_glenn.scr
  root -q -b VAAuto.C  >VAAuto.C.log
}
###########################################################################
#########################################################################

function SubmitHtarToArchive()
{
  #$1 HTAR File Name (Includes Path)
  #$2 Disk Base Directory that has files we want to archive
  #$3 Filespec (with wildcards) of files we want to archive
  Destination=$1    #Archive htar file
  SourceDir=$2         #Disk Base Directory
  FileSpec=$3          #Files to archive
  

  echo Destination: $Destination
  echo SourceDir: $SourceDir
  echo FileSpec: "$FileSpec"
  HTARFileName=${Destination##*/}
  HTARFileName=${HTARFileName%%.tar}

  echo HTARFileName: $HTARFileName
  lcl=$PWD

  #build a submission .pbs file
  sgeFile=$lcl'/'$HTARFileName'To.pbs'
  echo "#"PBS -q $QUEUE                                            >$sgeFile
  echo "#"PBS -l walltime=04:00:00                                >>$sgeFile
  if [ -n "$HANSEN" ]; then  
    echo source /etc/profile                                      >>$sgeFile
    echo module load gcc/4.7.2                                    >>$sgeFile
  fi
  echo cd $SourceDir                                              >>$sgeFile
  echo htar -cvf  $Destination'  '"$FileSpec" \\                  >>$sgeFile
  echo '>'$lcl'/'$HTARFileName'.log'                              >>$sgeFile

  chmod 700 $sgeFile
  HTARLOG=$lcl'/VAHTARTo.log'
  qsub -V -e $HTARFileName'To.pbs.err' -o $HTARFileName'HTARTo.pbs.log' $sgeFile >$HTARLOG

  #####################################################################
  # We are now going to wait for the htar to finish.
  #####################################################################

  if [ -n "$HANSEN" ]; then
   echo "VAAuto: htar to archive "$HTARFileName" job submission to Hansen "$QUEUE" queue complete."
  fi
  if [ -n "$CARVER" ]; then
   echo "VAAuto: htar to archive "$HTARFileName" job submission to Carver cluster complete."
  fi
  date
#  echo "VAAuto: Sleeping until it finishes."
#  # Cleanup the log file to only have Hansen cluster pids in it
# 
#  ShowerMakeTE='ShowerMakeTE'$HTARFileName'.log'
#  cat $HTARLOG | grep $JobIDHost >$ShowerMakeTE
#
#  runsNotDone=1
#  while test $runsNotDone -eq 1 
#    do
#     sleep 60s
#     checkRunningJobs $ShowerMakeTE $HTARFileName
#     let runsNotDone=$?
#    done
#  echo "VAAuto: HTAR of "$HTARFileName" complete"

#  # And now cleanup: change protection
#  chmod 775 $Destination
  cd $lcl
}
#########################################################################
function SubmitHtarFromArchive()
{
  #$1 Archive directory wqhere our tar file exists
  #$2 Destination directory where we want to unTar into.
  #$3 name of the Tar file we want to untar(without .tar extention).

  local=$PWD

  ArchiveDir=$1          #Archive direxctory
  DestinationDir=$2      #Base Disk directory
  Source=$3              #Base Tar file name
  SourceTarFile=$3'.tar'

  echo 'Src: '$ArchiveDir'/'$SourceTarFile 

  #build a submission .pbs file
  sgeFile=$lcl'/'$Source'From.pbs'
  echo "#"PBS -q $QUEUE                                     >$sgeFile
  echo "#"PBS -l walltime=04:00:00                         >>$sgeFile
  if [ -n "$HANSEN" ]; then
    echo source /etc/profile                               >>$sgeFile
    echo module load gcc/4.7.2                             >>$sgeFile
  fi
  echo cd $DestinationDir                                  >>$sgeFile
  echo htar -xvf  $ArchiveDir'/'$SourceTarFile    \\       >>$sgeFile
  echo '>'$local'/'$Source'.log'     >>$sgeFile

  chmod 700 $sgeFile
  HTARLOG=$local'/KSHTAR'$ZnAz'From.log'
  qsub -V -e $Source'HTARFrom.pbs.err' -o $Source'HTARFrom.pbs.log' $sgeFile >$HTARLOG

  if [ -n "$HANSEN" ]; then
   echo "KSAuto: htar from archive "$ShwrDir" job submission to Hansen "$QUEUE" queue complete."
  fi
  if [ -n "$CARVER" ]; then
   echo "KSAuto: htar from archive "$ShwrDir" job submission to Carver cluster complete."
  fi
  # And now cleanup
  cd $lcl
}
  ##########################################################################


#Main:

lcl=$PWD
PMT=$2

source /etc/profile

host=$(hostname)
echo host: $host

hostString=${host:0:6}
if test  "$hostString" = "cvrsvc"  #Are we running on Carver
then
  CARVER=enabled
  JobIDHost='cvrsvc'
  QUEUE=serial
  WALLTIME=30:00:00
  ARCHIVE=/home/u/u15013/$4'/'
  VBFDir=$ARCHIVE$1$2$PMT$4'VBF'
  echo '***Carver Cluster***'
fi

hostString=${host:0:6}
if test  "$hostString" = "hansen"  #Are we running on Hansen
then
  HANSEN=enabled
  ARCHIVE=/archive/fortress/group/veritas/simulations/
  VBFDir=$ARCHIVE'/gammas/'$1$PMT$3$4'VBF'
  JobIDHost='hansen-adm'
  QUEUE=physics
  WALLTIME=30:00:00
  #QUEUE=standby
  #WALLTIME=04:00:00
  echo ***Hansen Cluster***
fi


########################################################################
#To find the Zn,AZ,Offset and Pedvar  combinations first put $5,$6,$7 and $9 
#into arrays This is tricky. We save away the present Internal Filed Seperator
#and then set IFS to a comma. We then use the -a option with the read command 
#to read in our stings into arrays. Then we restore the IFS.

SAVEIFS=$IFS

if [ $5 = "All" ]; then
  Zenith=([0]=1 10 20 30 40 50 60 70)
else  
  IFS=, read -a Zenith <<< "$5"
fi

if [ $6 = "All" ]; then
  Azimuth=([0]=0 45 90 135 180 225 270 315)
else  
  IFS=, read -a Azimuth <<< "$6"
fi

if [ $7 = "All" ]; then
  WblOffset=([0]=0.0 0.25 0.5 0.75 1.0 1.25 1.5 1.75 2.0)
else  
   IFS=, read -a WblOffset <<< "$7"
fi

echo :Arg9: $9

if [ $9 = "All" ]; then
  PedVar=([0]=4.73 5.55 6.51 7.64 8.97 10.52 12.35 14.49 17.00)
else
   if [ $9 = "Base" ]; then
      PedVar=([0]=0 )
   else
      IFS=, read -a PedVar <<< "$9"
   fi
fi
IFS=$SAVEIFS




###########################################################################

#Check if the is for 2D offsets, blank if not
if [ "$3" = "G" ] || [ "$3" = "E" ]; then
  OffSetSpec="2D"
fi

##########################################################################
#Some defaults
Samples=7
HMode=H

######################################
#SubLT bin ave mode for length, width and EaxisEnergy tables:Mean or MEDIAN
######################################
#CFG_LW=MEAN
CFG_LW=MEDIAN

LTFILENAMEBASE='k_Jan2013_ua_ATM21_'$Samples'samples_'$HMode'_vegas250_alloffsets'$CFG_LW'.root'

LTCUTSFILE=$VEGAS'/../tables/LookupTableStdCuts'
if [ $HMode = "HFit" ]; then
  LTCUTSFILE=$VEGAS'/../tables/LookupTableHFitStdCuts'
fi
if [ -n "$ProduceSubLookupTables" ]; then
  if [ ! -e $LTCUTSFILE ]; then
     echo 'VAAuto: Fatal- Can not find file '$LTCUTSFILE
     exit
  fi
fi

DISPLTCUTSFILE=$VEGAS'/../tables/DispLookupTableStdCuts'
if [ -n "$ProduceDispSubLookupTables" ]; then
  if [ ! -e $DISPLTCUTSFILE ]; then
     echo 'VAAuto: Fatal- Can not find file '$DISPLTCUTSFILE
     exit
  fi
fi


TelIDStr=0,1,2,3
ZNStr=1,10,20,30,40,50,60,70
ABOStr=0.0,0.25,0.5,0.75,1.0,1.25,1.5,1.75,2.0
AzStr=0,45,90,135,180,225,270,315
NoiseStr=4.73,5.55,6.51,7.64,8.97,10.52,12.35,14.49,17.00
DTMWidthStr=0.04,0.06,0.08,0.1,0.12,0.14,0.16,0.2,0.25,0.35
DTMLengthStr=0.05,0.09,0.13,0.17,0.21,0.25,0.29,0.33,0.37,0.41,0.45,0.5,0.6,0.7,0.8

#ZNStr
let iznEnd=${#Zenith[@]}
if test $iznEnd -ne "8"
 then
  let izn=0
  ZNStr=${Zenith[$izn]}
  izn=$((izn+1))
  while test $izn -lt $iznEnd
   do
     ZNStr=$ZNStr','${Zenith[$izn]}
     izn=$((izn+1))
   done
fi

#ABOStr
let iwblEnd=${#WblOffset[@]}
if test $iwblEnd -ne "9"
 then
  let iwbl=0
  ABOStr=${WblOffset[$iwbl]}
  iwbl=$((iwbl+1))
  while test $iwbl -lt $iwblEnd
   do
     ABOStr=$ABOStr','${WblOffset[$iwbl]}
     iwbl=$((iwbl+1))
   done
fi

#AzStr
let kazEnd=${#Azimuth[@]}
if test $kazEnd -ne "8"
 then
  let kaz=0
  AzStr=${Azimuth[$kaz]}
  kaz=$((kaz+1))
  while test $kaz -lt $kazEnd
   do
     AzStr=$AzStr','${Azimuth[$kaz]}
     kaz=$((kaz+1))
   done
fi

#NoiseStr
let kpvarEnd=${#PedVar[@]}
if test $kpvarEnd -ne "9"
 then
  let kpvar=0
  NoiseStr=${PedVar[$kpvar]}
  kpvar=$((kpvar+1))
  while test $kpvar -lt $kpvarEnd
   do
    NoiseStr=$NoiseStr','${PedVar[$kpvar]}
    kpvar=$((kpvar+1))
   done
fi

    

############################################################################
# Sim Laser generation
############################################################################

if [ -n "$GenerateSimLaserFile" ]; then
    echo '##########################################################'
    echo '# GenerateSimLaserFile '
    echo '##########################################################'
    cd $lcl
    date
    ####################################################################
    #Generate a sim laser file 
    ####################################################################
    #Make sure VegasSimProduction.scr is set up correctly to get simLaser  
    cp $KASCADEBASE/scripts/VegasSimProduction.scr VegasSimProductionLaser.scr

    #####################################################################
    sed '/#Stage1Laser=enable/s/#Stage1Laser/Stage1Laser/g' \
                                        < VegasSimProductionLaser.scr >tmp1
    sed '/Stage1Data=enable/s/Stage1Data/#Stage1Data/g'      <tmp1 >tmp2
    sed '/Stage2=enable/s/Stage2/#Stage2/g'                  <tmp2 >tmp1
    sed '/Stage4=enable/s/Stage4/#Stage4/g'                   <tmp1 >tmp2
    sed '/Stage5=enable/s/Stage5/#Stage5/g' \
                                         <tmp2 >VegasSimProductionLaser.scr
    rm tmp1
    rm tmp2
    ####################################################################
       
    echo "VAAuto: Running VegasSimProductionLaser for simLaser generation"
    echo "VAAuto: This takes a couple of minutes"
    ./VegasSimProductionLaser.scr  DummyFileName >$lcl'/SimLaserFile.log'
    echo "VAAuto: simLaser.root generated"
fi
#############################################################################

if [ -n "$GenerateStage2Files" ]; then
    echo '##########################################################'
    echo '# GenerateStage2Files'
    echo '##########################################################'
    cd $lcl
    date
    #Make sure VegasSimProduction.scr is set up correctly to get  
    #Stage1 and Stage2
    if [ ! -e "VegasSimProductionS1S2.scr" ]; then
     cp $KASCADEBASE/scripts/VegasSimProduction.scr VegasSimProductionS1S2.scr

     #The standard VegasSimProduction.scr should have all options 
     #turned off.  We just have to make sure only stages 1 and 2 get run
     #??????Sample size:We will need to set integration window size if 
     #different from 7?????? Not implimented yet.
     ##################################################################
     sed '/Stage1Laser=enable/s/Stage1Laser/#Stage1Laser/g' \
                                          < VegasSimProductionS1S2.scr >tmp1
     sed '/#Stage1Data=enable/s/#Stage1Data/Stage1Data/g'        <tmp1 >tmp2
     sed '/#Stage2=enable/s/#Stage2/Stage2/g'                    <tmp2 >tmp1
     sed '/Stage4=enable/s/Stage4/#Stage4/g'                     <tmp1 >tmp2
     sed '/Stage5=enable/s/Stage5/#Stage5/g' \
                                           <tmp2 >VegasSimProductionS1S2.scr
     rm tmp1
     rm tmp2
    fi
fi
############################################################################

if [ -n "$CheckStage2Files" ]; then
  echo '##########################################################'
  echo '# CheckStage2Files'
  echo '##########################################################'
  if [ ! -e "CheckStage2FileOK.C" ]; then
     cp $KASCADEBASE/scripts/CheckStage2FileOK.C .
  fi
fi
############################################################################

if [ -n "$GenerateDispSubLTListFiles" ]; then
   echo '##########################################################'
   echo '# GenerateDispSubLTListFiles'
   echo '##########################################################'
   cd $lcl
   date
   DispListNames='DispSubLT'$1$Samples'Sample*List'
   rm $DispListNames
fi
#############################################################################
if [ -n "$GenerateDispSubLTConfigFiles" ]; then
   echo '##########################################################'
   echo '# GenerateDispSubLTConfigFiles'
   echo '##########################################################'
   cd $lcl
   date
   ConfigNames='DispSubLT'$1$Samples'Sample*Deg*noise'$HMode'.config'
   rm $ConfigNames
   # *************************************************************************
   # Generate template config file for the Disp tables
   # Change for KASCADE and Number of samples
   # Note: No DTM_TelID(All tel tables look identicle)  or 
   #       DTM_AbsoluteOffset (doesn't make sense for DTM) differences used
   # *************************************************************************
   $VEGAS/showerReconstruction2/bin/produceDispTables -save_config_and_exit tmp1
   sed '/DTC_SimulationType/s/GrISU/KASCADE/g'                  <tmp1 >tmp2
   sed '/DTM_FillType "MEDIAN"/s/MEDIAN/MEDIAN/g'               <tmp2 >tmp1
   sed '/DTM_Azimuth      /s/Azimuth/Azimuth '$AzStr'/g'        <tmp2 >tmp1
   sed '/DTM_Zenith         /s/Zenith/Zenith '$ZNStr'/g'        <tmp1 >tmp2
   sed '/DTM_Noise         /s/Noise/Noise '$NoiseStr'/g'        <tmp2 >tmp1
   sed '/DTM_Width         /s/Width/Width '$DTMWidthStr'/g'     <tmp2 >tmp1
   sed '/DTM_Length         /s/Length/Length '$DTMLengthStr'/g' <tmp1 >tmp2
   sed '/Log10SizePerBin/s/0.04/0.25/g'                         <tmp2 >tmp1
   sed '/Log10SizeUpperLimit/s/5.5/6.0/g'                       <tmp1 >tmp2
   sed '/RatioPerBin/s/0.05/1.0/g'                              <tmp2 >tmp1
   #Set the number of samples for noise
   sed '/DTM_WindowSizeForNoise/s/7/'$Samples'/g' <tmp1 >tmp2
   #Replace HillasBranchName argument
   sed '/HillasBranchName "H"/s/"H"/"'$HMode'"/g'    <tmp2 >config1.tmp

   ###########################################################################
   #Config settings not used:
   #sed '/DTM_FillType "MEDIAN"/s/MEDIAN/MEAN/g'                 <tmp2 >tmp1
   #sed '/GC_CorePositionFractionalErrorCut/s/100/.25/g'         <tmp1 >tmp2
   #sed '/GC_CorePositionAbsoluteErrorCut/s/1000/20/g'           <tmp2 >tmp1
   ###########################################################################
   # Disp cut file DispLookupTableStdCuts should only have:
   # -SizeLower=0/0
   # -DistanceUpper=0/1.38
   #-NTubesMin=0/5
   ###########################################################################
fi
########################################################################

if [ -n "$ProduceDispSubLookupTables" ]; then
   echo '##########################################################'
   echo '# ProduceDispSubLookupTables'
   echo '##########################################################'
   cd $lcl
   date
fi  
##############################################################################
##############################################################################
if   [ -n "$CombineDispSubLT" ]; then
   echo '##########################################################'
   echo '# CombineDispSubLT'
   echo '##########################################################'
   cd $lcl
   date
   LTFILENAME='dt'$LTFILNAMEBASE
   SubLTList='SubLTList'
   if [ -e $lcl'/'$SubLTList ]; then
     rm $lcl'/'$SubLTList
   fi
fi
##############################################################################
if [ -n "$BuildDispLTTree" ]; then
   echo '##########################################################'
   echo '# BuildDispLTTree'
   echo '##########################################################'
   cd $VEGAS/showerReconstruction2/macros
   date
   LTFILENAME='dt'$LTFILNAMEBASE
   BUILDCONFIG='BuildDispTree'$Samples'Samples.config' 
   $VEGAS/showerReconstruction2/bin/buildDispTree -save_config_and_exit tmp1

   #**********************************************************************
   #Modify for this Disp LT: we need at least 2 to change things
   #**********************************************************************
   let iznEnd=${#Zenith[@]}
   let kazEnd=${#Azimuth[@]}
   let kpvarEnd=${#PedVar[@]}

   INFILE=tmp2
   OUTFILE=tmp1

   if [ ${#Azimuth[@]} -gt "1" ]; then
     sed '/DTM_Azimuth      /s/Azimuth/Azimuth '$AzStr'/g' <$INFILE >$OUTFILE
     TMPFILE=$INFILE
     INFILE=$OUTFILE
     OUTFILE=$TMPFILE
   fi
   
   if [ ${#Zenith[@]} -gt "1" ]; then
     sed '/DTM_Zenith         /s/Zenith/Zenith '$ZNStr'/g' <$INFILE >$OUTFILE
     TMPFILE=$INFILE
     INFILE=$OUTFILE
     OUTFILE=$TMPFILE
   fi
   if [ ${#PedVar[@]} -gt "1" ]; then
     sed '/DTM_Noise         /s/Noise/Noise '$NoiseStr'/g' <$INFILE >$OUTFILE
     TMPFILE=$INFILE
     INFILE=$OUTFILE
     OUTFILE=$TMPFILE
   fi
   sed '/DTM_Width         /s/Width/Width '$DTMWidthStr'/g'    <$INFILE >$OUTFILE
   sed '/DTM_Length        /s/Length/Length '$DTMLengthStr'/g' <$OUTFILE >$BUILDCONFIG

   $$VEGAS/showerReconstruction2/bin/buildTree '-config='$BUILDCONFIG $LTFILENAME 
fi

#################################################################################

########################################################################
# Specail test for SubLTables (LT and Disp): We need at least 2 specs for Az and 
# PedVar. This is a produce_lookuptable and produceDispTable "feature"
########################################################################
let kpvarEnd=${#PedVar[@]}
let kazEnd=${#Azimuth[@]}
let iznEnd=${#Zenith[@]}
let iwblEnd=${#WblOffset[@]}
if [ -n "$GenerateSubLTConfigFiles" ]     || [ -n "$GenerateSubLTListFiles" ] || \
   [ -n "$ProduceSubLookupTables" ]       || [ -n "$ProduceDispSubLookupTables" ] || \
   [ -n "$GenerateDispSubLTConfigFiles" ] || [ -n "$GenerateDispSubLTListFiles" ]; then
   if test  $kazEnd -lt "1" 
    then
     echo 'VAAuto: Fatal! Need at least 2 Az values specified'
     #Note we could also just remove the AZ line in the config file!
     exit
   fi
   if test $kpvarEnd -lt "1"
    then
      echo 'VAAuto: Fatal! Need at least 2 PedVar values specified'
     #Note we could also just remove the Noise line in the config file!
      exit
   fi
   if test  $iznEnd -lt "1" 
    then
     echo 'VAAuto: Fatal! Need at least 2 Zn values specified'
     #Note we could also just remove the Zn line in the config file!
     exit
   fi
   if test $iwblEnd -lt "1"
    then
      echo 'VAAuto: Fatal! Need at least 2 Offset(Wbl) values specified'
     #Note we could also just remove the Noise line in the config file!
      exit
   fi
fi
##########################################################################

MissingListName='CheckPedvarMissingList'
 
if [ -n "$GetVBFFileFromArchive" ]      || [ -n "$GenerateStage2Files" ] || \
   [ -n "$CheckStage2Files" ]           || [ -n "$GenerateDispSubLTConfigFiles" ] || \
   [ -n "$GenerateDispSubLTListFiles" ] || [ -n "$ProduceDispSubLookupTables" ]   || \
   [ -n "$CombineDispSubLT" ]; then
   
 #############################################################################
 #now we loop over Zn,AZ WblOffset and PedVar
 #############################################################################
 #Zenith
 let izn=0
 let iznEnd=${#Zenith[@]}
 let iFilesNotFound=0
 while test $izn -lt $iznEnd
  do

   #Azimuth
   let kaz=0
   let kazEnd=${#Azimuth[@]}
   while test $kaz -lt $kazEnd
    do
     #Make   Zn_Az string
     if test ${Azimuth[$kaz]} = "0"
      then
       ZnAz=${Zenith[$izn]}'Deg'
     else
       ZnAz=${Zenith[$izn]}'_'${Azimuth[$kaz]}'Deg'
     fi
     
     #Construct the Disp Sub Lt Config File Name
     DISPSUBLTBASE='DispSubLT'$1$Samples'Sample'$ZnAz
     DispConfigName=$DISPSUBLTBASE$HMode'.config'
     DispListName=$DISPSUBLTBASE'List'
     DispSubLTFileName=$lcl'/'$DISPSUBLTBASE'.root'
     #####################################################################

     if [ -n "$GenerateDispSubLTConfigFiles" ]; then
       #############################################################
       #Now we need to "edit the new config file
       #############################################################
       #Figure out what the Zenith argument should look like
       if test $izn -eq "0" 
        then
         Zn=${Zenith[izn]}','${Zenith[1]}
        else
         Zn=${Zenith[0]}','${Zenith[izn]}
       fi
       #now replace Zenith argument and put in a tmp file
       sed '/DTM_Zenith/s/'$ZNStr'/'$Zn'/g' <config1.tmp >config2.tmp

       ############################
       #Now do the same for the Azimuth but put in final file
       ############################
       if test $kaz -eq "0" 
        then
	  Az=${Azimuth[$kaz]},${Azimuth[1]}
        else
	  Az=${Azimuth[0]},${Azimuth[$kaz]}
        fi
        #now replace Offset argument and put in a final file
        sed '/DTM_Azimuth/s/'$AzStr'/'$Az'/g'  <config2.tmp >$DispConfigName
        rm config2.tmp
     fi
     #********************************************************************

     if [ -n "$ProduceDispSubLookupTables" ]; then
       ####################################################################
       # Make up the job script file that will be submitted below
       ####################################################################
       sgeFile=$lcl'/'$DISPSUBLTBASE'.pbs'
       echo "#"PBS -l walltime=$WALLTIME                >$sgeFile
       if [ -n "$CARVER" ]; then
         echo "#PBS -l pvmem=15GB"                     >>$sgeFile
       fi
       if [ -n "$HANSEN" ]; then
         echo "#PBS -l mem=15GB"                       >>$sgeFile
         echo source /etc/profile                      >>$sgeFile
         echo module load gcc/4.7.2                    >>$sgeFile
       fi
       echo cd $lcl                                    >>$sgeFile
       echo $VEGAS/bin/produceDispTables \\            >>$sgeFile
       echo -config $lcl'/'$DispConfigName \\          >>$sgeFile
       echo -cuts $DISPLTCUTSFILE  \\                  >>$sgeFile
       echo  $lcl'/'$DispListName   \\                 >>$sgeFile
       echo  $DispSubLTFileName  \\                    >>$sgeFile
       echo '>'$lcl'/'$DISPSUBLTBASE'.log'             >>$sgeFile
       chmod 700 $sgeFile

       qsub -q $QUEUE -V -e $DISPSUBLTBASE.qsub.err -o $DISPSUBLTBASE.qsub.log $sgeFile
     fi
     #*******************************************************************
    
     if [ -n "$CombineDispSubLT" ]; then
       #*******************************************************************
       # Create the List of Disp SubLT files to be combined
       #******************************************************************
       # But first check that each file does exixt. We may want to test deeper
       # if this isn't enough later.
       ###################################################################
       if  [ ! -e "$DispSubLTFileName" ]; then
         echo 'VAAuto: Fatal--Disp SubLT file '$DispSubLTFileName ' does not exist'
         # exit
       fi
       echo $DispSubLTFileName >>$lcl'/'$SubLTList
     fi
     #******************************************************************

     ####################################################################
     # Iterate over WBLOffsets and PedVars
     ####################################################################
     #WblOffset
     let iwbl=0
     let iwblEnd=${#WblOffset[@]}
     while test $iwbl -lt $iwblEnd
      do
       WBL=${WblOffset[$iwbl]}
       if [ "$WBL" !=  '0.0' ]; then
        WBLSPEC=S$WBL'Wbl'
       else
        WBLSPEC=$WBL'Wbl'
       fi
       #Iterate through PedVars
       let kpvar=0
        let kpvarEnd=${#PedVar[@]}
       while test $kpvar -lt $kpvarEnd
        do
         #Test for defaults
         PV=${PedVar[$kpvar]} 
         if test "$PV" = "0"
          then
           PedVarFile=""
           PedVarName=""
         else
           PedVarFile=Ped$PV
           PedVarName=PedVar$PV
         fi  
   
         # ************************************************************************
         #  Now all the things we can do for a particular Zn,AZ,WblOffset and PedVar
         # ************************************************************************
         #Generate  file names
 
         BaseFile=$1$PMT$3$4$ZnAz'2D'$WBLSPEC$8
	 FileName='PedVar'$PV$BaseFile'1234M2.root'
         VBFFILE=$BaseFile'1234M2.vbf'
   
         ################################################################
	    
         if [ -n "$GetVBFFileFromArchive" ]; then
          echo '##########################################################'
          echo '# GetVBFFileFromArchive'
          echo '##########################################################'
	  cd $lcl
	  date
	  if [ ! -e "$VBFFILE" ]; then
           hsi 'cd '$ARCHIVE$1$PMT$3$4'VBF; get '$VBFFILE';'
          fi
         fi
            
         ###############################################################


         if [ -n "$GenerateStage2Files" ]; then
          #echo '##########################################################'
          #echo '# GenerateStage2Files '
 	  #echo '##########################################################'
	  cd $lcl
	  date
	  echo PV:$PV
      
          echo "VAAuto: Submitting VegasSimProductionS1S2 to '$QUEUE' queue for " $lcl'/'$VBFFILE 
          sgeFile=$lcl'/'$PedVarFile$BaseFile'.pbs'
          echo "#"PBS -l walltime=$WALLTIME                >$sgeFile
          if [ -n "$CARVER" ]; then
           echo "#PBS -l nodes=1:ppn=1"                   >>$sgeFile
           echo "#PBS -l pvmem=20GB"                      >>$sgeFile
            # or if above does not work:
            #echo "#PBS -l nodes=1:ppn=1:bigmem"          >>$sgeFile
            #echo "#PBS -l pvmem=44GB                     >>$sgeFile
           fi
          if [ -n "$HANSEN" ]; then
           echo "#PBS -l mem=15GB"                       >>$sgeFile
           echo source /etc/profile                      >>$sgeFile
           echo module load gcc/4.7.2                    >>$sgeFile
          fi
          echo cd $lcl                                    >>$sgeFile
          echo $lcl'/'VegasSimProductionS1S2.scr  \\      >>$sgeFile
          echo $VBFFILE  $PedVarFile \\                   >>$sgeFile
          echo ' >'$lcl'/'$PedVarFile$BaseFile'VBF.log'   >>$sgeFile
          chmod 700 $sgeFile
          qsub -q $QUEUE  -V -e $PedVarFile$BaseFile'.err' -o $PedVarFile$BaseFile'pbs.log' $sgeFile 
         fi
         ###############################################################


         if [ -n "$CheckStage2Files" ]; then
          # echo '##########################################################'
          # echo '# CheckStage2Files'
	  # echo '##########################################################'
          cd $lcl

          #Check VARootIO can open and load file 
	  ~/Switch.rootrcTo.rootrc_glenn.scr
	  Arg=$lcl'/CheckStage2FileOK.C("'$FileName'")'
          #echo Arg: $Arg 

	  root -q -b -q $Arg >CheckStage2OK.log
          {
           read BAD
           if [ $BAD -lt "15" ]; then
	       #echo "VAAuto: Bad: "$BAD" file "$FileName
               echo "Bad: "$FileName
               if [ $BAD -eq "1" ]; then
                  echo "VAAuto: VARootIO failed to open" 
               fi
	       if [ $BAD -eq "2" ]; then
	          echo "VAAuto: VARootIO failed to load"
	       fi
	       if [ $BAD -eq "2" ]; then
	          echo "VAAuto: VARootIO failed to find parameterizedEvntTree"
	       fi
	   #else
           #    echo 'VAAuto: '$FileName' OK! numEvents:' $BAD
	   fi 
	  } <CheckStage2FileOK.Result
	  rm CheckStage2FileOK.Result
         fi
         ###############################################################
         
         if [ -n "$GenerateDispSubLTListFiles" ]; then
           # echo '##########################################################'
           # echo '# GenerateDispSubLTListFiles'
	   # echo '##########################################################'
	   cd $lcl
	   echo $FileName >>$DispListName
         fi
         #******************************************************************
 

         ################################################
         #should all be done now. Go on to next combo.
         ##############################################
         let kpvar=$kpvar+1
        done
       let iwbl=$iwbl+1
      done
     kaz=$((kaz+1))
    done
   izn=$((izn+1))
  done
fi

###########################################################################

if [ -n "$GenerateSubLTListFiles" ]; then
   echo '##########################################################'
   echo '# GenerateSubLTListFiles'
   echo '##########################################################'
   cd $lcl
   date
   ListNames='SubLT'$1$Samples'Sample*Deg*noiseList'
   rm $ListNames
fi
#############################################################################

if [ -n "$GenerateSubLTConfigFiles" ]; then
   echo '##########################################################'
   echo '# GenerateSubLTConfigFiles'
   echo '##########################################################'
   cd $lcl
   date
   ConfigNames='SubLT'$1$Samples'Sample*Deg*noise'$HMode$CFG_LW'.config'
   rm $ConfigNames
   # *************************************************************************
   # Generate template config file
   # Change for KASCADE and Number of samples
   # *************************************************************************
   $VEGAS/showerReconstruction2/bin/produce_lookuptables -save_config_and_exit tmp1
   sed '/CorePositionFractionalErrorCut/s/100/.25/g' <tmp1 >tmp2
   sed '/CorePositionAbsoluteErrorCut/s/1000/20/g'   <tmp2 >tmp1
   sed '/LTC_SimulationType/s/GrISU/KASCADE/g'       <tmp1 >tmp2

   sed '/LTM_FillType "MEDIAN"/s/MEDIAN/MEAN/g'           <tmp2 >tmp1
   sed '/LTM_WidthFillType " "/s/" "/"'$CFG_LW'"/g'       <tmp1 >tmp2
   sed '/LTM_LengthFillType " "/s/" "/"'$CFG_LW'"/g'      <tmp2 >tmp1
   sed '/LTM_EaxisEnergyFillType " "/s/" "/"'$CFG_LW'"/g' <tmp1 >tmp2
  
   sed '/LTM_EnergyFillType " "/s/" "/"MEAN"/g'      <tmp2 >tmp1
   sed '/TelID        /s/TelID/TelID  '$TelIDStr'/g' <tmp1 >tmp2
   sed '/Azimuth      /s/Azimuth/Azimuth '$AzStr'/g' <tmp2 >tmp1
   sed '/Zenith         /s/Zenith/Zenith '$ZNStr'/g' <tmp1 >tmp2
   sed '/Noise         /s/Noise/Noise '$NoiseStr'/g' <tmp2 >tmp1
   sed '/luteOffset    /s/Offset/Offset '$ABOStr'/g' <tmp1 >tmp2
   sed '/Log10SizePerBin/s/0.04/0.07/g'              <tmp2 >tmp1
   sed '/ImpDistUpperLimit/s/400/800/g'	             <tmp1 >tmp2
   sed '/Log10EaxisEnergyUpperLimit/s/6/5/g'         <tmp2 >tmp1
   #Set the number of samples for noise
   sed '/LTM_WindowSizeForNoise/s/7/'$Samples'/g' <tmp1 >tmp2
   #Replace HillasBranchName argument
   sed '/HillasBranchName "H"/s/"H"/"'$HMode'"/g'    <tmp2 >config1.tmp
fi
########################################################################

if [ -n "$ProduceSubLookupTables" ]; then
   echo '##########################################################'
   echo '# ProduceSubLookupTables'
   echo '##########################################################'
   cd $lcl
   date
fi  
########################################################################

if [ -n "$HTARPedVarZnOffsetToArchive" ]; then
   echo '##########################################################'
   echo '# HTARPedVarZnOffsetToArchive'
   echo '##########################################################'
   cd $lcl
   date
fi  
##############################################################################
if [ -n "$HTARPedVarZnOffsetFromArchive" ]; then
   echo '##########################################################'
   echo '# HTARPedVarZnOffsetFromArchive'
   echo '##########################################################'
   cd $lcl
   date
fi  
##############################################################################
if   [ -n "$CombineSubLT" ]; then
   echo '##########################################################'
   echo '# CombineSubLT'
   echo '##########################################################'
   cd $lcl
   date
   LTFILENAME='lt'$LTFILENAMEBASE
   SubLTList='SubLTList'
   if [ -e $lcl'/'$SubLTList ]; then
     rm $lcl'/'$SubLTList
   fi
fi
##############################################################################
if [ -n "$BuildLTTree" ]; then
   echo '##########################################################'
   echo '# BuildLTTree'
   echo '##########################################################'
   cd $VEGAS/showerReconstruction2/macros
   LTFILENAME='lt'$LTFILENAMEBASE
   date
   BUILDCONFIG='BuildTree'$Samples'Samples.config' 
   $VEGAS/showerReconstruction2/bin/buildTree -save_config_and_exit tmp1

   #**********************************************************************
   #Modify for this LT: except for TelID we need at least 2 to change things
   #**********************************************************************
   sed '/TelID        /s/TelID/TelID  '$TelIDStr'/g' <tmp1 >tmp2
   let iznEnd=${#Zenith[@]}
   let kazEnd=${#Azimuth[@]}
   let kpvarEnd=${#PedVar[@]}

   INFILE=tmp2
   OUTFILE=tmp1

   if [ ${#Azimuth[@]} -gt "1" ]; then
     sed '/Azimuth      /s/Azimuth/Azimuth '$AzStr'/g' <$INFILE >$OUTFILE
     TMPFILE=$INFILE
     INFILE=$OUTFILE
     OUTFILE=$TMPFILE
   fi
   
   if [ ${#Zenith[@]} -gt "1" ]; then
     sed '/Zenith         /s/Zenith/Zenith '$ZNStr'/g' <$INFILE >$OUTFILE
     TMPFILE=$INFILE
     INFILE=$OUTFILE
     OUTFILE=$TMPFILE
   fi
   if [ ${#PedVar[@]} -gt "1" ]; then
     sed '/Noise         /s/Noise/Noise '$NoiseStr'/g' <$INFILE >$OUTFILE
     TMPFILE=$INFILE
     INFILE=$OUTFILE
     OUTFILE=$TMPFILE
   fi
   if [ ${#WblOffset[@]} -gt "1" ]; then
     sed '/luteOffset    /s/Offset/Offset '$ABOStr'/g' <$INFILE >$OUTFILE
     TMPFILE=$INFILE
     INFILE=$OUTFILE
     OUTFILE=$TMPFILE
   fi
   mv $INFILE $BUILDCONFIG

   $VEGAS/showerReconstruction2/bin/buildTree '-config='$BUILDCONFIG $LTFILENAME 
fi

#################################################################################


##################################################################################
if [ -n "$GenerateSubLTConfigFiles" ]     || [ -n "$GenerateSubLTListFiles" ]      || \
   [ -n "$ProduceSubLookupTables" ]       || [ -n "$HTARPedVarZnOffsetToArchive" ] || \
   [ -n "$HTARPedVarZnOffsetFromArchive" ] || [ -n "$CombineSubLT" ]; then
   #****************************************************************************
   # For SubLT gen we make a seperate Sub LT config file for each of ZN Offset 
   # combination
   # we loop over Zn and Offset 
   #############################################################################

   #######################################################################
   #Zenith
   let izn=0
   let iznEnd=${#Zenith[@]}
   while test $izn -lt $iznEnd
     do
       Z=${Zenith[$izn]}
       #echo izn: $izn' Z: '$Z

       ####################################################################
       # Iterate over WBL Offsets
       ####################################################################
       #Wbl Offset
       let iwbl=0
       let iwblEnd=${#WblOffset[@]}
       while test $iwbl -lt $iwblEnd
         do
           WBL=${WblOffset[$iwbl]}
	   if [ "$WBL" !=  '0.0' ]; then
	     WBLSPEC=S$WBL'Wbl'
	   else
	     WBLSPEC=$WBL'Wbl'
	   fi

           #Construct the Sub Lt Config File Name
           SUBLTBASE='SubLT'$1$Samples'Sample'$Z'Deg'$WBLSPEC
           #echo SUBLTBASE: $SUBLTBASE
	   ConfigName=$SUBLTBASE'noise'$HMode$CFG_LW'.config'
	   ListName=$SUBLTBASE'noiseList'
	   SubLTFileName=$lcl'/'$SUBLTBASE$CFG_LW'.root'

           #**********************************************************
           if [ -n "$GenerateSubLTConfigFiles" ]; then
             #############################################################
             #Now we need to "edit the new config file
             #############################################################
             #Figure out what the Zenith argument should look like
             if test $izn -eq "0" 
              then
               Zn=${Zenith[izn]}','${Zenith[1]}
              else
               Zn=${Zenith[0]}','${Zenith[izn]}
             fi
	     #now replace Zenith argument and put in a tmp file
             sed '/Zenith/s/'$ZNStr'/'$Zn'/g' <config1.tmp >config2.tmp

             ##############################################################
             #Now do the same for the Offset but put in final file
 	      if test $iwbl -eq "0" 
              then
	        W=${WblOffset[$iwbl]},${WblOffset[1]}
              else
	        W=${WblOffset[0]},${WblOffset[$iwbl]}
              fi
             #now replace Offset argument and put in a final file
             sed '/luteOffset/s/'$ABOStr'/'$W'/g'  <config2.tmp >$ConfigName
             rm config2.tmp
           fi
           #********************************************************************


           if [ -n "$HTARPedVarZnOffsetToArchive" ]; then
             #*****************************************************************
             #For each of ZN Az, and  Offset combination we make a tar file of all
             #the files with that Zn Az and Offset and all  PedVar (9 files)
             ##################################################################
             # Make up Pedvar .tar file name
	     PedVarHTARFile='S2Zn'$Z'Deg2D'$WBLSPEC'AllPedVarAllAz'$1$2$3$4'.tar'
             PVFILESPEC='PedVar*'$1$2$3$4$Z{D,_45D,_90D,_135D,_180D,_225D,_270D,_315D}'eg2D'$WBLSPEC$8'1234M2.root'
              
             SubmitHtarToArchive $ARCHIVE$1$2$3$4'PedVarS2/'$PedVarHTARFile $lcl "$PVFILESPEC"
           fi
           #*********************************************************************

           if [ -n "$HTARPedVarZnOffsetFromArchive" ]; then
             #*****************************************************************
             #For each of ZN Az, and  Offset combination we recover a tar file of all
             #the files with that Zn Az and Offset and all  PedVar (9 files)
             ##################################################################
             # Make up Pedvar .tar file name
	     PedVarHTARFile='S2Zn'$Z'Deg2D'$WBLSPEC'AllPedVarAllAz'$1$2$3$4

             SubmitHtarFromArchive $ARCHIVE$1$2$3$4'PedVarS2/' $lcl $PedVarHTARFile 
           fi
           #*********************************************************************

	   if [ -n "$ProduceSubLookupTables" ]; then
             ####################################################################
             # Make up the job script file that will be submitted below
             ####################################################################
	     sgeFile=$lcl'/'$SUBLTBASE'.pbs'
             echo "#"PBS -l walltime=$WALLTIME            >$sgeFile
             if [ -n "$CARVER" ]; then
               echo "#PBS -l pvmem=15GB"                  >>$sgeFile
             fi
             if [ -n "$HANSEN" ]; then
               echo "#PBS -l mem=15GB"                   >>$sgeFile
               echo source /etc/profile                  >>$sgeFile
               echo module load gcc/4.7.2                >>$sgeFile
             fi
             echo cd $lcl                                >>$sgeFile
             echo $VEGAS/bin/produce_lookuptables \\     >>$sgeFile
             echo -config $lcl'/'$ConfigName \\          >>$sgeFile
             echo -cuts $LTCUTSFILE  \\                  >>$sgeFile
             echo  $lcl'/'$ListName   \\                 >>$sgeFile
             echo  $SubLTFileName  \\                    >>$sgeFile
             echo '>'$lcl'/'$SUBLTBASE'.log'             >>$sgeFile
             chmod 700 $sgeFile

             qsub -q $QUEUE -V -e $SUBLTBASE.qsub.err -o $SUBLTBASE.qsub.log  $sgeFile
            fi
           #*******************************************************************

	   if [ -n "$CombineSubLT" ]; then
             #*******************************************************************
             # Create the List of SubLT files to be combined
             #******************************************************************
	     # But first check that each file does exixt. We may want to test deeper
             # if this isn't enough later.
             ###################################################################
             if  [ ! -e "$SubLTFileName" ]; then
                echo 'VAAuto: Fatal--SubLT file '$SubLTFileName ' dose not exist'
                exit
             fi
             echo $SubLTFileName >>$lcl'/'$SubLTList
           fi
           #*******************************************************************


           #Azimuth
           let kaz=0
           let kazEnd=${#Azimuth[@]}
           while test $kaz -lt $kazEnd
             do
              #Make   Zn_Az string
              if test ${Azimuth[$kaz]} = "0"
               then
                ZnAz=$Z'Deg'
               else
                ZnAz=$Z'_'${Azimuth[$kaz]}'Deg'
              fi
 
              #Iterate through PedVars
             let kpvar=0
             while test $kpvar -lt $kpvarEnd
               do
                #Test for defaults
                PV=${PedVar[$kpvar]} 
 
                #********************************************************************

                if [ -n "$GenerateSubLTListFiles" ]; then
                  # echo '##########################################################'
                  # echo '# GenerateSubLTListFiles'
	          # echo '##########################################################'
                  BaseFile=$1$PMT$3$4$ZnAz'2D'$WBLSPEC$8
	          cd $lcl
	          FileName=PedVar$PV$BaseFile'1234M2.root'
	          echo $FileName >>$ListName
                fi
                #******************************************************************
           
                let kpvar=$kpvar+1
               done
             kaz=$((kaz+1))
            done
          let iwbl=$iwbl+1
         done
       izn=$((izn+1))
     done
fi
###########################################################################

#**********************************************************************
if [ -n "$CombineSubLT" ] ||  [ -n "$CombineDispSubLT" ]; then
   cd $VEGAS/showerReconstruction2/macros
   if [ ! -e "combineKASCADE_LT.C" ]; then
     cp $KASCADEBASE'/scripts/combineKASCADE_LT.C' .
   fi
   ###########################################################################
   #This file is loaded by the rootlogon.C in showerReconstruction2/macros

   ~/Switch.rootrcTo.rootrc_showerReconstruction2 
   #############################################################################
   # Make up a script to run on root batch mode
   #############################################################################
   Script='CombineSubLT.C'
   echo '{'                                                          >$Script
   echo '  combineFromList("'$lcl'/'$SubLTList'","'$LTFILENAME'");' >>$Script
   echo '}'                                                         >>$Script

   echo "VAAuto: Running root batch command to Create LT file:"
   echo "VAAuto: "$LTFILENAME
   echo "VAAuto: Do less combineKASCADE_LT.log, then F to see when it  finishes!"

   root -b -q $Script '>'$lcl'/CombineSubLT.log'  
fi

#*********************************************************************   
date
echo 'VAAuto: All done!'
