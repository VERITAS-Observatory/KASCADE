#!/bin/bash
#This script is used to automate the generation and processing of the veritas 
# KASCADE vbf files in 1:Noise levbels, LT and EA tables.

#It has some arguments listed below.
#$1: Command. Do "VAAuto.scr ListCommands" for a list!
#$2 ksProduction season spec: Ex: W or S
#$3 Array designation: W or OA or NA  or UA (Whipple, OldArray,NewArray, 
#   UpgradeArray) 
#  Note the UA.NA.OA extention also appears in argument $5
#$4 ksProduction Type spec: Ex:   G or  P or He4_ or CR or E
#$5 MDL designation for VBF files: Ex MDL10UA or MDL15NA
#$6 comma seperated list of ZN values: Ex 1,10,20,30,40,50,60,70 or "All
#$7 comma seperated list of AZ values: Ex 0,45,90,135,180,225,270,315 or "All"
#$8 wbl list Ex: 0.0,0.25,0.5,0.75,1.0  or "All"
#$9 Threshold: Ex 45mv or 50mv
#${10} PedVar list: 4.73, 5.55 6.51 or "All" or "Base"
#${11} Specifes Type of LT or DT table to use or make for LT,DT (Ex All or 050)
#      for S4 and EA gen add prticletype src of LT Ex. AllG or AllE or 050G or 050E. 
#      O50 and All default to Gamma type LT.
#${12} Stage4 file extention+Cuts extention:  Ex. UpgradeMedium or NewArrayHard
#      Default for LTCutsFile is LookUpTableStdCuts
#  For Quality cuts , file used would be $VEGAS/../tables/Quality${12}Cuts
#  For Stage4, filename would extention be:  ${12}Cuts ending
#  For ShowerCuts, file used would be $VEGAS/../tables/Shower${12}Cuts 
#${13} (Optional)  Single telescope to cut for Stage4 Gen and EA gen.Ex: T1 or 
#                  T2 or T3 or T4
# ************************************************************************

#FindNoiseLevels=enabled
LimitSubmissions=enabled # Enable if you want to submit more that 9 HTAR
MaxQsubsDefault=450      # jobs but only want 9 at a time to run (limit for 
                         # HTAR) Or you want to generate S2 or S4 files and 
                         # only make 450 submission in queue at one time
###################################################################################
function commandEnable()
{
  if [ "$1" = "ListCommands" ]; then
    usage
    echo '***VAAuto Valid Commands:'
    echo '    #------------------------        #------------------------'
    echo '    #  Stage 2 PedVar files          # Lookup Tables'
    echo '    #  Uses arguments $1-${10}       # Uses Argument $1-${11}'
    echo '    #------------------------        #------------------------'
    echo '    GetVBFFileFromArchive            GenerateSubLTListFiles'
    echo '    GenerateSimLaserFile             GenerateSubLTConfigFiles'
    echo '    GenerateStage2FromVBF            ProduceSubLookupTables'  
    echo '    CheckStage2Files                 CombineSubLT'     
    echo '    HTARPedVarZnOffsetS2ToArchive    BuildLTTree'
    echo '    HTARPedVarZnOffsetS2FromArchive  CheckLT'
    echo
    echo '    #------------------------        #------------------------'
    echo '    # Disp Lookup Tables             # Stage4'
    echo '    # Uses arguments $1-${11}        # Uses Arguments $1-${12};${13}Optional'
    echo '    #------------------------        #------------------------'
    echo '    GenerateDispSubLTListFiles       GenerateStage4FromStage2'
    echo '    GenerateDispSubLTConfigFiles     CheckStage4Files'
    echo '    ProduceDispSubLookupTables       HTARPedVarZnOffsetS4ToArchive'
    echo '    CombineDispSubLT                 HTARPedVarZnOffsetS4FromArchive'
    echo '    BuildDispLTTree'
    echo '    CheckDispLT'
    echo
    echo '    #------------------------           #------------------------'
    echo '    # EA Tables                         # Stage5'
    echo '    # Uses Argument $1-${12}            # Uses Arguments $1-${12}'
    echo '    #------------------------           #------------------------'
    echo '    GenerateEASubLTListAndConfigFiles   GenerateStage5CombinedFromStage4' 
    echo '    ProduceEASubLookupTables'
    echo '    CombineBuildCheckEALT'
    exit
  else
    if [ "$1" = "GetVBFFileFromArchive" ]; then eval $1=enable; return 0; fi;
    if [ "$1" = "GenerateSimLaserFile" ]; then eval $1=enable; return 0; fi;
    if [ "$1" = "GenerateStage2FromVBF" ]; then eval $1=enable; return 0; fi;  
    if [ "$1" = "CheckStage2Files" ]; then eval $1=enable; return 0; fi;     
    if [ "$1" = "HTARPedVarZnOffsetS2ToArchive" ]; then eval $1=enable; return 0; fi;
    if [ "$1" = "HTARPedVarZnOffsetS2FromArchive" ]; then eval $1=enable; return 0; fi;

    if [ "$1" = "GenerateSubLTListFiles" ]; then eval $1=enable; return 0; fi;         
    if [ "$1" = "GenerateSubLTConfigFiles" ]; then eval $1=enable; return 0; fi;       
    if [ "$1" = "ProduceSubLookupTables" ]; then eval $1=enable; return 0; fi;         
    if [ "$1" = "CombineSubLT" ]; then eval $1=enable; return 0; fi;
    if [ "$1" = "BuildLTTree" ]; then eval $1=enable; return 0; fi;
    if [ "$1" = "CheckLT" ]; then eval $1=enable; return 0; fi;

    if [ "$1" = "GenerateDispSubLTListFiles" ]; then eval $1=enable; return 0; fi;
    if [ "$1" = "GenerateDispSubLTConfigFiles" ]; then eval $1=enable; return 0; fi;
    if [ "$1" = "ProduceDispSubLookupTables" ]; then eval $1=enable; return 0; fi;
    if [ "$1" = "CombineDispSubLT" ]; then eval $1=enable; return 0; fi;
    if [ "$1" = "BuildDispLTTree" ]; then eval $1=enable; return 0; fi;
    if [ "$1" = "CheckDispLT" ]; then eval $1=enable; return 0; fi;

    if [ "$1" = "GenerateStage4FromStage2" ]; then eval $1=enable; return 0; fi; 
    if [ "$1" = "CheckStage4Files" ]; then eval $1=enable; return 0; fi;
    if [ "$1" = "HTARPedVarZnOffsetS4ToArchive" ]; then eval $1=enable; return 0; fi;  
    if [ "$1" = "HTARPedVarZnOffsetS4FromArchive" ]; then eval $1=enable; return 0; fi;

    if [ "$1" = "GenerateEASubLTListAndConfigFiles" ]; then eval $1=enable; return 0; fi;
    if [ "$1" = "ProduceEASubLookupTables" ]; then eval $1=enable; return 0; fi;
    if [ "$1" = "CombineBuildCheckEALT" ]; then eval $1=enable; return 0; fi;

    if [ "$1" = "GenerateStage5CombinedFromStage4" ]; then eval $1=enable; return 0; fi;
    echo ' VAAuto: Invalid Command: '$1
    echo ' VAAuto: Do "./VAAuto ListCommands" for a list of valid commands.'
    exit
  fi
}
################################################################################

function usage()
{
  echo '***VAAuto.scr usage:'
  echo ' $1: Command. Do "VAAuto.scr ListCommands" for a list!'
  echo ' $2: Season specicifaction Winter is ATM21 Summer is ATM22: Ex: W or S'
  echo ' $3: Array Cofig: Whipple,OldArray,NewArray,UpgradeArray:   Ex: W or OA or NA or UA'
  echo ' $4: Particle Type spec: Ex: G or P or He4_ or CR or E'
  echo ' $5: Kascade Detector Model for VBF files: Ex MDL10UA or MDL15NA or MDL8OA'
  echo ' $6: List of ZN values:   Ex: 1,10,20,30,40,50,60,70 or "All"'
  echo ' $7: List of AZ values:   Ex: 0,45,90,135,180,225,270,315 or "All"'
  echo ' $8: List of Wbl values:  Ex: 0.0,0.25,0.5,0.75,1.0  or "All"'
  echo ' $9: Threshold: Ex 45mv (for UA) or 50mv (for OA and NA)'
  echo ' ${10}: List of PedVar values: 4.73, 5.55 6.51 or "All" or "Base"'
  echo ' ${11}: Specifes Type of LT table to use. Ex. All or 050 or ALLE or AllG(same as All)'  
  echo ' ${12}: Cuts Ex: UpgradeLoose or UpgradeMedium or NewArrayHard or OldArraySoft'
  echo ' ${13}: (Optional) Tel to cut for Stage4 and EA gen. Ex: T1 or T2 or T3 or T4'
  echo
  echo ' EX: ./VAAuto.scr GenerateStage4FromStage2 W UA E MDL10UA 1,10,20 45,90,135 0.5 45mv All AllE UpgradeSoft'
  echo
}
#############################################################################

##############################################################################

function GetOptionValue()
#$1 Cuts file name
#$2 Option whose value we need to find
{
  OptionString=$2
  #echo 'Cuts File Name: '$1' Opt: '$OptionString
  {
    while read Opt OptionValue;
     do
      if  [ "$OptionString" = "$Opt" ]; then
         return
      fi
     done
   }<$1
}
##############################################################################      

function GenerateVBFName()
#$1 Particle type: SPECPART: G or E or P or He4_ or CR
#$2 Array  EX: UA or NA or OA
#$3 Season EX: W (Winter)  or S (Summer)
#$4 Zenith angle (Deg)
#$5 Azimuth angle (Deg)
#$6 Offset angle 
{
  #Primay Type:
  a=$1
  if [ "$a" = "P" ]; then
	PRIMARY=proton
  fi
  if [ "$a" = "He4_" ]; then
	PRIMARY=He4
  fi
  if [ "$a" = "G" ]; then
	PRIMARY=gamma
  fi
  if [ "$a" = "E" ]; then
	PRIMARY=electron
  fi
  if [ "$a" = "CR" ]; then
	PRIMARY=cosmicRay
  fi
  if [ ! -n "$PRIMARY" ]; then
     echo Invalid Primary Particle type: $a
     exit
  fi

  #Array type sapecification
  a=$2
  if [ "$a" = "UA" ]; then
     Epoch=V6_PMTUpgrade
     SimModel=MDL10UA
  fi
  if [ "$a" = "NA" ]; then
     Epoch=V5_T1Move
     SimModel=MDL15NA
  fi
  if [ "$a" = "OA" ]; then
     Epoch=V4_OldArray
     SimModel=MDL8OA
  fi
  if [ ! -n "$Epoch" ]; then
     echo Invalid array specification: $a
     exit
  fi

  #winter/summ season atm spec
  a=$3
  if [ "$a" = "W" ]; then
    SeasonID='21'
  fi
  if [ "$a" = "S" ]; then
    SeasonID='22'
  fi
  if [ ! -n "$SeasonID" ]; then
     echo Invalid winter/summer specification: $a
     exit
  fi 
  #echo SeasonID: $SeasonID 'for ' $3

  zenith=$4
  azimuth=$5
  if [ -n "$6" ]; then
     VBFoffsetID=$6
  fi

  ###################################################
  # Ready to build VBF file name (From OAWG 2.5 wiki page)
  ###################################################
  # [PrimaryType]_[SimModel]_[Epoch]_ATM[SeasonID]_[SimulationSource]_
  #zen[ZenithAngle]deg_az[AzimuthAngle]deg_[OffsetAngle]wobb.[VBFExtention]{

  VBFFILENAME=$PRIMARY'_'$SimModel'_'$Epoch'_ATM'$SeasonID'_KASCADE_zen'$zenith
  VBFFILENAME=$VBFFILENAME'deg_az'$azimuth'deg'
  if [ -n "$VBFoffsetID" ]; then
      VBFFILENAME=$VBFFILENAME'_'$VBFoffsetID'wobb'
  fi
  VBFFILENAME=$VBFFILENAME'.vbf'
return
}
##############################################################################
	

function GenerateEAFileName()
#$1 Cuts Ex: UpgradeSoft  or OldArrayMedium
#$2 Season EX: W (Winter)  or S (Summer)
#$3 Offset id: Ex; All or 050
#$4 Method: Ex: std or hfit or disp
#$5 TelConfig: Ex: 1234(ignored) 123X or X234 or 1X34 or 1X3X or etc.
#$6 Particle type: Blank if gamma otherwise: Ex: Electrons or CosmicRays
{
  Cuts=$1
  SimModel=Jan2013
  a=${Cuts:0:1}
  if [ "$a" = "U" ]; then
     Epoch=V6_PMTUpgrade
     SimModel=MDL10UA
  fi
  if [ "$a" = "N" ]; then
     Epoch=V5_T1Move
     SimModel=MDL15NA
  fi
  if [ "$a" = "O" ]; then
     Epoch=V4_OldArray
     SimModel=MDL8OA
  fi

  if [ "$2" = "W" ]; then
    SeasonID='21'
  fi
  if [ "$2" = "S" ]; then
    SeasonID='22'
  fi
  echo SeasonID: $SeasonID 'for ' $2
  offsetID=$3

  #############################
  # Make up quality factor file name
  #############################
  tbl=$VEGAS'/../tables/'
  GetOptionValue $tbl'Quality'$Cuts'Cuts'  SizeLower  #sets OptionValue
  sizeCut=${OptionValue:2}                       #Drop "0/"

  telescopeMultiplicity=t2                #Multiplicity (2 tels trigger, OA ?)
  method=$4
  
  GetOptionValue  $tbl'Shower7Sample'$Cuts'Cuts'  MeanScaledWidthUpper  #sets OptionValue
  
  MSWUpperCut=$OptionValue            #Tricky way to replace a "." with a "p"

  GetOptionValue  $tbl'Shower7Sample'$Cuts'Cuts'  MeanScaledLengthUpper  #sets OptionValue
  MSLUpperCut=$OptionValue
  
  GetOptionValue  $tbl'Shower7Sample'$Cuts'Cuts'  MaxHeightLower  #sets OptionValue
  if [ "$OptionValue" != "-100" ]; then           #check if not used
      MaxHeightLowerCut=$OptionValue     #will remain undefined if not used
  fi

  GetOptionValue  $tbl'Shower7Sample'$Cuts'Cuts'  ThetaSquareUpper
  ThetaSquareUpperCut=$OptionValue

  TelConfiguration=$5
  if [ "$5" != "1234" ]; then
     TELCONFIGURATION=$5
  fi   

  ###################################################
  # Ready to build file name (from OAWG 2.5 wiki page)
  ###################################################
# ea_[SimModel]_[Epoch]_ATM[SeasonID]_[SimulationSource]_[PrimaryType]_vegasv250rc5_
# 7sam_[offsetID]off_s[sizeCut]t[telescopeMultiplicity]_[method]_MSW[MSW upper cut]_
# MSL[MSL upper cut]_MH[Max height lower cut]_ThetaSq[Theta square upper cut]_LZA.root

# ea_[array]_ATM[SeasonID]_[SimulationTool]_[SimulationToolVersion]_
# [DetectorModelID]_[Primary]_vegasv250rc5_7sam_[offsetID]off_
# s[sizeCut][telescopeCut]_[method]_MSW[MSW upper cut]_MSL[MSL upper cut]_
# MH[Max height lower cut]_ThetaSq[Theta square upper cut]_LZA.root


  EAFILENAME='ea_'$SimModel'_'$Epoch'_ATM'$SeasonID'_KASCADE_'
  if  [ -n "$6" ]; then                             #PrimaryType
     EAFILENAME=$EAFILENAME$6'_'
  fi

  EAFILENAME=$EAFILENAME'vegasv250rc5_7sam_'$offsetID'off_'
  EAFILENAME=$EAFILENAME's'$sizeCut$telescopeMultiplicity'_'$method'_MSW'
  EAFILENAME=$EAFILENAME$MSWUpperCut'_MSL'$MSLUpperCut'_'

  if [ -n "$MaxHeightLowerCut" ]; then
    EAFILENAME=$EAFILENAME'MH'$MaxHeightLowerCut'_'
  fi
 
  EAFILENAME=$EAFILENAME'ThetaSq'$ThetaSquareUpperCut'_'

  if [ -n "$TELCONFIGURATION" ]; then
    EAFILENAME=$EAFILENAME'T'$TELCONFIGURATION'_'
  fi
  EAFILENAME=$EAFILENAME'LZA.root'
  return
}
##################################################################################
function GenerateLTFileName()
#$1 Array  EX: UA or NA or OA
#$2 Season EX: W (Winter)  or S (Summer)
#$3 Offset id: Ex; All or 050
#$4 Method: Ex: std or hfit or disp
#$5 Particle type: Blank if gamma otherwise: Ex: Electrons or CosmicRays
{
  a=$1
  if [ "$a" = "UA" ]; then
     Epoch=V6_PMTUpgrade
     SimModel=MDL10UA
  fi
  if [ "$a" = "NA" ]; then
     Epoch=V5_T1Move
     SimModel=MDL15NA
  fi
  if [ "$a" = "OA" ]; then
     Epoch=V4_OldArray
     SimModel=MDL8OA
  fi

  if [ "$2" = "W" ]; then
    SeasonID='21'
  fi
  if [ "$2" = "S" ]; then
    SeasonID='22'
  fi
  echo SeasonID: $SeasonID 'for ' $2
  offsetID=$3
  echo offsetID: $offsetID


  #############################
  # LookuptableCuts file name
  #############################
  tbl=$VEGAS'/../tables/'
  GetOptionValue $tbl'LookupTableStdCuts'  DistanceUpper   #sets OptionValue
  distCut=${OptionValue:2}                       #Drop "0/"
  #leave in decimal points.   #distCut=${distCut/./p}#Convert "." to "p". Not sure why

  method=$4
  

  ###################################################
  # Ready to build file name (From OAWG 2.5 wiki page)
  ###################################################
# lt_[SimModel]_[Epoch]_ATM[SeasonID]_[SimulationSource]_[PrimaryType]_vegasv250rc5_
# 7sam_[offsetID]off_[method]_d[distCut]_LZA.root

  LTFILENAME='lt_'$SimModel'_'$Epoch'_ATM'$SeasonID'_KASCADE_'
  if  [ -n "$5" ]; then                                        #PrimaryType
     LTFILENAME=$LTFILENAME$5'_'
  fi

  LTFILENAME=$LTFILENAME'vegasv250rc5_7sam_'$offsetID'off_'$method'_d'$distCut'_'
  LTFILENAME=$LTFILENAME'LZA.root'
  echo LTFILENAME: $LTFILENAME
  return
}
##################################################################################

function CheckQsubSubmissions()
#$1  Max HTAR Qsubs active at one time
#$2  Running qsub List File name
{
  #############################################################
  # File RunningHtarQsubLogs.txt is a list of the names of the qsub.log files that
  # will be generated when the various running HTAR jobs complete.
  # Until then the jobs complete they don't exist.  We count the not existing files. 
  # If less than $1 files dont exist  whioch means the jobs are still active, we 
  # sleep for 60 seconds and try again. When a job is found to exist it is 
  # removed from the List file and this function returns so a new submission can be 
  # made. Other wise the code just sits here.
  ################################################################
  RunningQsubListFile=$2   
  RunningQsubListTmp=$2'.tmp'
  if [ ! -e "$RunningQsubListFile" ]; then  #empty (just starting up)
     #echo no $RunningQsubListFile
     return
  fi
  if [ -e "$RunningQsubListTmp" ]; then
      rm $RunningQsubListTmp
  fi

  let count=$1
  while test $count -ge  $1 
   do
    let count=0
    {
      while  read QsublogFile;  
       do
	 if [ !  -e "$QsublogFile" ]; then
	   let count=count+1
           echo $QsublogFile >>$RunningQsubListTmp
         fi
       done
    } < $RunningQsubListFile

    if [ -e "$RunningQsubListTmp" ]; then
	cp $RunningQsubListTmp  $RunningQsubListFile
	rm $RunningQsubListTmp
    else
	rm  $RunningQsubListFile
    fi

    if [ $count -ge $1 ]; then             #We are full, wait a bit and try again
	sleep 60
    fi
   done
}
####################################################################

function GetPedVars()
{
  RFile2=$1
  PVFile=$2
  #################################
  # We now need to run root in batch mode and get list of pedvars
  # and the max one
  #################################
  echo "{"                                                    >VAAuto.C
  echo 'VARootIO io("'$RFile'", true);'                      >>VAAuto.C
  echo 'io.loadTheRootFile();'                               >>VAAuto.C
  echo 'VAQStatsData *q = io.loadTheQStatsData();'           >>VAAuto.C
  echo 'std::ofstream ofs("PedVarBaseRatios.dat");'          >>VAAuto.C
  echo 'std::vector< double > ped;'                          >>VAAuto.C
  echo 'ped.Resize(4,0.0);'                                  >>VAAuto.C
  echo 'ped.at(0)=q->getCameraAverageTraceVarTimeIndpt(0,7)' >>VAAuto.C
  echo 'ped.at(1)=q->getCameraAverageTraceVarTimeIndpt(1,7)' >>VAAuto.C
  echo 'ped.at(2)=q->getCameraAverageTraceVarTimeIndpt(2,7)' >>VAAuto.C
  echo 'ped.at(3)=q->getCameraAverageTraceVarTimeIndpt(3,7)' >>VAAuto.C
  echo 'double max= *max_element(ped.begin(),ped.end());'    >>VAAuto.C
  echo 'ofs<<ped.at(0)<<" "<<ped.at(1)<<" ";'                >>VAAuto.C
  echo '   <<ped.at(2)<<" "<<ped.at(3)<<" ";'                >>VAAuto.C
  echo '   <<max<<std::endl;'                                >>VAAuto.C
  echo 'io.closeTheRootFile();'                              >>VAAuto.C
  echo '}'                                                   >>VAAuto.C

 # ~/Switch.rootrcTo.rootrc_glenn.scr
  root -q -b VAAuto.C  >VAAuto.C.log
}
######################################################################
function LoadPVOpt()
{
  BaseRat=$1
  PVBase=$2
  PVTar=$3
  NewRatioFile=$4
  NewOptFile=$5
  ############################################
  #We have to do some foalingpoint arithmatic and some semi-fancy
  #formatting, so lets do it in root
  ############################################
#  echo "{"                                                      >VAAuto.C
#  echo '  std::string line;'                                   >>VAAuto.C
#  echo '  std::ifstream iBR(\"'$BaseRat'\");'                  >>VAAuto.C
#  echo '  std::getline(iBR,line);'                             >>VAAuto.C
#  echo '  std::istringstream issBR(line);'                     >>VAAuto.C
#  echo '  std::vector< double > oldRat;'                       >>VAAuto.C
#  echo '  double Value;'                                       >>VAAuto.C
#  echo '  for(int i=0;i<4;i++){'                                >>VAAuto.C
#  echo '    issBR>>Value'                                      >>VAAuto.C
#  echo '    oldRat.push_back(Value);'                          >>VAAuto.C
#  echo '  }'                                                   >>VAAuto.C
#  echo '  std::ifstream iPVB(\"'$PVBase'\");'                  >>VAAuto.C
#  echo '  std::getline(iPVB,line);'                            >>VAAuto.C
#  echo '  std::istringstream issPVB(line);'                    >>VAAuto.C
#  echo '  std::vector< double > PVB;'                          >>VAAuto.C
#  echo '  for(int i=0;i<4;i++){'                                >>VAAuto.C
  #echo '    issPVB>>Value'                                     >>VAAuto.C
  #echo '    PVB.push_back(Value);'                             >>VAAuto.C
  #echo '  }'                                                   >>VAAuto.C
  #echo '  std::ofstream oRF(\"'$NewRatioFile'\");'             >>VAAuto.C
  #echo '  std::ofstream oOF(\"'$NewOptFile'\");'               >>VAAuto.C
  #echo '  oOF<<\"IncreasePedVarOption='                        >>VAAuto.C
  #echo '     <<\"\'-PaddingApp=PaddingCustom '                 >>VAAuto.C
  #echo '     << -P_MultiPedvarScaling='                        >>VAAuto.C
  #echo '  for(int i=0;i<4;i++){'                               >>VAAuto.C
  #echo '    Value=oldRat.at(i)*'$PVTar'/PVB.at(i);'            >>VAAuto.C
  #echo '    oOF<<i+1<<\"/\"<<Value;'                           >>VAAuto.C
  #echo '    oRF<<Value<<\" \";'                                >>VAAuto.C
  #echo '  }'                                                   >>VAAuto.C
  #echo '  oOF<<'\"\'\"<<std::endl;                             >>VAAuto.C 
  #echo '  oOF<<\"PedVarBase=\'PedVar'$PVTar'\"<<std::endl;'    >>VAAuto.C 
  #echo '  oRF<<std::endl;'                                     >>VAAuto.C
  #echo '}'                                                     >>VAAuto.C

  #~/Switch.rootrcTo.rootrc_glenn.scr
  root -q -b VAAuto.C  >VAAuto.C.log
}
###########################################################################
#########################################################################

function SubmitHtarToArchive()
{
  #$1 HTAR File Name (Includes Path)
  #$2 Disk Base Directory that has files we want to archive
  #$3 Filespec (with wildcards) of files we want to archive
  Destination=$1    #Archive htar file
  SourceDir=$2         #Disk Base Directory
  FileSpec=$3          #Files to archive
  

  echo Destination: $Destination
  echo SourceDir: $SourceDir
  echo FileSpec: "$FileSpec"
  HTARFileName=${Destination##*/}
  HTARFileName=${HTARFileName%%.tar}

  lcl=$PWD
  if [ -n "$LimitSubmissions" ]; then
    HTARDoneLog=$HTARFileName'HTARDone.log'     
    if [ -e "$HTARDoneLog" ]; then              #MaxHTARQsubs jobs are active 
	 rm $HTARDoneLog
    fi
  fi


  #build a submission .pbs file
  sgeFile=$lcl'/'$HTARFileName'To.pbs'
  echo "#"PBS -q $QUEUE                                            >$sgeFile
  echo "#"PBS -l walltime=04:00:00                                >>$sgeFile
  if [ -n "$HANSEN" ] || [ -n "$COATES" ]; then  
    echo source /etc/profile                                      >>$sgeFile
    echo module load gcc/4.7.2                                    >>$sgeFile
  fi
  echo cd $SourceDir                                              >>$sgeFile
  echo htar -cvf  $Destination'  '"$FileSpec" \\                  >>$sgeFile
  echo '>'$lcl'/'$HTARFileName'.log'                              >>$sgeFile
  if [ -n "$LimitSubmissions" ]; then
     echo 'echo Done >'$lcl'/'$HTARDoneLog                        >>$sgeFile
  fi
  chmod 700 $sgeFile

  if [ -n "$LimitSubmissions" ]; then
     CheckQsubSubmissions  $MaxHTARQsubs  $QsubLogs     #This will wait 
     echo $HTARDoneLog >>$QsubLogs                      #add the next one
  fi

  HTARpbsLog=$HTARFileName'HTARTo.pbs.log'
  HTARLOG=$lcl'/VAHTARTo.log'
  qsub$QSUBEXT -V -e $HTARFileName'To.pbs.err' -o HTARpbsLog $sgeFile >$HTARLOG

  #####################################################################
  # We are now going to wait for the htar to finish.
  #####################################################################

  if [ -n "$HANSEN" ]; then
   echo "VAAuto: htar to archive "$HTARFileName" job submission to Hansen "$QUEUE" queue complete."
  fi
  if [ -n "$COATES" ]; then
   echo "VAAuto: htar to archive "$HTARFileName" job submission to Coates "$QUEUE" queue complete."
  fi

  if [ -n "$CARVER" ]; then
   echo "VAAuto: htar to archive "$HTARFileName" job submission to Carver cluster complete."
  fi

  if [ -n "$EDISON" ]; then
   echo "VAAuto: htar to archive "$HTARFileName" job submission to Edison cluster complete."
  fi
  date
  cd $lcl
}
#########################################################################
function SubmitHtarFromArchive()
{
  #$1 Archive directory wqhere our tar file exists
  #$2 Destination directory where we want to unTar into.
  #$3 name of the Tar file we want to untar(without .tar extention).

  local=$PWD

  ArchiveDir=$1          #Archive direxctory
  DestinationDir=$2      #Base Disk directory
  Source=$3              #Base Tar file name
  SourceTarFile=$3'.tar'

  echo 'Src: '$ArchiveDir'/'$SourceTarFile 
  if [ -n "$LimitSubmissions" ]; then
    HTARDoneLog=$Source'HTARDone.log'     
    if [ -e "$HTARDoneLog" ]; then              #MaxHTARQsubs jobs are active 
	 rm $HTARDoneLog
    fi
  fi

  #build a submission .pbs file
  sgeFile=$lcl'/'$Source'From.pbs'
  echo "#"PBS -q $QUEUE                                     >$sgeFile
  echo "#"PBS -l walltime=04:00:00                         >>$sgeFile
  if [ -n "$HANSEN" ]  || [ -n "$COATES" ]; then
    echo source /etc/profile                               >>$sgeFile
    echo module load gcc/4.7.2                             >>$sgeFile
  fi
  echo cd $DestinationDir                                  >>$sgeFile
  echo htar -xvf  $ArchiveDir'/'$SourceTarFile    \\       >>$sgeFile
  echo '>'$local'/'$Source'.log'     >>$sgeFile
  if [ -n "$LimitSubmissions" ]; then
     echo 'echo Done >'$lcl'/'$HTARDoneLog                 >>$sgeFile
  fi

  if [ -n "$LimitSubmissions" ]; then
     CheckQsubSubmissions  $MaxHTARQsubs $QsubLogs  #This will wait 
     echo $HTARDoneLog >>$QsubLogs #add the next one
  fi

  chmod 700 $sgeFile
  HTARpbsLog=$Source'HTARFrom.pbs.log'
  HTARLOG=$local'/KSHTAR'$ZnAz'From.log'
  qsub$QSUBEXT -V -e $Source'HTARFrom.pbs.err' -o $HTARpbsLog $sgeFile >$HTARLOG

  # And now cleanup
  cd $lcl
}
##########################################################################

function SubmitVegasSimProduction()
{
  FilePedVar=$1
  if [ "$FilePedVar" = "NONE" ]; then
      FilePedVar=""
  else
    if [ ! -e "$lcl"/"$FilePedVar" ]; then
      cp $KASCADEBASE/inputs/$FilePedVar $lcl/
      if [ ! -e "$lcl"/"$FilePedVar" ]; then
        echo 'VAAUTO: SubmitVegasSimProduction requires file' $FilePedVar
        echo 'VAAuto: FFatal!--Attemp to copy ' $KASCADEBASE'/inputs/'$FilePedVar' to '$lcl'/ Failed!'
        exit
      fi 
    fi
  fi
  FileBase=$2
  VEGASScript=$3
  FileVBF=$4
  if [ -n "$LimitSubmissions" ]; then
    VEGASDoneLog=$FilePedVar'_'$FileBase'Done.log'     
    if [ -e "$VEGASDoneLog" ]; then              #Max queue jobs are active 
	 rm $VEGASDoneLog
    fi
  fi
  
  echo 
  sgeFile=$lcl'/'$FilePedVar$FileBase'.pbs'
  echo "#"PBS -l walltime=$WALLTIME                >$sgeFile
  echo "#PBS -l "$MEMREQUEST                      >>$sgeFile
  if [ -n "$CARVER" ]; then
    echo "#PBS -l nodes=1:ppn=1"                   >>$sgeFile
  fi
  if [ -n "$HANSEN" ] || [ -n "$COATES" ]; then
    echo source /etc/profile                      >>$sgeFile
    echo module load gcc/4.7.2                    >>$sgeFile
  fi
  echo cd $lcl                                    >>$sgeFile
  echo $lcl'/'$VEGASScript  \\                    >>$sgeFile
  echo $FileVBF  $FilePedVar \\                   >>$sgeFile
  echo ' >'$lcl'/'$FilePedVar'_'$FileBase'VBF.log'   >>$sgeFile
  if [ -n "$LimitSubmissions" ]; then
     echo 'echo Done >'$lcl'/'$VEGASDoneLog       >>$sgeFile
  fi
  if [ -n "$LimitSubmissions" ]; then
     CheckQsubSubmissions  $MaxQsubs $QsubLogs   #This will wait 
     echo $VEGASDoneLog >>$QsubLogs #add the next one
  fi

  chmod 700 $sgeFile
  qsub$QSUBEXT -q $QUEUE  -V -e $FilePedVar$FileBase'.err' -o $FilePedVar$FileBase'pbs.log' $sgeFile 
}
################################################################################### 

GetUniqueNumber()
{
  #use combo of process id ($$)and number of nanosec(date +%N) since last 
  #second tick to get unique value. (least count is micro sec at best)
  let UNIQUE=$(date +10#%N)+$$     # The 10# prevents leading 0's causeing errors
}
####################################################################################



#Main Program:

if [ ! -n "$1" ]; then
  commandEnable "ListCommands"   #List all commands and exits 
fi

commandEnable $1   #This will enable the specified command or exit if its not a 
                   #known command.

lcl=$PWD
SPECSEA=$2
SPECCFG=$3
SPECPART=$4
SPECMDL=$5
SPECZN=$6
SPECAZ=$7
SPECWBL=$8
SPECTHR=$9
SPECPV=${10}
LTWBL=${11}
CUTTYPE=${12}
TELCUT=${13}




###########################
#Winter/Summer
###########################
if [ "$SPECSEA" = "W" ]; then
    LTATM="ATM21"
fi
if [ "$SPECSEA" = "S" ]; then
    LTATM="ATM22"
fi

############################
# Array seaon
############################
if [ "$SPECCFG" = "UA" ]; then
    PMT="U"
    LTSEASON="ua"
fi
if [ "$SPECCFG" = "OA" ]; then
    PMT="O"
    LTSEASON="oa"
fi
if [ "$SPECCFG" = "NA" ]; then
    PMT="N"
    LTSEASON="na"
fi
if [ "$SPECCFG" = "W" ]; then
    PMT=$SPECCFG
fi
############################
len=${#LTWBL}
if [ "$len" != "3" ]; then
   PART=${LTWBL:3:1}
   LTWBL=${LTWBL:0:3}
   if [ "$PART" = "E" ]; then
     LTPARTTYPE=Electrons
     echo LTPARTTYPE for LT: $LTPARTTYPE
   fi
fi


source /etc/profile

host=$(hostname)
echo host: $host

hostString=${host:0:6}
if test  "$hostString" = "edison"  #Are we running on Edison
then
  EDISON=enabled
  JobIDHost='edison'
  QUEUE=serial
  QSUBEXT='.serial'
  ARCHIVE=/home/u/u15013/$SPECMDL'/'
  WALLTIME=30:00:00
  VBFDir=$ARCHIVE$SPECSEA$PMT$SPECPART$SPECMDL'VBF'     
  MEMREQUEST='vmem=8GB'
  echo '***Edison Cluster***'
fi

hostString=${host:0:6}
if test  "$hostString" = "cvrsvc"  #Are we running on Carver
    then
    CARVER=enabled
    JobIDHost='cvrsvc'
    QUEUE=serial
    WALLTIME=30:00:00
    ARCHIVE=/home/u/u15013/$SPECMDL'/'
    VBFDir=$ARCHIVE$SPECSEA$PMT$SPECPART$SPECMDL'VBF'     
    MEMREQUEST='pvmem=15GB'
    echo '***Carver Cluster***'
fi

hostString=${host:0:6}
if test  "$hostString" = "hansen"  #Are we running on Hansen
    then
    HANSEN=enabled
    ARCHIVE=/archive/fortress/group/veritas/simulations/
    VBFDir=$ARCHIVE'/gammas/'$SPECSEA$PMT$SPECPART$SPECMDL'VBF'
    JobIDHost='hansen-adm'
    QUEUE=physics
    WALLTIME=30:00:00
    MEMREQUEST='mem=15GB'
  #QUEUE=standby
  #WALLTIME=04:00:00
    echo ***Hansen Cluster***
fi

hostString=${host:0:6}
if test  "$hostString" = "coates"  #Are we running on Coates?
    then
    COATES=enabled
    ARCHIVE=/archive/fortress/group/veritas/simulations/
    VBFDir=$ARCHIVE'/gammas/'$SPECSEA$PMT$SPECPART$SPECMDL'VBF'
    JobIDHost='coates-adm'
    QUEUE=physics
    WALLTIME=30:00:00
    MEMREQUEST='mem=15GB'
  #QUEUE=standby
  #WALLTIME=04:00:00
    echo ***Coates Cluster***
fi


########################################################################
#To find the Zn,AZ,Offset and Pedvar  combinations first put $SPECZN,$SPECAZ,$SPECWBL and $SPECPV 
#into arrays This is tricky. We save away the present Internal Filed Seperator
#and then set IFS to a comma. We then use the -a option with the read command 
#to read in our stings into arrays. Then we restore the IFS.
#########################################################################


SAVEIFS=$IFS

if [ $SPECZN = "All" ]; then
    Zenith=([0]=1 10 20 30 40 50 60 70)
else  
    IFS=, read -a Zenith <<< "$SPECZN"
fi

if [ $SPECAZ = "All" ]; then
    Azimuth=([0]=0 45 90 135 180 225 270 315)
else  
    IFS=, read -a Azimuth <<< "$SPECAZ"
fi

if [ $SPECWBL = "All" ]; then
    WblOffset=([0]=0.0 0.25 0.5 0.75 1.0 1.25 1.5 1.75 2.0)
else  
    IFS=, read -a WblOffset <<< "$SPECWBL"
    let iwblEnd=${#WblOffset[@]}
#    if [ "$iwblEnd" -eq "1" ]; then   #This code activated if only one offset
#	W=${WblOffset[0]}             #specified in command line
#        OFFSETID=${W:0:1}${W:2:1}
#        if [ "${#W}" = "3" ]; then
#	    OFFSETID=$OFFSETID'0'
#        else
#	    OFFSETID=$OFFSETID${W:3:1}  #This has problems and I think 
#                                        #OFFSETID is used only with EA tables
#        fi                              #and should be fixed.
#	if [ "$W" = "0.5" ]; then
#	    LTWbl="050"
#	else
#	    LTWbl="All"     #Logic here needs work but this will work for now
#	fi                  #If offset is 0.5 then LT 050off table is always 
#    else                    # used. Otherwise the Alloff table is used.
#	LTWbl="All"         #I think this is ok as 050 table is the same as the
#    fi                      #0.5deg entry in Alloff table.
fi


if [[ $SPECPV = "All" ]]; then
    if [ $SPECCFG = "UA" ]; then
      PedVar=([0]=4.73 5.55 6.51 7.64 8.97 10.52 12.35 14.49 17.00)
    fi
    if [ $SPECCFG = "NA" ] || [ $SPECCFG = "OA" ]; then
      PedVar=([0]=4.04 4.72 5.51 6.44 7.53 8.79 10.27 12.00)
    fi
else
    if [[ $SPECPV = "Base" ]]; then
	PedVar=([0]=0 )
    else
	IFS=, read -a PedVar <<< "$SPECPV"
    fi
fi
IFS=$SAVEIFS




###########################################################################

#Check if the is for 2D offsets, blank if not
if [ "$SPECPART" = "G" ] || [ "$SPECPART" = "E" ]; then
    OffSetSpec="2D"
fi

##########################################################################
#Some defaults
Samples=7
HMode=H

######################################
#SubLT bin ave mode for length, width and EaxisEnergy tables:Mean or MEDIAN
######################################
CFG_L=MEDIAN
CFG_W=MEAN
CFG_E=MEAN

if [ $HMode = "HFit" ]; then
    LTCUTSFILE=$VEGAS'/../tables/LookupTableHFit'
else
    LTCUTSFILE=$VEGAS'/../tables/LookupTable'
fi

if [ -n "$CUTTYPE" ]; then 
    LTCUTSFILE=$LTCUTSFILE$CUTTYPE'Cuts'
else
    LTCUTSFILE=$LTCUTSFILE'StdCuts'
fi
if [ -n "$ProduceSubLookupTables" ]; then
  if [ ! -e $LTCUTSFILE ]; then
	echo 'VAAuto: Fatal- Can not find file: '$LTCUTSFILE
	exit
    fi
fi

###############################################################
# LookupTableDispCuts file has:
#   DistanceUpper 0/1.38
#   NTubesMin 0/5
###############################################################
DISPLTCUTSFILE=$VEGAS'/../tables/LookupTableDispCuts'
if [ -n "$ProduceDispSubLookupTables" ]; then
    if [ ! -e $DISPLTCUTSFILE ]; then
	echo 'VAAuto: Fatal- Can not find file: '$DISPLTCUTSFILE
	exit
    fi
fi

EACUTSFILE=$VEGAS'/../tables/Shower'$Samples'Sample'$CUTTYPE'Cuts'
if [ -n "$ProduceEASubLookupTables" ]; then
  if [ ! -e $EACUTSFILE ]; then
     echo 'VAAuto: Fatal- Can not find file: '$EACUTSFILE
     exit
  fi
fi

#########################################
#Default stringa for the config files.
#########################################
TelIDStr=0,1,2,3
ZNStr=1,10,20,30,40,50,60,70
ABOStr=0.0,0.25,0.5,0.75,1.0,1.25,1.5,1.75,2.0
AzStr=0,45,90,135,180,225,270,315

if [ $SPECCFG = "UA" ]; then
   NoiseStr=4.73,5.55,6.51,7.64,8.97,10.52,12.35,14.49,17.00
fi
if [ $SPECCFG = "NA" ] || [ $SPECCFG = "OA" ]; then
   NoiseStr=4.04,4.72,5.51,6.44,7.53,8.79,10.27,12.00
fi


DTMWidthStr=0.04,0.06,0.08,0.1,0.12,0.14,0.16,0.2,0.25,0.35
DTMLengthStr=0.05,0.09,0.13,0.17,0.21,0.25,0.29,0.33,0.37,0.41,0.45,0.5,0.6,0.7,0.8

#ZNStr
let iznEnd=${#Zenith[@]}
if test $iznEnd -ne "8"
 then
  let izn=0
  ZNStr=${Zenith[$izn]}
  izn=$((izn+1))
  while test $izn -lt $iznEnd
   do
     ZNStr=$ZNStr','${Zenith[$izn]}
     izn=$((izn+1))
   done
fi

#ABOStr
let iwblEnd=${#WblOffset[@]}
if [ "$LTWBL" = "050" ]; then
    ABOStr=" "
else
  if test $iwblEnd -ne "9"
   then
    let iwbl=0
    ABOStr=${WblOffset[$iwbl]}
    iwbl=$((iwbl+1))
    while test $iwbl -lt $iwblEnd
      do
       ABOStr=$ABOStr','${WblOffset[$iwbl]}
       iwbl=$((iwbl+1))
      done
   fi
fi


#AzStr
let kazEnd=${#Azimuth[@]}
if test $kazEnd -ne "8"
 then
  let kaz=0
  AzStr=${Azimuth[$kaz]}
  kaz=$((kaz+1))
  while test $kaz -lt $kazEnd
   do
     AzStr=$AzStr','${Azimuth[$kaz]}
     kaz=$((kaz+1))
   done
fi

#NoiseStr
let kpvarEnd=${#PedVar[@]}
if test $kpvarEnd -ne "9"
 then
  let kpvar=0
  NoiseStr=${PedVar[$kpvar]}
  kpvar=$((kpvar+1))
  while test $kpvar -lt $kpvarEnd
   do
    NoiseStr=$NoiseStr','${PedVar[$kpvar]}
    kpvar=$((kpvar+1))
   done
fi
###############################################################################

#See if optional CutTelelescope in use for GenerateStage4 or GenerateEA
TelConfig=1234

if [ -n "$TELCUT" ]; then
   T=$TELCUT
   TT=${T:0:1}
   if [ "$TT" != "T" ]; then
     echo 'VAuto: Bad CutTelscope option: '$T' Allowed values:T1 or T2 or T3 or T4'
     exit
   fi
   let CutTel=${T:1:1}
   if [ "$CutTel" -lt "1" ] ||  [ "$CutTel" -gt "4" ]; then
     echo 'VAuto: Bad CutTlescope option: '$T' Allowed values:T1 or T2 or T3 or T4'
     exit
   fi
   #Clear TelConfig and fill it correctly with out cut tel.
   TelConfig=
   if [ "$CutTel" != "1" ] ; then
      TelConfig=1
   else
      TelConfig='-'
   fi
   if [ "$CutTel" != "2" ] ; then
      TelConfig=$TelConfig'2'
   else
      TelConfig=$TelConfig'-'
   fi
   if [ "$CutTel" != "3" ] ; then
      TelConfig=$TelConfig'3'
   else
      TelConfig=$TelConfig'-'
   fi
   if [ "$CutTel" != "4" ] ; then
      TelConfig=$TelConfig'4'
   else
      TelConfig=$TelConfig'-'
   fi
   echo 'VAAuto: Array configuration: '$TelConfig'  No '$TELCUT
fi
###############################################################################

if [ -n "$LimitSubmissions" ]; then
  if [ -n "$HTARPedVarZnOffsetS2ToArchive" ]   || 
     [ -n "$HTARPedVarZnOffsetS2FromArchive" ] ||
     [ -n "$HTARPedVarZnOffsetS4ToArchive" ]   || 
     [ -n "$HTARPedVarZnOffsetS4FromArchive" ]; then
      GetUniqueNumber
      QsubLogs='RunningHtarQsubLogs'$UNIQUE'.txt'
      let MaxHTARQsubs=9
      echo "VAAuto: HTAR qsub active submissions being limited to " $MaxHTARQsubs 
  fi
  if [ -n "$GenerateSimLaserFile" ] || [ -n "$GenerateStage2FromVBF" ] || [ -n "$GenerateStage4FromStage2" ] || [ -n "$GenerateStage5CombinedFromStage4" ]; then
      GetUniqueNumber
      QsubLogs='RunningVegasQsubLogs'$UNIQUE'.txt'
      let MaxQsubs=$MaxQsubsDefault
      echo "VAAuto: Overall qsub active submissions being limited to " $MaxQsubs 
  fi

  if [ -e "$QsubLogs" ]; then
      rm $QsubLogs                     #Just some cleanup if previous run died.
  fi
fi

############################################################################
# Sim Laser generation
############################################################################

if [ -n "$GenerateSimLaserFile" ]; then
    echo '##########################################################'
    echo '# GenerateSimLaserFile '
    echo '##########################################################'
    cd $lcl
    date
    ####################################################################
    #Generate a sim laser file 
    ####################################################################
    #Make sure VegasSimProduction.scr is set up correctly to get simLaser  
    cp $KASCADEBASE/scripts/VegasSimProduction.scr VegasSimProductionLaser.scr

    #####################################################################
    sed '/#Stage1Laser=enable/s/#Stage1Laser/Stage1Laser/g' \
                                        < VegasSimProductionLaser.scr >tmp1
    sed '/Stage1Data=enable/s/Stage1Data/#Stage1Data/g'      <tmp1 >tmp2
    sed '/Stage2=enable/s/Stage2/#Stage2/g'                  <tmp2 >tmp1
    sed '/Stage4=enable/s/Stage4/#Stage4/g'                   <tmp1 >tmp2
    sed '/Stage5=enable/s/Stage5/#Stage5/g' \
                                         <tmp2 >VegasSimProductionLaser.scr
    rm tmp1
    rm tmp2
    ####################################################################
       
    echo "VAAuto: Running VegasSimProductionLaser for simLaser generation"
    echo "VAAuto: This takes a couple of minutes"
    ./VegasSimProductionLaser.scr  DummyFileName >$lcl'/SimLaserFile.log'
    echo "VAAuto: simLaser.root generated"
fi
#############################################################################

if [ -n "$GenerateStage2FromVBF" ]; then
    echo '##########################################################'
    echo '# GenerateStage2FromVBF'
    echo '##########################################################'
    cd $lcl
    date
    #Make sure VegasSimProduction.scr is set up correctly to get  
    #Stage1 and Stage2
    GetUniqueNumber
    VSProdFile=VegasSimProductionS1S2.$UNIQUE'.scr'

    if [ ! -e "$VSProdFile" ]; then
     cp $KASCADEBASE/scripts/VegasSimProduction.scr $VSProdFile

     #The standard VegasSimProduction.scr should have all options 
     #turned off.  We just have to make sure only stages 1 and 2 get run
     #??????Sample size:We will need to set integration window size if 
     #different from 7?????? Not implimented yet.
     ##################################################################
     sed '/Stage1Laser=enable/s/Stage1Laser/#Stage1Laser/g' \
                                          < $VSProdFile >tmp1
     sed '/#Stage1Data=enable/s/#Stage1Data/Stage1Data/g'        <tmp1 >tmp2
     sed '/#Stage2=enable/s/#Stage2/Stage2/g'                    <tmp2 >tmp1
     sed '/Stage4_2=enable/s/Stage4/#Stage4/g'                     <tmp1 >tmp2
     sed '/Stage5=enable/s/Stage5/#Stage5/g' \
                                           <tmp2 >$VSProdFile
     chmod 755 $VSProdFile
     
     rm tmp1
     rm tmp2
    fi
    #############################################################################
    # Stage 2 only needs shorter time if Carver (may let us get nodes easier)
    #############################################################################
    WALLTIME=15:00:00
    if [ -n "$CARVER" ]; then
	MEMREQUEST="pvmem=8GB"
    else
	MEMREQUEST="mem=8GB"
    fi
fi
############################################################################

if [ -n "$GenerateStage4FromStage2" ]; then
    echo '##########################################################'
    echo '# GenerateStage4FromStage2'
    echo '##########################################################'
    cd $lcl
    date
    #Make sure VegasSimProduction.scr is set up correctly to get  
    #Stage4

    GetUniqueNumber
    VSProdFile=VegasSimProductionS4.$UNIQUE'.scr'

    cp $KASCADEBASE/scripts/VegasSimProduction.scr $VSProdFile

    ###################################################################
    #The standard VegasSimProduction.scr should have all options 
    #turned off.  We just have to make sure only stage 1 gets run
    #Sample size:We will need to set integration window size if 
    #different from 7.
    ##################################################################
    sed '/Stage1Laser=enable/s/Stage1Laser/#Stage1Laser/g' \
                                          < $VSProdFile  >tmp1
    sed '/Stage1Data=enable/s/Stage1Data/#Stage1Data/g'        <tmp1 >tmp2
    sed '/Stage2=enable/s/Stage2/#Stage2/g'                    <tmp2 >tmp1
    sed '/#Stage4_2=enable/s/#Stage4_2/Stage4_2/g'                   <tmp1 >tmp2
    sed '/Stage5=enable/s/Stage5/#Stage5/g'                    <tmp2 >tmp1

    ######################################################################
    #  Check to see if we are to exclude a telescope from the stage4 analysis
    ######################################################################
    if [ -n "$CutTel" ]; then
     sed '/CutTelescopeOption=/s/#CutTel/CutTel/g'              <tmp1 >tmp2
     sed '/CutTelescopeOption=/s/=0/='$CutTel'/g'               <tmp2 >tmp1
    fi

    ######################################################################
    # If this is an Old Array run, enable the TelCombosToDeny=T1T4
    ######################################################################
    if  [ $SPECCFG = "OA" ]; then
      sed '/TelCombosToDeny=T1T4/s/#Deny/Deny/g'  <tmp1 >tmp2 
      cp tmp2 tmp1
    fi

    ######################################################################
    # We also need to set the quality cuts file and the file extention and the 
    # LT name
    ####################################################################

    QUALITYCUTSFILE=Quality$CUTTYPE'Cuts'
    cp $VEGAS/../tables/$QUALITYCUTSFILE .

    FILEBASE=$CUTTYPE'Cuts'
    GenerateLTFileName $SPECCFG $SPECSEA $LTWBL  'std' $LTPARTTYPE
    sed '/FileBase/s/StdCuts/'$FILEBASE'/g'                          <tmp1 >tmp2
    sed '/QualityCuts/s/QualityStdCuts/'$QUALITYCUTSFILE'/g'         <tmp2 >tmp1
    sed '/Table=LookupTable/s/LookupTable/'$LTFILENAME'/g'           <tmp1 >tmp2
    mv tmp2 $VSProdFile
    chmod 755  $VSProdFile
    rm tmp2
    #############################################################################
    # Stage 4 only needs short time
    #############################################################################
    WALLTIME=04:00:00
   if [ -n "$CARVER" ]; then
       MEMREQUEST="pvmem=8GB"
   else
       MEMREQUEST="mem=8GB"
   fi

    
fi
############################################################################

if [ -n "$GenerateStage5CombinedFromStage4" ]; then
    echo '##########################################################'
    echo '# GenerateStage5CombinedFromStage4'
    echo '##########################################################'
    cd $lcl
    date
    #Make sure VegasSimProduction.scr is set up correctly to get  
    #Stage5 combined tree

    GetUniqueNumber
    VSProdFile=VegasSimProductionS5.$UNIQUE'.scr'
    echo VSProdFile: $VSProdFile

    cp $KASCADEBASE/scripts/VegasSimProduction.scr $VSProdFile

    ###################################################################
    #The standard VegasSimProduction.scr should have all options 
    #turned off.  We just have to make sure only stage 1 gets run
    #Sample size:We will need to set integration window size if 
    #different from 7.
    ##################################################################
    sed '/Stage1Laser=enable/s/Stage1Laser/#Stage1Laser/g' \
                                          < $VSProdFile  >tmp1
    sed '/Stage1Data=enable/s/Stage1Data/#Stage1Data/g'        <tmp1 >tmp2
    sed '/Stage2=enable/s/Stage2/#Stage2/g'                    <tmp2 >tmp1
    sed '/Stage4_2=enable/s/Stage4_2/#Stage4_2/g'              <tmp1 >tmp2
    sed '/#Stage5=enable/s/#Stage5/Stage5/g'                   <tmp2 >tmp1

    SHOWERCUTSFILE=Shower7Sample$CUTTYPE'Cuts'
    FILEBASE=$CUTTYPE'Cuts'
    cp $VEGAS/../tables/$SHOWERCUTSFILE  .
    echo SHOWERCUTSFILE: $SHOWERCUTSFILE
    echo FILEBASE: $FILEBASE

    GetUniqueNumber
    QsubLogs='RunningMDLQsubLogs'$UNIQUE'.txt'

    ###############################################################################
    sed '/FileBase/s/StdCuts/'$FILEBASE'/g'                          <tmp1 >tmp2
    sed '/ShowerCutsFile=/s/ShowerStdCuts/'$SHOWERCUTSFILE'/g'           <tmp2 >tmp1
    #################################################################################
    # And set Method to combined for stage5
    # All OutputMethodOptions start out disabled (#). Disable a second time (#->##)
    # all output methods with RemoveCutEvents and the remove the single # from the 
    # combined one without a RemoveCutEvents.
    #################################################################################
    sed '/RemoveCutEvents/s/#OutputMethod/##OutputMethod/g'       <tmp1 >tmp2
    sed '/Method=combined/s/#OutputMethod/OutputMethod/g'         <tmp2 >tmp1

    mv tmp1 $VSProdFile
    chmod 755 $VSProdFile
    rm tmp2

fi
############################################################################

if [ -n "$CheckStage2Files" ]; then
  echo '##########################################################'
  echo '# CheckStage2Files'
  echo '##########################################################'
  if [ ! -e "CheckStage2FileOK.C" ]; then
     cp $KASCADEBASE/scripts/CheckStage2FileOK.C .
  fi
fi
############################################################################

if [ -n "$CheckStage4Files" ]; then
    echo '##########################################################'
    echo '# CheckStage4Files'
    echo '##########################################################'
    date 
    if [ ! -e "CheckStage4FileOK.C" ]; then
	cp $KASCADEBASE/scripts/CheckStage4FileOK.C .
    fi
    ~/Switch.rootrcTo.rootrc_glenn.scr
fi
############################################################################

if [ -n "$GenerateDispSubLTListFiles" ]; then
   echo '##########################################################'
   echo '# GenerateDispSubLTListFiles'
   echo '##########################################################'
   cd $lcl
   date
   DispListNames='DispSubLT'$SPECSEA$Samples'Sample*'$HMode'List'
   rm $DispListNames
fi
#############################################################################
if [ -n "$GenerateDispSubLTConfigFiles" ]; then
    echo '##########################################################'
    echo '# GenerateDispSubLTConfigFiles'
    echo '##########################################################'
    cd $lcl
    date
    ConfigNames='DispSubLT'$SPECSEA$Samples'Sample*Deg*noise'$HMode'.config'
    rm $ConfigNames
   # *************************************************************************
   # Generate template config file for the Disp tables
   # Change for KASCADE and Number of samples
   # Note: No DTM_TelID(All tel tables look identicle)  or 
   #       DTM_AbsoluteOffset (doesn't make sense for DTM) differences used
   # *************************************************************************
    $VEGAS/showerReconstruction2/bin/produceDispTables -save_config_and_exit tmp1
    sed '/DTC_SimulationType/s/GrISU/KASCADE/g'                  <tmp1 >tmp2
    sed '/DTM_FillType "MEDIAN"/s/MEDIAN/MEDIAN/g'               <tmp2 >tmp1
    sed '/DTM_Azimuth      /s/Azimuth/Azimuth '$AzStr'/g'        <tmp1 >tmp2
    sed '/DTM_Zenith         /s/Zenith/Zenith '$ZNStr'/g'        <tmp2 >tmp1
    sed '/DTM_Noise         /s/Noise/Noise '$NoiseStr'/g'        <tmp1 >tmp2
    sed '/DTM_Width         /s/Width/Width '$DTMWidthStr'/g'     <tmp2 >tmp1
    sed '/DTM_Length         /s/Length/Length '$DTMLengthStr'/g' <tmp1 >tmp2
    sed '/Log10SizePerBin/s/0.04/0.25/g'                         <tmp2 >tmp1
    sed '/Log10SizeUpperLimit/s/5.5/6.0/g'                       <tmp1 >tmp2
    sed '/RatioPerBin/s/0.05/1.0/g'                              <tmp2 >tmp1
   #Set the number of samples for noise
    sed '/DTM_WindowSizeForNoise/s/7/'$Samples'/g' <tmp1 >tmp2
   #Replace HillasBranchName argument
    sed '/HillasBranchName "H"/s/"H"/"'$HMode'"/g'    <tmp2 >config1.tmp
    
   ###########################################################################
   #Config settings not used:
   #sed '/DTM_FillType "MEDIAN"/s/MEDIAN/MEAN/g'                 <tmp2 >tmp1
   #sed '/GC_CorePositionFractionalErrorCut/s/100/.25/g'         <tmp1 >tmp2
   #sed '/GC_CorePositionAbsoluteErrorCut/s/1000/20/g'           <tmp2 >tmp1
   ###########################################################################
   # Disp cut file DispLookupTableStdCuts should only have:
   # -SizeLower=0/0
   # -DistanceUpper=0/1.38
   #-NTubesMin=0/5
   ###########################################################################
fi
########################################################################

if [ -n "$ProduceDispSubLookupTables" ]; then
   echo '##########################################################'
   echo '# ProduceDispSubLookupTables'
   echo '##########################################################'
   cd $lcl
   date
fi  
##############################################################################
if   [ -n "$CombineDispSubLT" ]; then
   echo '##########################################################'
   echo '# CombineDispSubLT'
   echo '##########################################################'
   cd $lcl
   date
   GenerateLTFileName $SPECCFG $SPECSEA $LTWBL  'std' $LTPARTTYPE
   LTFILENAME=dt${LTFILENAME#lt}           #Convert to a dt filename
   SubLTList='SubLTList'
   if [ -e $lcl'/'$SubLTList ]; then
     rm $lcl'/'$SubLTList
   fi
fi

########################################################################
# Specail test for SubLTables (LT and Disp): We need at least 2 specs for Az and 
# PedVar. This is a produce_lookuptable and produceDispTable "feature"
########################################################################
let kpvarEnd=${#PedVar[@]}
let kazEnd=${#Azimuth[@]}
let iznEnd=${#Zenith[@]}
let iwblEnd=${#WblOffset[@]}
if [ -n "$GenerateSubLTConfigFiles" ]     || [ -n "$GenerateSubLTListFiles" ] || \
   [ -n "$ProduceSubLookupTables" ]       || [ -n "$ProduceDispSubLookupTables" ] || \
   [ -n "$GenerateDispSubLTConfigFiles" ] || [ -n "$GenerateDispSubLTListFiles" ] || \
   [ -n "$ProduceEASubLookupTables" ]     || \
   [ -n "$GenerateEASubLTListAndConfigFiles" ]; then
   if test  $kazEnd -lt "1" 
   then
     echo 'VAAuto: Fatal! Need at least 2 Az values specified'
     #Note we could also just remove the AZ line in the config file!
     exit
   fi
   if test $kpvarEnd -lt "1"
    then
      echo 'VAAuto: Fatal! Need at least 2 PedVar values specified'
     #Note we could also just remove the Noise line in the config file!
      exit
   fi
   if test  $iznEnd -lt "1" 
    then
     echo 'VAAuto: Fatal! Need at least 2 Zn values specified'
     #Note we could also just remove the Zn line in the config file!
     exit
   fi
   #Allow one Offset(ie any number at all) (Comment out the following if then)
   #if test $iwblEnd -lt "1"
   # then
   #   echo 'VAAuto: Fatal! Need at least 2 Offset(Wbl) values specified'
   #  #Note we could also just remove the Noise line in the config file!
   #   exit
   #fi
fi
##########################################################################

MissingListName='CheckPedvarMissingList'
 
if [ -n "$GetVBFFileFromArchive" ]      || [ -n "$GenerateStage2FromVBF" ] || \
   [ -n "$CheckStage2Files" ]           || [ -n "$GenerateDispSubLTConfigFiles" ] || \
   [ -n "$GenerateDispSubLTListFiles" ] || [ -n "$ProduceDispSubLookupTables" ]   || \
   [ -n "$CombineDispSubLT" ]; then
   
 #############################################################################
 #now we loop over Zn,AZ WblOffset and PedVar
 #############################################################################
 #Zenith
 let izn=0
 let iznEnd=${#Zenith[@]}
 let iFilesNotFound=0
 while test $izn -lt $iznEnd
  do

   #Azimuth
   let kaz=0
   let kazEnd=${#Azimuth[@]}
   while test $kaz -lt $kazEnd
    do
     #Make   Zn_Az string
     AZ=${Azimuth[$kaz]}
     ZN=${Zenith[$izn]}
     if test $AZ = "0"
      then
       ZnAz=$ZN'Deg'
     else
       ZnAz=$ZN'_'$AZ'Deg'
     fi
     
     #Construct the Disp Sub Lt Config File Name
     DISPSUBLTBASE='DispSubLT'$SPECSEA$Samples'Sample'$ZnAz
     DispConfigName=$DISPSUBLTBASE$HMode'.config'
     DispListName=$DISPSUBLTBASE$HMode'List'
     DispSubLTFileName=$lcl'/'$DISPSUBLTBASE'.root'
     #####################################################################

     if [ -n "$GenerateDispSubLTConfigFiles" ]; then
       #############################################################
       #Now we need to "edit the new config file
       #############################################################
       #Figure out what the Zenith argument should look like
       if test $izn -eq "0" 
        then
         Zn=${Zenith[izn]}','${Zenith[1]}
       else
         Zn=${Zenith[0]}','${Zenith[izn]}
       fi
       #now replace Zenith argument and put in a tmp file
       sed '/DTM_Zenith/s/'$ZNStr'/'$Zn'/g' <config1.tmp >config2.tmp

       ############################
       #Now do the same for the Azimuth but put in final file
       ############################
       if test $kaz -eq "0" 
        then
	  Az=${Azimuth[$kaz]},${Azimuth[1]}
       else
	  Az=${Azimuth[0]},${Azimuth[$kaz]}
       fi
        #now replace Offset argument and put in a final file
       sed '/DTM_Azimuth/s/'$AzStr'/'$Az'/g'  <config2.tmp >$DispConfigName
       rm config2.tmp
     fi
     #********************************************************************

     if [ -n "$ProduceDispSubLookupTables" ]; then
       ####################################################################
       # Make up the job script file that will be submitted below
       ####################################################################
       sgeFile=$lcl'/'$DISPSUBLTBASE'.pbs'
       echo "#"PBS -l walltime=$WALLTIME                >$sgeFile
       echo "#PBS -l "$MEMREQUEST                      >>$sgeFile
       if [ -n "$HANSEN" ] || [ -n "$COATES" ]; then
         echo source /etc/profile                      >>$sgeFile
         echo module load gcc/4.7.2                    >>$sgeFile
       fi
       echo cd $lcl                                    >>$sgeFile
       echo $VEGAS/bin/produceDispTables \\            >>$sgeFile
       echo -config $lcl'/'$DispConfigName \\          >>$sgeFile
       echo -cuts $DISPLTCUTSFILE  \\                  >>$sgeFile
       echo  $lcl'/'$DispListName   \\                 >>$sgeFile
       echo  $DispSubLTFileName  \\                    >>$sgeFile
       echo '>'$lcl'/'$DISPSUBLTBASE'.log'             >>$sgeFile
       chmod 700 $sgeFile

       qsub$QSUBEXT -q $QUEUE -V -e $DISPSUBLTBASE.qsub.err -o $DISPSUBLTBASE.qsub.log $sgeFile
     fi
     #*******************************************************************
    
     if [ -n "$CombineDispSubLT" ]; then
       #*******************************************************************
       # Create the List of Disp SubLT files to be combined
       #******************************************************************
       # But first check that each file does exixt. We may want to test deeper
       # if this isn't enough later.
       ###################################################################
       if  [ ! -e "$DispSubLTFileName" ]; then
         echo 'VAAuto: Fatal--Disp SubLT file '$DispSubLTFileName ' does not exist'
         # exit
       fi
       echo $DispSubLTFileName >>$lcl'/'$SubLTList
     fi
     #******************************************************************

     ####################################################################
     # Iterate over WBLOffsets and PedVars
     ####################################################################
     #WblOffset
     let iwbl=0
     let iwblEnd=${#WblOffset[@]}
     while test $iwbl -lt $iwblEnd
      do
       WBL=${WblOffset[$iwbl]}
       if [ "$WBL" !=  '0.0' ]; then
        WBLSPEC=S$WBL'Wbl'
       else
        WBLSPEC=$WBL'Wbl'
       fi
 
       if [ "$SPECPART" = "CR" ]; then
           GenerateVBFName $SPECPART $SPECCFG $SPECSEA $ZN $AZ #No wbl for CR
       else
           GenerateVBFName $SPECPART $SPECCFG $SPECSEA $ZN $AZ $WBL
       fi
       BaseFileS2=${VBFFILENAME%%.vbf}
       ################################################################
	    
       if [ -n "$GetVBFFileFromArchive" ]; then
         echo '##########################################################'
         echo '# GetVBFFileFromArchive'
         echo '##########################################################'
	 cd $lcl
	 date
	 echo VBFFILENAME: $VBFFILENAME
	 echo VBFDIR: $ARCHIVE$SPECSEA$PMT$SPECPART$SPECMDL'VBF'
	 if [ ! -e  "$VBFFILENAME" ]; then
           hsi 'cd '$ARCHIVE$SPECSEA$PMT$SPECPART$SPECMDL'VBF; get '$VBFFILENAME';'
         fi
       fi
            
       ###############################################################

       #Iterate through PedVars
       let kpvar=0
       let kpvarEnd=${#PedVar[@]}
       while test $kpvar -lt $kpvarEnd
	do
         #Test for defaults
         PV=${PedVar[$kpvar]} 
         if test "$PV" = "0"
          then
           PedVarFile="NONE"
           PedVarName=""
         else
           PedVarFile=Ped$SPECCFG$PV
           PedVarName=PedVar$PV
         fi  
   
         # ************************************************************************
         #  Now all the things we can do for a particular Zn,AZ,WblOffset and PedVar
         # ************************************************************************
         #Generate  file names
 
         FileName=$PedVarName'_'$BaseFileS2'.root'
         

         if [ -n "$GenerateStage2FromVBF" ]; then
          #echo '##########################################################'
          #echo '# GenerateStage2FromVBF '
 	  #echo '##########################################################'
	  cd $lcl
	  date
	  echo PedVarFile: $PedVarFile
      
          echo "VAAuto: Submitting VegasSimProductionS1S2 to '$QUEUE' queue for " $lcl'/'$VBFFILENAME 
	  SubmitVegasSimProduction $PedVarFile $BaseFileS2 $VSProdFile $VBFFILENAME

	 fi
         ###############################################################


         if [ -n "$CheckStage2Files" ]; then
          # echo '##########################################################'
          # echo '# CheckStage2Files'
	  # echo '##########################################################'
	   cd $lcl
	     
          #Check VARootIO can open and load file 
	   ~/Switch.rootrcTo.rootrc_glenn.scr
	   Arg=$lcl'/CheckStage2FileOK.C("'$FileName'")'
	   echo Arg: $Arg 

	   if [ -e  "CheckStage2FileOK.Result" ]; then
	       rm "CheckStage2FileOK.Result"
	   fi
	   let TimeWaited=0

	   root -q -b -q $Arg  >CheckStage2OK.log

	   if [ !  -e  "CheckStage2FileOK.Result" ]; then
	       echo 'VAAuto: root CheckStage2FileOK.C failed to produce CheckStage2FileOK.Result'
	       echo 'VAAuto: Check to see if another VAAuto is running: ps aux'
	       echo "Bad: "$FileName
	       cat CheckStage2OK.log
	   else

	       {
		   read BAD
		   let suzBAD=$BAD
		   if [ $suzBAD -lt "0" ]; then
		       echo "Bad: "$FileName
		       if [ $suzBAD -eq "-1" ]; then
			   echo "VAAuto: VARootIO failed to open" 
		       fi
		       if [ $suzBAD -eq "-2" ]; then
			   echo "VAAuto: VARootIO failed to load"
		       fi
		       if [ $suzBAD -eq "-3" ]; then
			   echo "VAAuto: VARootIO failed to find ParameterisedEventTree"
		       fi
		       if [ $suzBAD -eq "-4" ]; then
			   echo "VAAuto: VARootIO failed to find SimulatedEventTree"
		       fi
		       if [ $suzBAD -eq "-5" ]; then
			   echo "VAAuto: Too few events ( <20 )  in ParameterisedEventTree"
		       fi
		   fi 
	       } <CheckStage2FileOK.Result
	       rm CheckStage2FileOK.Result
	   fi
	 fi
         ###############################################################
  

         
         if [ -n "$GenerateDispSubLTListFiles" ]; then
           # echo '##########################################################'
           # echo '# GenerateDispSubLTListFiles'
	   # echo '##########################################################'
	     cd $lcl
	     echo $FileName >>$DispListName
         fi
         #******************************************************************
 

         ################################################
         #should all be done now. Go on to next combo.
         ##############################################
         let kpvar=$kpvar+1
        done
       let iwbl=$iwbl+1
      done
     kaz=$((kaz+1))
    done
   if [ -n "$CheckStage2Files" ]; then
     echo 'VAAuto: PedVar files: '$SPECSEA$PMT$SPECPART' Zn:  '${Zenith[$izn]}' AZ: '$SPECAZ', offset: '$SPECWBL', pedv: '$SPECPV' Check complete.'
   fi
   
   izn=$((izn+1))
  done
fi

###########################################################################

if [ -n "$GenerateSubLTListFiles" ]; then
   echo '##########################################################'
   echo '# GenerateSubLTListFiles'
   echo '##########################################################'
   cd $lcl
   date
   ListNames='SubLT'$SPECSEA$Samples'Sample*Deg*List'
   rm $ListNames
fi
#############################################################################

if [ -n "$GenerateSubLTConfigFiles" ]; then
   echo '##########################################################'
   echo '# GenerateSubLTConfigFiles'
   echo '##########################################################'
   cd $lcl
   date
   # *************************************************************************
   # Generate template config file
   # Change for KASCADE and Number of samples
   # *************************************************************************
   $VEGAS/showerReconstruction2/bin/produce_lookuptables -save_config_and_exit tmp1
   sed '/CorePositionFractionalErrorCut/s/100/.25/g' <tmp1 >tmp2
   sed '/CorePositionAbsoluteErrorCut/s/1000/20/g'   <tmp2 >tmp1
   sed '/LTC_SimulationType/s/GrISU/KASCADE/g'       <tmp1 >tmp2

   sed '/LTM_FillType "MEDIAN"/s/MEDIAN/MEAN/g'           <tmp2 >tmp1
   sed '/LTM_WidthFillType " "/s/" "/"'$CFG_W'"/g'       <tmp1 >tmp2
   sed '/LTM_LengthFillType " "/s/" "/"'$CFG_L'"/g'      <tmp2 >tmp1
   sed '/LTM_EaxisEnergyFillType " "/s/" "/"'$CFG_E'"/g' <tmp1 >tmp2
  
   sed '/LTM_EnergyFillType " "/s/" "/"MEAN"/g'        <tmp2 >tmp1
   sed '/TelID        /s/TelID/TelID  '$TelIDStr'/g'   <tmp1 >tmp2
   sed '/Azimuth      /s/Azimuth/Azimuth '$AzStr'/g'   <tmp2 >tmp1
   sed '/Zenith         /s/Zenith/Zenith '$ZNStr'/g'   <tmp1 >tmp2
   sed '/Noise         /s/Noise/Noise '$NoiseStr'/g'   <tmp2 >tmp1
   if [ "$LTWBL" != "050" ]; then
      sed '/luteOffset    /s/Offset/Offset '$ABOStr'/g'   <tmp1 >tmp2
   else
      cp tmp1 tmp2
   fi
   sed '/Log10SizePerBin/s/0.04/0.07/g'              <tmp2 >tmp1
   sed '/ImpDistUpperLimit/s/400/800/g'	             <tmp1 >tmp2
   sed '/Log10EaxisEnergyUpperLimit/s/6/5/g'         <tmp2 >tmp1
   #Set the number of samples for noise
   sed '/LTM_WindowSizeForNoise/s/7/'$Samples'/g' <tmp1 >tmp2
   #Replace HillasBranchName argument
   sed '/HillasBranchName "H"/s/"H"/"'$HMode'"/g'    <tmp2 >config1.tmp
fi
########################################################################

if [ -n "$GenerateEASubLTListAndConfigFiles" ]; then
   echo '##########################################################'
   echo '# GenerateEASubLTListAndConfigFiles'
   echo '##########################################################'
   cd $lcl
   date
   ListNames='EASubLT'$SPECSEA$Samples'Sample*Deg*'$CUTTYPE'List'
   rm $ListNames
   EASPEC=EA  

   # *************************************************************************
   # Generate template config file
   # Change for KASCADE and Number of samples
   # *************************************************************************
   $VEGAS/bin/makeEA  -save_config_and_exit tmp1
   sed '/EA_SimulationType/s/E_GrISU/E_KASCADE/g'       <tmp1 >tmp2
   sed '/EA_WindowSizeForNoise/s/7/'$Samples'/g'        <tmp2 >tmp1
   sed '/Azimuth      /s/Azimuth/Azimuth '$AzStr'/g'    <tmp1 >tmp2
   sed '/Zenith         /s/Zenith/Zenith '$ZNStr'/g'    <tmp2 >tmp1
   sed '/Noise         /s/Noise/Noise '$NoiseStr'/g'    <tmp1 >tmp2
   if [ "$LTWBL" != "050" ]; then
      sed '/luteOffset    /s/Offset/Offset '$ABOStr'/g' <tmp2 >config1.tmp
   else
      cp tmp2 config1.tmp
   fi
fi
########################################################################

if [ -n "$HTARPedVarZnOffsetS4ToArchive" ]; then
   echo '##########################################################'
   echo '# HTARPedVarZnOffsetS4ToArchive'
   echo '##########################################################'
   cd $lcl
   date
fi  
##############################################################################
if [ -n "$HTARPedVarZnOffsetS4FromArchive" ]; then
   echo '##########################################################'
   echo '# HTARPedVarZnOffsetS4FromArchive'
   echo '##########################################################'
   cd $lcl
   date
fi  
##############################################################################
if [ -n "$ProduceSubLookupTables" ]; then
   echo '##########################################################'
   echo '# ProduceSubLookupTables'
   echo '##########################################################'
   cd $lcl
   MEMREQUEST="mem=24GB"
   if [ -n "$CARVER" ]; then
       MEMREQUEST="pvmem=24GB"
   fi
   if [ -n "$EDISON" ]; then
       MEMREQUEST="vmem=24GB"
   fi
   date
fi  
########################################################################
if [ -n "$ProduceEASubLookupTables" ]; then
   echo '##########################################################'
   echo '# ProduceEASubLookupTables'
   echo '##########################################################'
   cd $lcl
   EASPEC=EA
   date
fi  
##############################################################################
if [ -n "$HTARPedVarZnOffsetS2ToArchive" ]; then
   echo '##########################################################'
   echo '# HTARPedVarZnOffsetS2ToArchive'
   echo '##########################################################'
   cd $lcl
   date
fi  
##############################################################################
if [ -n "$HTARPedVarZnOffsetS2FromArchive" ]; then
   echo '##########################################################'
   echo '# HTARPedVarZnOffsetS2FromArchive'
   echo '##########################################################'
   cd $lcl
   date
fi  
##############################################################################
if   [ -n "$CombineSubLT" ]; then
   echo '##########################################################'
   echo '# CombineSubLT'
   echo '##########################################################'
   cd $lcl
   date
   GenerateLTFileName $SPECCFG $SPECSEA $LTWBL  'std' $LTPARTTYPE

   SubLTList='SubLTList'
   if [ -e $lcl'/'$SubLTList ]; then
     rm $lcl'/'$SubLTList
   fi
fi
##############################################################################

if   [ -n "$CombineBuildCheckEALT" ]; then
   echo '##########################################################'
   echo '# CombineBuildCheckEALT'
   echo '##########################################################'
   cd $lcl
   date
   EASPEC=EA
   GenerateEAFileName $CUTTYPE $SPECSEA $LTWBL  'std' $TelConfig  $LTPARTTYPE

   SubLTList='EASubLTList'
   if [ -e $lcl'/'$SubLTList ]; then
     rm $lcl'/'$SubLTList                #Remove any existing EA SUBLT List file
                                         #Make a new one later.
   fi
fi
#################################################################################



##################################################################################
if [ -n "$GenerateSubLTConfigFiles" ] || [ -n "$GenerateSubLTListFiles" ]          || \
   [ -n "$ProduceSubLookupTables" ]   || [ -n "$HTARPedVarZnOffsetS2ToArchive" ]   || \
   [ -n "$CombineSubLT" ]             || [ -n "$HTARPedVarZnOffsetS2FromArchive" ] || \
   [ -n "$GenerateStage4FromStage2" ] || [ -n "$HTARPedVarZnOffsetS4ToArchive" ]   || \
   [ -n "$CheckStage4Files" ]         || [ -n "$HTARPedVarZnOffsetS4FromArchive" ] || \
   [ -n "$GenerateStage5CombinedFromStage4" ]  || [ -n "$CombineBuildCheckEALT" ]  || \
   [ -n "$GenerateEASubLTListAndConfigFiles" ] || \
   [ -n "$ProduceEASubLookupTables" ] ; then

#****************************************************************************
   # For SubLT gen we make a seperate Sub LT config file for each of ZN Offset 
   # combination
   # we loop over Zn and Offset 
   #############################################################################

   #######################################################################
   #Zenith
   let izn=0
   let iznEnd=${#Zenith[@]}
   while test $izn -lt $iznEnd
    do
     ZN=${Zenith[$izn]}
     #echo izn: $izn' ZN: '$ZN

     ####################################################################
     # Iterate over WBL Offsets
     ####################################################################
     #Wbl Offset
     let iwbl=0
     let iwblEnd=${#WblOffset[@]}
     while test $iwbl -lt $iwblEnd
      do
       WBL=${WblOffset[$iwbl]}
       if [ "$WBL" !=  '0.0' ]; then
	   WBLSPEC=S$WBL'Wbl'
       else
	   WBLSPEC=$WBL'Wbl'
       fi
       if [ -n "$CheckStage4Files" ]; then
	   echo $ZN':' $WBLSPEC >&2   #Print to stderr during operation to 
       fi                            #let user know things are running

       #Construct the Sub Lt or  EASubLT Config File Name. 
       #EASPEC is only defined for EA gens.
       SUBLTBASE=$EASPEC'SubLT'$SPECSEA$Samples'Sample'$ZN'Deg'$WBLSPEC$CUTTYPE

       ConfigName=$SUBLTBASE$HMode'.config'
       ListName=$SUBLTBASE'List'
       SubLTFileName=$lcl'/'$SUBLTBASE'.root'

       #**********************************************************
       if [ -n "$GenerateSubLTConfigFiles" ] || \
	  [ -n "$GenerateEASubLTListAndConfigFiles" ] ;
	 then
         #############################################################
         #Now we need to "edit the new config file
         #############################################################
         #Figure out what the Zenith argument should look like
	   if test $izn -eq "0" 
	    then
	       Zn=${Zenith[izn]}','${Zenith[1]}
	   else
	       Zn=${Zenith[0]}','${Zenith[izn]}
	   fi
	   #now replace Zenith argument and put in a tmp file
	   sed '/Zenith/s/'$ZNStr'/'$Zn'/g' <config1.tmp >config2.tmp

           ##############################################################
           #Now do the same for the Offset but put in final file
           #If we only are doing one offset leavce AbsoluteOffset blank
	   if test $iwblEnd -ne "1"   #Allows for only one WBl
	     then   
	       if test $iwbl -eq "0" 
		 then
		   W=${WblOffset[$iwbl]},${WblOffset[1]}
	       else
		   W=${WblOffset[0]},${WblOffset[$iwbl]}
	       fi
	       sed '/luteOffset/s/'$ABOStr'/'$W'/g'  <config2.tmp >$ConfigName
	   else
	       cp config2.tmp $ConfigName
              #   sed '/luteOffset/s/'$ABOStr'/   /g'  <config2.tmp >$ConfigName
           fi   
           #now replace Offset argument and put in a final file
	   rm config2.tmp
       fi
       #********************************************************************


       if [ -n "$HTARPedVarZnOffsetS2ToArchive" ]; then
        #*****************************************************************
        #For each of ZN Az, and  Offset combination we make a tar file of all
        #the files with that Zn Az and Offset and all  PedVar (9 files)
        ##################################################################
        # Make up Pedvar .tar file name
	   PedVarHTARFile='S2Zn'$ZN'Deg2D'$WBLSPEC'AllPedVarAllAz'$SPECSEA$PMT$SPECPART$SPECMDL'.tar'
	   PVFILESPEC='PedVar*'$SPECSEA$PMT$SPECPART$SPECMDL$ZN{D,_45D,_90D,_135D,_180D,_225D,_270D,_315D}'eg2D'$WBLSPEC$SPECTHR'1234M2.root'
              
	   SubmitHtarToArchive $ARCHIVE$SPECSEA$PMT$SPECPART$SPECMDL'PedVarS2/'$PedVarHTARFile $lcl "$PVFILESPEC"
       fi
       #*********************************************************************

       if [ -n "$HTARPedVarZnOffsetS2FromArchive" ]; then
         #*****************************************************************
         #For each of ZN Az, and  Offset combination we recover a tar file of all
         #the files with that Zn Az and Offset and all  PedVar (9 files)
         ##################################################################
         # Make up Pedvar .tar file name
	   PedVarHTARFile='S2Zn'$ZN'Deg2D'$WBLSPEC'AllPedVarAllAz'$SPECSEA$PMT$SPECPART$SPECMDL

	   SubmitHtarFromArchive $ARCHIVE$SPECSEA$PMT$SPECPART$SPECMDL'PedVarS2/' $lcl $PedVarHTARFile 
       fi
       #*********************************************************************

       if [ -n "$HTARPedVarZnOffsetS4ToArchive" ]; then
        #*****************************************************************
        # For each of ZN Az, and  Offset combination we make a tar file of all
        # the files with that Zn Az and Offset and all  PedVar (9 files)
        ##################################################################
        # Make up Pedvar .tar file name
	   if [ ! -d "$ARCHIVE$SPECSEA$PMT$SPECPART$SPECMDL'PedVarS4'" ]; then  #Check Archive Directory exists 
	       echo $ARCHIVE$SPECSEA$PMT$SPECPART$SPECMDL'PedVarS4' ;
	       hsi 'cd '$ARCHIVE'; mkdir '$SPECSEA$PMT$SPECPART$SPECMDL'PedVarS4;'
	       echo $ARCHIVE$SPECSEA$PMT$SPECPART$SPECMDL'PedVarS4' ;
	   fi
	   PedVarHTARFile='S4Zn'$ZN'Deg2D'$WBLSPEC'AllPedVarAllAz'$SPECSEA$PMT$SPECPART$SPECMDL$CUTTYPE'Cuts'
	   if [ -n "$TELCUT" ]; then
	       PedVarHTARFile=$PedVarHTARFile$TelConfig
	   fi

	   PedVarHTARFile=$PedVarHTARFile'.tar'


	   PVFILESPEC='PedVar*'$SPECSEA$PMT$SPECPART$SPECMDL$ZN{D,_45D,_90D,_135D,_180D,_225D,_270D,_315D}'eg2D'$WBLSPEC$SPECTHR$TelConfig'M2'$CUTTYPE'Cuts.root'
              
	   SubmitHtarToArchive $ARCHIVE$SPECSEA$PMT$SPECPART$SPECMDL'PedVarS4/'$PedVarHTARFile $lcl "$PVFILESPEC"
       fi
       #*********************************************************************

       if [ -n "$HTARPedVarZnOffsetS4FromArchive" ]; then
         #*****************************************************************
         # For each of ZN Az, and  Offset combination we recover a tar file of all
         # the files with that Zn Az and Offset and all  PedVar (9 files)
         ##################################################################
         # Make up Pedvar .tar file name
	   PedVarHTARFile='S4Zn'$ZN'Deg2D'$WBLSPEC'AllPedVarAllAz'$SPECSEA$PMT$SPECPART$SPECMDL$CUTTYPE'Cuts'
	   if [ -n "$TELCUT" }; then
	       PedVarHTARFile=$PedVarHTARFile$TelConfig
           fi
	   
	   SubmitHtarFromArchive $ARCHIVE$SPECSEA$PMT$SPECPART$SPECMDL'PedVarS4/' $lcl $PedVarHTARFile 
       fi
       #*********************************************************************
       
       if [ -n "$ProduceSubLookupTables" ]; then
         ####################################################################
         # Make up the job script file that will be submitted below
         ####################################################################
	   sgeFile=$lcl'/'$SUBLTBASE'.pbs'
	   echo "#"PBS -l walltime=$WALLTIME            >$sgeFile
	   echo "#PBS -l "$MEMREQUEST                  >>$sgeFile
	   if [ -n "$HANSEN" ] || [ -n "$COATES" ]; then
	       echo source /etc/profile                >>$sgeFile
	       echo module load gcc/4.7.2              >>$sgeFile
	   fi
	   echo cd $lcl                                >>$sgeFile
	   echo $VEGAS/bin/produce_lookuptables \\     >>$sgeFile
	   echo -config $lcl'/'$ConfigName \\          >>$sgeFile
	   echo -cuts $LTCUTSFILE  \\                  >>$sgeFile
	   echo  $lcl'/'$ListName   \\                 >>$sgeFile
	   echo  $SubLTFileName  \\                    >>$sgeFile
	   echo '>'$lcl'/'$SUBLTBASE'.log'             >>$sgeFile
	   chmod 700 $sgeFile
	   
	   qsub$QSUBEXT -q $QUEUE -V -e $SUBLTBASE.qsub.err -o $SUBLTBASE.qsub.log  $sgeFile
       fi
       #*******************************************************************

       if [ -n "$ProduceEASubLookupTables" ]; then
         ####################################################################
         # Make up the job script file that will be submitted below
         ####################################################################
	   sgeFile=$lcl'/'$SUBLTBASE'.pbs'
	   echo "#"PBS -l walltime=$WALLTIME            >$sgeFile
	   echo "#PBS -l "$MEMREQUEST                  >>$sgeFile
	   if [ -n "$HANSEN" ] || [ -n "$COATES" ]; then
	       echo source /etc/profile                  >>$sgeFile
	       echo module load gcc/4.7.2                >>$sgeFile
	   fi
	   echo cd $lcl                                >>$sgeFile
	   echo $VEGAS/bin/makeEA \\                   >>$sgeFile
	   echo -config $lcl'/'$ConfigName \\          >>$sgeFile
	   echo -cuts $EACUTSFILE  \\                  >>$sgeFile
	   echo  $lcl'/'$ListName   \\                 >>$sgeFile
	   echo  $SubLTFileName  \\                    >>$sgeFile
	   echo '>'$lcl'/'$SUBLTBASE'.log'             >>$sgeFile
	   chmod 700 $sgeFile
	   
	   qsub$QSUBEXT -q $QUEUE -V -e $SUBLTBASE.qsub.err -o $SUBLTBASE.qsub.log  $sgeFile
       fi
       #*******************************************************************

       if [ -n "$CombineSubLT" ] || [ -n "$CombineBuildCheckEALT" ] ; then
         #*******************************************************************
         # Create the List of all SubLT files to be combined
         #******************************************************************
	 # But first check that each file does exixt. We may want to test deeper
         # if this isn't enough later.
         ###################################################################
	   if  [ ! -e "$SubLTFileName" ]; then
	       echo 'VAAuto: Fatal--SubLT file '$SubLTFileName ' dose not exist'
	       exit
	   fi
	   echo $SubLTFileName >>$lcl'/'$SubLTList
       fi
       #*******************************************************************

       #Azimuth
       let kaz=0
       let kazEnd=${#Azimuth[@]}
       while test $kaz -lt $kazEnd
	do
         #Make   Zn_Az string
	 AZ=${Azimuth[$kaz]}
         if test $AZ = "0"
	     then
	     ZnAz=$ZN'Deg'
	 else
	     ZnAz=$ZN'_'$AZ'Deg'
	 fi
	 if [ "$SPECPART" = "CR" ]; then
           GenerateVBFName $SPECPART $SPECCFG $SPECSEA $ZN $AZ #No wbl for CR
         else
           GenerateVBFName $SPECPART $SPECCFG $SPECSEA $ZN $AZ $WBL
	 fi
	 BaseFileS2=${VBFFILENAME%%.vbf}
         BaseFileS4S5=$BaseFileS2$CUTTYPE'Cuts'
         #Iterate through PedVars
	 let kpvar=0
	 while test $kpvar -lt $kpvarEnd
	  do   PV=${PedVar[$kpvar]} 
	   PedVarFile=Ped$SPECCFG$PV
	   PedVarName=PedVar$PV

	   PedVarS2FileName=$PedVarName'_'$BaseFileS2'.root'
	   PedVarS4FileName=$PedVarName'_'$BaseFileS4S5'.root'
	   #********************************************************************
	   
	   if [ -n "$GenerateSubLTListFiles" ]; then
             # echo '##########################################################'
             # echo '# GenerateSubLTListFiles'
	     # echo '##########################################################'
	       cd $lcl
	       echo $PedVarS2FileName >>$ListName
	   fi
           #******************************************************************

	   if [ -n "$GenerateEASubLTListAndConfigFiles" ]; then
	       cd $lcl
	       echo $PedVarS4FileName >>$ListName
	   fi
           #******************************************************************

	   if [ -n "$GenerateStage4FromStage2" ]; then
            #echo '##########################################################'
            #echo '# GenerateStage4FromStage2 ' 	    
            #echo '##########################################################'
	      cd $lcl
	      date
	      echo PV:$PV
	      echo "VAAuto: Submitting VegasSimProductionS4 to '$QUEUE' queue for " $lcl'/'$VBFFILENAME 
	       
	      echo PedVarFile: $PedVarFile 
	      echo BaseFileS2: $BaseFileS2 
	      echo VBFFILENAME: $VBFFILENAME
              ###################################################
              # Note here that VeagsSimProductionS4.scr will generate the PedVar 
              # Stage4 filename with the correct TelConfig and cuts
              # the VSProdFile has that info added to it with sed commands.
              ###################################################

	      SubmitVegasSimProduction $PedVarFile $BaseFileS2 $VSProdFile $VBFFILENAME
           fi
           ###############################################################

	   if [ -n "$GenerateStage5CombinedFromStage4" ]; then
              #echo '##########################################################'
              #echo '# GenerateStage5CombinedFromStage4 ' 	    
              #echo '##########################################################'
	      cd $lcl
	      date
	      echo PV:$PV
              # OK! We are ready to run.  Need to submit since this will take more 
              # than 1 hours or we have many to run in parallel 
              WALLTIME=20:00:00
              if [ -n "$CARVER" ]; then
                MEMREQUEST="pvmem=8GB"
              else
                MEMREQUEST="mem=8GB"
              fi

	      echo 'VAAuto: Submitting VegasSimProductionS5 to '$QUEUE' queue for ' $lcl'/'$VBFFILENAME 
	       
	      echo PedVarFile: $PedVarFile 
	      echo BaseFileS2: $BaseFileS2 
	      echo VBFFILENAME: $VBFFILENAME
              ###################################################
              # Note here that VeagsSimProductionS5.scr will generate the PedVar 
              # Stage4 filename with the correct TelConfig and Cuts. 
              # the VSProdFile has that info added to it with sed commands.
              ###################################################
            
	      SubmitVegasSimProduction $PedVarFile $BaseFileS2 $VSProdFile $VBFFILENAME
		   
	   fi

           ###############################################################
	   
	   if [ -n "$CheckStage4Files" ]; then
             # echo '##########################################################'
             # echo '# CheckStage4Files'
	     # echo '##########################################################'
	       cd $lcl
	       
             #Check VARootIO can open and load file 
	       
	       Arg=$lcl'/CheckStage4FileOK.C("'$PedVarS4FileName'")'
	       
	       root -q -b -q $Arg >CheckStage4OK.log
	       {
		   read BAD
		   let suzBAD="$BAD"
		   
		   if [ "$suzBAD" -lt "15" ]; then
		       echo "Bad: "$PedVarS4FileName
		       echo "Reason: "$suzBAD
		       if [ $suzBAD -eq "1" ]; then
			   echo "VAAuto: VARootIO failed to open" 
		       fi
		   #if [ $suzBAD -eq "2" ]; then
		       #echo "VAAuto: VARootIO failed to load"
		   #fi
		       if [ $suzBAD -eq "3" ]; then
			   echo "VAAuto: VARootIO failed to find ShowerDataTree"
		       fi
		   fi 
		   
	       } <CheckStage4FileOK.Result
	     #rm CheckStage4FileOK.Result
	   fi
           ###############################################################
           
	   let kpvar=$kpvar+1
	  done
	 kaz=$((kaz+1))
        done
       let iwbl=$iwbl+1
      done
     izn=$((izn+1))
    done
fi
###########################################################################

#**********************************************************************
if [ -n "$CombineSubLT" ] ||  [ -n "$CombineDispSubLT" ]; then
    cd $VEGAS/showerReconstruction2/macros
    if [ ! -e "combineKASCADE_LT.C" ]; then
	cp $KASCADEBASE'/scripts/combineKASCADE_LT.C' .
    fi
   
    if [ -e "$LTFILENAME" ]; then
	rm -v $LTFILENAME
    fi

   ###########################################################################
   #This file is loaded by the rootlogon.C in showerReconstruction2/macros

    ~/Switch.rootrcTo.rootrc_showerReconstruction2 
   #############################################################################
   # Make up a script to run on root batch mode
   #############################################################################
    Script='CombineSubLT.C'
    echo '{'                                                          >$Script
    echo '  combineFromList("'$lcl'/'$SubLTList'","'$LTFILENAME'");' >>$Script
    echo '}'                                                         >>$Script
    
    echo "VAAuto: Running root batch command to Create LT file:"
    echo "VAAuto: "$LTFILENAME
    echo "VAAuto: Do: less CombineSubLT.log;  then shift-F to see when it  finishes!"
    
    if [ -n "$CombineSubLT" ]; then
	root -b -q $Script '>'$lcl'/CombineSubLT.log'
    fi
    if  [ -n "$CombineDispSubLT" ]; then
	#The combine Disp takes too long to run interactivly, so submit it.
        #build a submission .pbs file
	sgeFile=$lcl'/CmbDisp.pbs'
	 echo "#"PBS -q $QUEUE                                           >$sgeFile
	 echo "#"PBS -l walltime=04:00:00                               >>$sgeFile
	 echo "#PBS -l "$MEMREQUEST                                     >>$sgeFile
	 if [ -n "$CARVER" ]; then
	     echo "#PBS -l nodes=1:ppn=1"                               >>$sgeFile
	 fi
	 if [ -n "$HANSEN" ] || [ -n "$COATES" ]; then  
	     echo source /etc/profile                                   >>$sgeFile
	     echo module load gcc/4.7.2                                 >>$sgeFile
	 fi
	 echo cd $VEGAS/showerReconstruction2/macros                    >>$sgeFile
	 echo root -b -q $Script '>'$lcl'/CombineSubLT.log'             >>$sgeFile
    
	 chmod 700 $sgeFile
	 qsub$QSUBEXT -V -e $lcl'/CmbDisp.pbs.err' -o $lcl'/CmfDisp.pbs.log' $sgeFile >CmbDisp.log
    fi
fi
#**********************************************************************

if [ -n "$CombineBuildCheckEALT" ]; then
    cd $VEGAS/resultsExtractor/macros
    if [ ! -e "combineEAKascade.C" ]; then
	cp $KASCADEBASE'/scripts/combineEAKascade.C' .
    fi
   ###########################################################################
   # This file is loaded by the rootlogon.C in showerReconstruction2/macros
   ###########################################################################    
    ~/Switch.rootrcTo.rootrc_resultsExtractor.scr
    
   #############################################################################
   # Make up a script to run on root batch mode
   #############################################################################
    Script='CombineEASubLT.C'
    echo '{'                                                             >$Script
    echo '  combineEAKFromList("'$lcl'/'$SubLTList'","'$EAFILENAME'");' >>$Script
    echo '}'                                                            >>$Script
    
    echo "VAAuto: Running root batch command to Create EA file:"
    echo "VAAuto: "$EAFILENAME
    echo "VAAuto: Do: less CombineEASubLT.log;  then shift-F to see when it  finishes!"
    
    root -b -q $Script '>'$lcl'/CombineEASubLT.log'  
fi
#############################################################################

if [ -n "$BuildLTTree" ]; then
    echo '##########################################################'
    echo '# BuildLTTree'
    echo '##########################################################'
    GenerateLTFileName $SPECCFG $SPECSEA $LTWBL  'std' $LTPARTTYPE
    
    cd $VEGAS/showerReconstruction2/macros
    date
    BUILDCONFIG='BuildTree'$Samples'Samples.config' 
    $VEGAS/showerReconstruction2/bin/buildLTTree -save_config_and_exit tmp1
    
   #**********************************************************************
   #Modify for this LT: except for TelID we need at least 2 to change things
   #**********************************************************************
    sed '/TelID        /s/TelID/TelID  '$TelIDStr'/g' <tmp1 >tmp2
    let iznEnd=${#Zenith[@]}
    let kazEnd=${#Azimuth[@]}
    let kpvarEnd=${#PedVar[@]}
		
    INFILE=tmp2
    OUTFILE=tmp1
		
    if [ ${#Azimuth[@]} -gt "1" ]; then
	sed '/Azimuth      /s/Azimuth/Azimuth '$AzStr'/g' <$INFILE >$OUTFILE
	TMPFILE=$INFILE
	INFILE=$OUTFILE
	OUTFILE=$TMPFILE
    fi
   
    if [ ${#Zenith[@]} -gt "1" ]; then
	echo ZNStr: $ZNStr
	sed '/Zenith         /s/Zenith/Zenith '$ZNStr'/g' <$INFILE >$OUTFILE
	TMPFILE=$INFILE
	INFILE=$OUTFILE
	OUTFILE=$TMPFILE
    fi
    if [ ${#PedVar[@]} -gt "1" ]; then
	sed '/Noise         /s/Noise/Noise '$NoiseStr'/g' <$INFILE >$OUTFILE
	TMPFILE=$INFILE
	INFILE=$OUTFILE
	OUTFILE=$TMPFILE
    fi

   #This should allow for single offset in which case the AbsoluteOFffset is left 
   #blank in the buildTree config file.
    if [ ${#WblOffset[@]} -gt "1" ]; then
	sed '/luteOffset    /s/Offset/Offset '$ABOStr'/g' <$INFILE >$OUTFILE
	TMPFILE=$INFILE
	INFILE=$OUTFILE
	OUTFILE=$TMPFILE
    fi
    mv $INFILE $BUILDCONFIG

    $VEGAS/showerReconstruction2/bin/buildLTTree '-config='$BUILDCONFIG $LTFILENAME 
fi
##############################################################################

if [ -n "$BuildDispLTTree" ]; then
    echo '##########################################################'
    echo '# BuildDispLTTree'
    echo '##########################################################'
    cd $VEGAS/showerReconstruction2/macros
    date
    GenerateLTFileName $SPECCFG $SPECSEA $LTWBL  'std' $LTPARTTYPE
    LTFILENAME='dt'${LTFILENAME#lt}                 #Convert to a dt filename

    BUILDCONFIG='BuildDispTree'$Samples'Samples.config' 
    $VEGAS/showerReconstruction2/bin/buildDispTree -save_config_and_exit tmp1

   #**********************************************************************
   #Modify for this Disp LT: we need at least 2 to change things
   #**********************************************************************
    let iznEnd=${#Zenith[@]}
    let kazEnd=${#Azimuth[@]}
    let kpvarEnd=${#PedVar[@]}

    INFILE=tmp1
    OUTFILE=tmp2

    if [ ${#Azimuth[@]} -gt "1" ]; then
	sed '/DTM_Azimuth      /s/Azimuth/Azimuth '$AzStr'/g' <$INFILE >$OUTFILE
	TMPFILE=$INFILE
	INFILE=$OUTFILE
	OUTFILE=$TMPFILE
    fi
   
    if [ ${#Zenith[@]} -gt "1" ]; then
	sed '/DTM_Zenith         /s/Zenith/Zenith '$ZNStr'/g' <$INFILE >$OUTFILE
	TMPFILE=$INFILE
	INFILE=$OUTFILE
	OUTFILE=$TMPFILE
    fi
    if [ ${#PedVar[@]} -gt "1" ]; then
	sed '/DTM_Noise         /s/Noise/Noise '$NoiseStr'/g' <$INFILE >$OUTFILE
	TMPFILE=$INFILE
	INFILE=$OUTFILE
	OUTFILE=$TMPFILE
    fi
    sed '/DTM_Width         /s/Width/Width '$DTMWidthStr'/g'    <$INFILE >$OUTFILE
    sed '/DTM_Length        /s/Length/Length '$DTMLengthStr'/g' <$OUTFILE >$BUILDCONFIG

    $VEGAS/showerReconstruction2/bin/buildDispTree '-config='$BUILDCONFIG $LTFILENAME 
fi
#################################################################################

if [ -n "$CombineBuildCheckEALT" ]; then
   echo '##########################################################'
   echo '# BuildEA '
   echo '##########################################################'
   EASPEC=EA

   date
   #**********************************************************************
   # Modify for this EA: except for TelID we need at least 2 to change things
   #**********************************************************************

   if [ ${#Azimuth[@]} -gt "1" ]; then
      StrAz='-Azimuth='$AzStr
   fi
   if [ ${#Zenith[@]} -gt "1" ]; then
      StrZn='-Zenith='$ZNStr
   fi
   if [ ${#PedVar[@]} -gt "1" ]; then
      StrNoise='-Noise='$NoiseStr
   fi
   if [ ${#WblOffset[@]} -gt "1" ]; then
      StrOffset='-AbsoluteOffset='$ABOStr
   fi

   cd $VEGAS/resultsExtractor/macros

   if [ ! -e "$EAFILENAME" ]; then
      echo 'VAAuto:  Fatal--EA file '$VEGAS'/resultsExtractor/macros/'$EAFILENAME 'does not exist!'
      exit
   fi
   $VEGAS/resultsExtractor/bin/buildEATree \
       $StrAz \
       $StrZn \
       $StrNoise \
       $StrOffset \
       $EAFILENAME

   echo '##########################################################'
   echo '# CheckEA  '
   echo '##########################################################'
   LCL=$PWD

   EADIAGFILENAME=${EAFILENAME/root/diag}
   date
   #############################################################################
   # Make up a script to run on root batch mode
   #############################################################################
   cd $VEGAS'/../vegasV2.5.3/resultsExtractor/macros'
   Script='CheckEA.C'
   echo '{'                                                          >$Script
   echo '  eaValidator2("'$VEGAS'/resultsExtractor/macros/'$EAFILENAME'");'  >>$Script
   echo '}'                                                         >>$Script

   if [ ! -e "$VEGAS"/resultsExtractor/macros/"$EAFILENAME" ]; then
      echo 'VAAuto:  Fatal--EA file '$VEGAS'/resultsExtractor/macros/'$EAFILENAME 'does not exist!'
      exit
   fi
   echo "VAAuto: Running root batch command to Check EA file:"
   echo "VAAuto: "$EAFILENAME

   ~/Switch.rootrcTo.rootrc_resultsExtractor.scr
   rm $EADIAGFILENAME
   
   root -b -q $Script '>'$lcl'/CheckEA.log'  
   
   if [ -e  "$EADIAGFILENAME" ]; then
       cat  $EADIAGFILENAME >>$lcl'/CheckEA.log'
   fi

   ~/Switch.rootrcTo.rootrc_glenn.scr
   cd $LCL
fi
# ***********************************************************************

if [ -n "$CheckLT" ]; then
   echo '##########################################################'
   echo '# CheckLT'
   echo '##########################################################'
   LCL=$PWD
   cd $VEGAS/showerReconstruction2/macros
   GenerateLTFileName $SPECCFG $SPECSEA $LTWBL  'std' $LTPARTTYPE
   LTDiagFileName=${LTFILENAME%.root}'.diag'

   date
   #############################################################################
   # Make up a script to run on root batch mode
   #############################################################################
   Script='CheckLT.C'
   echo '{'                                                          >$Script
   echo '  ltValidator2("'$LTFILENAME'");'                          >>$Script
   echo '}'                                                         >>$Script

   echo "VAAuto: Running root batch command to Check  LT file:"
   echo "VAAuto: "$LTFILENAME

   ~/Switch.rootrcTo.rootrc_showerReconstruction2
   rm $LTDiagFileName
   
   root -b -q $Script '>'$lcl'/CheckLT.log'  
   
   if [ -e  "$LTDiagFileName" ]; then
       cat  $LTDiagFileName >>$lcl'/CheckLT.log'
   fi

   ~/Switch.rootrcTo.rootrc_glenn.scr
   cd $LCL
fi
##################################################################################

if [ -n "$CheckDispLT" ]; then
   echo '##########################################################'
   echo '# CheckDispLT'
   echo '##########################################################'
   LCL=$PWD
   cd $VEGAS/showerReconstruction2/macros
   GenerateLTFileName $SPECCFG $SPECSEA $LTWBL  'std' $LTPARTTYPE
  
   DTFILENAME=dt${LTFILENAME#lt}           #Convert to a dt filename
   DTDiagFileName=${DTFILENAME%.root}'.diag'
   date
   #############################################################################
   # Make up a script to run on root batch mode
   #############################################################################
   Script='CheckDispLT.C'
   echo '{'                                                          >$Script
   echo '  dtValidator2("'$DTFILENAME'");'                          >>$Script
   echo '}'                                                         >>$Script

   echo "VAAuto: Running root batch command to Check DT file:"
   echo "VAAuto: "$DTFILENAME

   ~/Switch.rootrcTo.rootrc_showerReconstruction2
   rm $DTDiagFileName
   
   root -b -q $Script '>'$lcl'/CheckDispLT.log'  
   
   if [ -e  "$DTDiagFileName" ]; then
       cat  $DTDiagFileName >>$lcl'/CheckDispLT.log'
   fi

   ~/Switch.rootrcTo.rootrc_glenn.scr
   cd $LCL
fi
# ***********************************************************************

if [ -n "$CombineBuildCheckEALT" ]; then
   echo '##########################################################'
   echo '# CheckEA'
   echo '##########################################################'
   LCL=$PWD

   GenerateEAFileName $CUTTYPE $SPECSEA $LTWBL  'std' $TelConfig  $LTPARTTYPE
  
   EADIAGFILENAME=${EAFILENAME/root/diag}
   date
   #############################################################################
   # Make up a script to run on root batch mode
   #############################################################################
   cd $VEGAS'/../vegasV2.5.3/resultsExtractor/macros'
   Script='CheckEA.C'
   echo '{'                                                          >$Script
   echo '  eaValidator2("'$VEGAS'/resultsExtractor/macros/'$EAFILENAME'");'  >>$Script
   echo '}'                                                         >>$Script

   if [ ! -e "$VEGAS"/resultsExtractor/macros/"$EAFILENAME" ]; then
      echo 'VAAuto:  Fatal--EA file '$VEGAS'/resultsExtractor/macros/'$EAFILENAME 'does not exist!'
      exit
   fi
   echo "VAAuto: Running root batch command to Check EA file:"
   echo "VAAuto: "$EAFILENAME

   ~/Switch.rootrcTo.rootrc_resultsExtractor.scr
   rm $EADIAGFILENAME
   
   root -b -q $Script '>'$lcl'/CheckEA.log'  
   
   if [ -e  "$EADIAGFILENAME" ]; then
       cat  $EADIAGFILENAME >>$lcl'/CheckEA.log'
   fi

   ~/Switch.rootrcTo.rootrc_glenn.scr
   cd $LCL
fi

   
#################################################################################
date
echo 'VAAuto: All done!'
