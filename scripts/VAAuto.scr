#!/bin/bash
#This script is used to automate the generation and processing of the veritas 
# KASCADE vbf files in 1:Noise levbels, LT and EA tables.
# GAMMAS ONLY for now (some electron stuff but nowhere near ready for 
# electrons)
#It has some arguments listed below.
#$1 ksProduction season spec: Ex: W or S
#$2 telescope designation: W or V or U (Whipple, veritas, Upgrade)
#$3 ksProduction Type spec: Ex:   G or  P or He4_ or CR or E
#$4 MDL designation for VBF files: Ex MDL10U
#$5 comma seperated list of ZN values: Ex 1,10,20,30,40,50,60,70
#$6 comma seperated list of AZ values: Ex 0,45,90,135,180,225,270,315
#$7 wbl list Ex: 0.0,0.25,0.5,0.75,1.0  or "All"
#$8 Threshold: Ex 45mv or 50mv
#$9 PedVar list: 4.73, 5.55 6.51 or "All" or "Base"
# ************************************************************************
# Within that loop we can do:         #"dm" below indicates dummy value needed

#GenerateSimLaserFile=enabled
#GetVBFFileFromArchive=enabled
#GenerateStage2Files=enabled
#CheckStage2Files=enabled
#GenerateSubLTListFiles=enabled
#GenerateSubLTConfigFiles=enabled
#FindNoiseLevels=enabled
#get

###########################################################################
function checkRunningJobs()
#$1 Job ID List
#$2 Zn_Az

{
  RunningList=RunningList$2'.dat'
  SingleRunList=singleRunList$2'dat'

  if [ -s $RunningList ]; then
      rm $RunningList
  fi
  {
    while  read jobID;  do
      qstat $jobID &>$SingleRunList
      cat $SingleRunList | grep -v Unknown >>$RunningList
    done
  } <$1

  rm $SingleRunList
  if [ -s  $RunningList ]; then
    rm $RunningList
    return 1
  else
    rm $RunningList
    return 0
  fi
}
##########################################################################
function GetPedVars()
{
  RFile2=$1
  PVFile=$2
  #################################
  # We now need to run root in batch mode and get list of pedvars
  # and the max one
  #################################
  echo "{"                                                    >VAAuto.C
  echo 'VARootIO io("'$RFile'", true);'                      >>VAAuto.C
  echo 'io.loadTheRootFile();'                               >>VAAuto.C
  echo 'VAQStatsData *q = io.loadTheQStatsData();'           >>VAAuto.C
  echo 'std::ofstream ofs("PedVarBaseRatios.dat");'          >>VAAuto.C
  echo 'std::vector< double > ped;'                          >>VAAuto.C
  echo 'ped.Resize(4,0.0);'                                  >>VAAuto.C
  echo 'ped.at(0)=q->getCameraAverageTraceVarTimeIndpt(0,7)' >>VAAuto.C
  echo 'ped.at(1)=q->getCameraAverageTraceVarTimeIndpt(1,7)' >>VAAuto.C
  echo 'ped.at(2)=q->getCameraAverageTraceVarTimeIndpt(2,7)' >>VAAuto.C
  echo 'ped.at(3)=q->getCameraAverageTraceVarTimeIndpt(3,7)' >>VAAuto.C
  echo 'double max= *max_element(ped.begin(),ped.end());'    >>VAAuto.C
  echo 'ofs<<ped.at(0)<<" "<<ped.at(1)<<" ";'                >>VAAuto.C
  echo '   <<ped.at(2)<<" "<<ped.at(3)<<" ";'                >>VAAuto.C
  echo '   <<max<<std::endl;'                                >>VAAuto.C
  echo 'io.closeTheRootFile();'                              >>VAAuto.C
  echo '}'                                                   >>VAAuto.C

 # ~/Switch.rootrcTo.rootrc_glenn.scr
  root -q -b VAAuto.C  >VAAuto.C.log
}
######################################################################
function LoadPVOpt()
{
  BaseRat=$1
  PVBase=$2
  PVTar=$3
  NewRatioFile=$4
  NewOptFile=$5
  ############################################
  #We have to do some foalingpoint arithmatic and some semi-fancy
  #formatting, so lets do it in root
  ############################################
#  echo "{"                                                      >VAAuto.C
#  echo '  std::string line;'                                   >>VAAuto.C
#  echo '  std::ifstream iBR(\"'$BaseRat'\");'                  >>VAAuto.C
#  echo '  std::getline(iBR,line);'                             >>VAAuto.C
#  echo '  std::istringstream issBR(line);'                     >>VAAuto.C
#  echo '  std::vector< double > oldRat;'                       >>VAAuto.C
#  echo '  double Value;'                                       >>VAAuto.C
#  echo '  for(int i=0;i<4;i++){'                                >>VAAuto.C
#  echo '    issBR>>Value'                                      >>VAAuto.C
#  echo '    oldRat.push_back(Value);'                          >>VAAuto.C
#  echo '  }'                                                   >>VAAuto.C
#  echo '  std::ifstream iPVB(\"'$PVBase'\");'                  >>VAAuto.C
#  echo '  std::getline(iPVB,line);'                            >>VAAuto.C
#  echo '  std::istringstream issPVB(line);'                    >>VAAuto.C
#  echo '  std::vector< double > PVB;'                          >>VAAuto.C
#  echo '  for(int i=0;i<4;i++){'                                >>VAAuto.C
  #echo '    issPVB>>Value'                                     >>VAAuto.C
  #echo '    PVB.push_back(Value);'                             >>VAAuto.C
  #echo '  }'                                                   >>VAAuto.C
  #echo '  std::ofstream oRF(\"'$NewRatioFile'\");'             >>VAAuto.C
  #echo '  std::ofstream oOF(\"'$NewOptFile'\");'               >>VAAuto.C
  #echo '  oOF<<\"IncreasePedVarOption='                        >>VAAuto.C
  #echo '     <<\"\'-PaddingApp=PaddingCustom '                 >>VAAuto.C
  #echo '     << -P_MultiPedvarScaling='                        >>VAAuto.C
  #echo '  for(int i=0;i<4;i++){'                               >>VAAuto.C
  #echo '    Value=oldRat.at(i)*'$PVTar'/PVB.at(i);'            >>VAAuto.C
  #echo '    oOF<<i+1<<\"/\"<<Value;'                           >>VAAuto.C
  #echo '    oRF<<Value<<\" \";'                                >>VAAuto.C
  #echo '  }'                                                   >>VAAuto.C
  #echo '  oOF<<'\"\'\"<<std::endl;                             >>VAAuto.C 
  #echo '  oOF<<\"PedVarBase=\'PedVar'$PVTar'\"<<std::endl;'    >>VAAuto.C 
  #echo '  oRF<<std::endl;'                                     >>VAAuto.C
  #echo '}'                                                     >>VAAuto.C

  ~/Switch.rootrcTo.rootrc_glenn.scr
  root -q -b VAAuto.C  >VAAuto.C.log
}
###########################################################################


#Main:

lcl=$PWD
PMT=$2

source /etc/profile

host=$(hostname)
echo host: $host

hostString=${host:0:6}
if test  "$hostString" = "cvrsvc"  #Are we running on Carver
then
  CARVER=enabled
  JobIDHost='cvrsvc'
  QUEUE=serial
  WALLTIME=30:00:00
  ARCHIVE=$SCRATCH'/gammas/'
  VBFDir=$ARCHIVE$1$2$PMT$4'VBF'
  echo '***Carver Cluster***'
fi

hostString=${host:0:6}
if test  "$hostString" = "hansen"  #Are we running on Hansen
then
  HANSEN=enabled
  ARCHIVE=/archive/fortress/group/veritas/simulations/
  VBFDir=$ARCHIVE'/gammas/'$1$PMT$3$4'VBF'
  JobIDHost='hansen-adm'
  QUEUE=physics
  WALLTIME=30:00:00
  #QUEUE=standby
  #WALLTIME=04:00:00
  echo ***Hansen Cluster***
fi


########################################################################
#To find the Zn,AZ,Offset and Pedvar  combinations first put $5,$6,$7 and $9 
#into arrays This is tricky. We save away the present Internal Filed Seperator
#and then set IFS to a comma. We then use the -a option with the read command 
#to read in our stings into arrays. Then we restore the IFS.

SAVEIFS=$IFS

IFS=, read -a Zenith <<< "$5"
IFS=, read -a Azimuth <<< "$6"

if [ $7 = "All" ]; then
  WblOffset=([0]=0.0 0.25 0.5 0.75 1.0 1.25 1.5 1.75 2.0)
else  
   IFS=, read -a WblOffset <<< "$7"
fi

if [ $9 = "All" ]; then
  PedVar=([0]=4.73 5.55 6.51 7.64 8.97 10.52 12.35 14.49 17.00)
else
   if [ $9 = "Base" ]; then
      PedVar=([0]=0 )
   else
      IFS=, read -a PedVar <<< "$9"
   fi
fi
IFS=$SAVEIFS

###########################################################################

#Check if the is for 2D offsets, blank if not
if [ "$3" = "G" ] || [ "$3" = "E" ]; then
  OffSetSpec="2D"
fi

##########################################################################
#Some defaults
BinSizeForNoise=7
HMode=H
TelIDStr=0,1,2,3
ZNStr=1,10,20,30,40,50,60,70
ABOStr=0.0,0.25,0.5,0.75,1.0,1.25,1.5,1.75,2.0

#AzStr
let kazEnd=${#Azimuth[@]}
if test $kazEnd -eq "8"
then 
  AzStr=0,45,90,135,180,225,270,315
else
 let kaz=0
 AzStr=${Azimuth[$kaz]}
 kaz=$((kaz+1))
 while test $kaz -lt $kazEnd
  do
    AzStr=$AzStr','${Azimuth[$kaz]}
    kaz=$((kaz+1))
  done
fi

#NoiseStr
let kpvarEnd=${#PedVar[@]}
if test $kpvarEnd -eq "9"
then 
 NoiseStr=4.73,5.55,6.51,7.64,8.97,10.52,12.35,14.49,17.00
else
 let kpvar=0
 NoiseStr=${PedVar[$kpvar]}
 kpvar=$((kpvar+1))
 while test $kpvar -lt $kpvarEnd
  do
   NoiseStr=$NoiseStr','${PedVar[$kpvar]}
   kpvar=$((kpvar+1))
  done
fi
    



############################################################################
# Sim Laser generation
############################################################################

if [ -n "$GenerateSimLaserFile" ]; then
    echo '##########################################################'
    echo '# GenerateSimLaserFile '
    echo '##########################################################'
    cd $lcl
    date
    ####################################################################
    #Generate a sim laser file 
    ####################################################################
    #Make sure VegasSimProduction.scr is set up correctly to get simLaser  
    cp $KASCADEBASE/scripts/VegasSimProduction.scr VegasSimProductionLaser.scr

    #####################################################################
    sed '/#Stage1Laser=enable/s/#Stage1Laser/Stage1Laser/g' \
                                        < VegasSimProductionLaser.scr >tmp1
    sed '/Stage1Data=enable/s/Stage1Data/#Stage1Data/g'      <tmp1 >tmp2
    sed '/Stage2=enable/s/Stage2/#Stage2/g'                  <tmp2 >tmp1
    sed '/Stage4=enable/s/Stage4/#Stage4/g'                   <tmp1 >tmp2
    sed '/Stage5=enable/s/Stage5/#Stage5/g' \
                                         <tmp2 >VegasSimProductionLaser.scr
    rm tmp1
    rm tmp2
    ####################################################################
       
    echo "VAAuto: Running VegasSimProductionLaser for simLaser generation"
    echo "VAAuto: This takes a couple of minutes"
    ./VegasSimProductionLaser.scr  DummyFileName >$lcl'/SimLaserFile.log'
    echo "VAAuto: simLaser.root generated"
fi
#############################################################################

if [ -n "$GenerateStage2Files" ]; then
    echo '##########################################################'
    echo '# GenerateStage2Files'
    echo '##########################################################'
    cd $lcl
    date
    #Make sure VegasSimProduction.scr is set up correctly to get  
    #Stage1 and Stage2
    if [ ! -e "VegasSimProductionS1S2.scr" ]; then
     cp $KASCADEBASE/scripts/VegasSimProduction.scr VegasSimProductionS1S2.scr

     #The standard VegasSimProduction.scr should have all options 
     #turned off.  We just have to make sure only stages 1 and 2 get run
     #??????Sample size:We will need to set integration window size if 
     #different from 7?????? Not implimented yet.
     ##################################################################
     sed '/Stage1Laser=enable/s/Stage1Laser/#Stage1Laser/g' \
                                          < VegasSimProductionS1S2.scr >tmp1
     sed '/#Stage1Data=enable/s/#Stage1Data/Stage1Data/g'        <tmp1 >tmp2
     sed '/#Stage2=enable/s/#Stage2/Stage2/g'                    <tmp2 >tmp1
     sed '/Stage4=enable/s/Stage4/#Stage4/g'                     <tmp1 >tmp2
     sed '/Stage5=enable/s/Stage5/#Stage5/g' \
                                           <tmp2 >VegasSimProductionS1S2.scr
     rm tmp1
     rm tmp2
    fi
fi
############################################################################

if [ -n "$CheckStage2Files" ]; then
  echo '##########################################################'
  echo '# CheckStage2Files'
  echo '##########################################################'
fi
############################################################################

if [ -n "$GenerateSubLTListFiles" ]; then
   echo '##########################################################'
   echo '# GenerateSubLTListFiles'
   echo '##########################################################'
   cd $lcl
   date
   ListNames='SubLT'$1$BinSizeForNoise'Sample*Deg*noiseList'
   rm $ListNames
fi
#############################################################################


MissingListName='CheckPedvarMissingList'
 

#############################################################################
#now we loop over Zn,AZ WblOffset and PedVar
#############################################################################
#Zenith
let izn=0
let iznEnd=${#Zenith[@]}
let iFilesNotFound=0
while test $izn -lt $iznEnd
  do

   #Azimuth
   let kaz=0
   let kazEnd=${#Azimuth[@]}
   while test $kaz -lt $kazEnd
    do
     #Make   Zn_Az string
     if test ${Azimuth[$kaz]} = "0"
      then
       ZnAz=${Zenith[$izn]}'Deg'
     else
       ZnAz=${Zenith[$izn]}'_'${Azimuth[$kaz]}'Deg'
     fi
     ####################################################################
     # Iterate over WBLOffsets and PedVars
     ####################################################################
     #WblOffset
     let iwbl=0
     let iwblEnd=${#WblOffset[@]}
     while test $iwbl -lt $iwblEnd
        do
         WBL=${WblOffset[$iwbl]}
	 if [ "$WBL" !=  '0.0' ]; then
	     WBLSPEC=S$WBL'Wbl'
	 else
	     WBLSPEC=$WBL'Wbl'
	 fi
         #Iterate through PedVars
         let kpvar=0
         let kpvarEnd=${#PedVar[@]}
         while test $kpvar -lt $kpvarEnd
           do
             #Test for defaults
            PV=${PedVar[$kpvar]} 
	    if test "$PV" = "0"
             then
              PedVarFile=""
              PedVarName=""
             else
              PedVarFile=Ped$PV
              PedVarName=PedVar$PV
             fi  
   
# *****************************************************************************
#  Now all the things we can do for a particular Zn,AZ,WblOffset and PedVar
# *****************************************************************************
            #Generate  file names
 
            BaseFile=$1$PMT$3$4$ZnAz'2D'$WBLSPEC$8
            VBFFILE=$BaseFile'1234M2.vbf'
   
            ################################################################
	    
	    if [ -n "$GetVBFFileFromArchive" ]; then
             echo '##########################################################'
             echo '# GetVBFFileFromArchive'
	     echo '##########################################################'
	     cd $lcl
	     date
	     if [ ! -e "$VBFFILE" ]; then
                hsi 'cd '$ARCHIVE$1$PMT$3$4'VBF; get '$VBFFILE';'
             fi
            fi
            
            ###############################################################


            if [ -n "$GenerateStage2Files" ]; then
             #echo '##########################################################'
             #echo '# GenerateStage2Files '
	     #echo '##########################################################'
	     cd $lcl
	     date
	     echo PV:$PV
      
             echo "VAAuto: Submitting VegasSimProductionS1S2 to '$QUEUE' queue for " $lcl'/'$VBFFILE 
            sgeFile=$lcl'/'$PedVarFile$BaseFile'.pbs'
            echo "#"PBS -l walltime=$WALLTIME                >$sgeFile
            if [ -n "$CARVER" ]; then
              echo "#PBS -l pvmem=5GB"                      >>$sgeFile
            fi
            if [ -n "$HANSEN" ]; then
              echo "#PBS -l mem=15GB"                       >>$sgeFile
              echo source /etc/profile                      >>$sgeFile
              echo module load gcc/4.7.2                    >>$sgeFile
            fi
            echo cd $lcl                                    >>$sgeFile
            echo $lcl'/'VegasSimProductionS1S2.scr  \\      >>$sgeFile
            echo $VBFFILE  $PedVarFile \\                   >>$sgeFile
            echo ' >'$lcl'/'$PedVarFile$BaseFile'VBF.log'   >>$sgeFile
            chmod 700 $sgeFile
            qsub -q $QUEUE  -V -e $PedVarFile$BaseFile'.err' -o $PedVarFile$BaseFile'pbs.log' $sgeFile 
           fi
           ###############################################################


           if [ -n "$CheckStage2Files" ]; then
            # echo '##########################################################'
            # echo '# CheckStage2Files'
	    # echo '##########################################################'
	     cd $lcl
	     date
	     FileName=$PedVarName$VBFFile
             #Check file exists
             if [  ! -e "$FileName" ]; then 
                echo $FileName >>$MissingListName
             fi
           fi        
           ###############################################################

           if [ -n "$GenerateSubLTListFiles" ]; then
            # echo '##########################################################'
            # echo '# GenerateSubLTListFiles'
	    # echo '##########################################################'
	     cd $lcl
	     Z=${Zenith[$izn]}
	     ListName='SubLT'$1'7Sample'$Z'Deg'$PV'noiseList'
	     FileName=$PedVarName$BaseFile'1234M2.root'
	     echo $FileName >>$ListName
           fi        
           ###############################################################

 
     ################################################
     #Should all be done now. Go on to next combo.
     ################################################
          let kpvar=$kpvar+1
         done
        let iwbl=$iwbl+1
       done
      kaz=$((kaz+1))
    done
   izn=$((izn+1))
  done
 date
echo 'VAAuto: All done!--Good bye!'
###########################################################################

if [ -n "$GenerateSubLTConfigFiles" ]; then
   echo '##########################################################'
   echo '# GenerateSubLTConfigFiles'
   echo '##########################################################'
   cd $lcl
   date
   # *************************************************************************
   # Generate template config file
   # Change for KASCADE and Number of samples
   # *************************************************************************
   $VEGAS/showerReconstruction2/bin/produce_lookuptables -save_config_and_exit tmp1
   sed '/CorePositionFractionalErrorCut/s/100/.25/g' <tmp1 >tmp2
   sed '/CorePositionAbsoluteErrorCut/s/1000/20/g'   <tmp2 >tmp1
   sed '/LTC_SimulationType/s/GrISU/KASCADE/g'       <tmp1 >tmp2
   sed '/LTM_FillType "MEDIAN"/s/MEDIAN/MEAN/g'      <tmp2 >tmp1
   sed '/LTM_WidthFillType " "/s/" "/"MEAN"/g'       <tmp1 >tmp2
   sed '/LTM_LengthFillType " "/s/" "/"MEAN"/g'      <tmp2 >tmp1
   sed '/LTM_EnergyFillType " "/s/" "/"MEAN"/g'      <tmp1 >tmp2
   sed '/LTM_EaxisEnergyFillType " "/s/" "/"MEAN"/g' <tmp2 >tmp1
   sed '/TelID        /s/TelID/TelID  '$TelIDStr'/g' <tmp1 >tmp2
   sed '/Azimuth      /s/Azimuth/Azimuth '$AzStr'/g' <tmp2 >tmp1
   sed '/Zenith         /s/Zenith/Zenith '$ZNStr'/g' <tmp1 >tmp2
   sed '/Noise         /s/Noise/Noise '$NoiseStr'/g' <tmp2 >tmp1
   sed '/luteOffset    /s/Offset/Offset '$ABOStr'/g' <tmp1 >tmp2
   sed '/Log10SizePerBin/s/0.04/0.07/g'              <tmp2 >tmp1
   sed '/ImpDistUpperLimit/s/400/800/g'	             <tmp1 >tmp2
   sed '/Log10EaxisEnergyUpperLimit/s/6/5/g'         <tmp2 >tmp1
   #Set the number of samples for noise
   sed '/LTM_WindowSizeForNoise/s/7/'$BinSizeForNoise'/g' <tmp1 >tmp2
   #Replace HillasBranchName argument
   sed '/HillasBranchName "H"/s/"H"/"'$HMode'"/g'    <tmp2 >config1.tmp
   #****************************************************************************
   #We make a seperate Sub LT config file for each of ZN, and  noise 
   #combination
   # *****************************************************************************
   #now we loop over Zn and PedVar
   #############################################################################
   #Zenith
   let izn=0
   let iznEnd=${#Zenith[@]}
   if test $iznEnd -lt "1" 
   then
       echo 'VAAuto: Fatal! Need at least 2 ZN values specified'
       exit
   fi
   let kpvarEnd=${#PedVar[@]}
   if test $kpvarEnd -lt "1"
   then
       echo 'VAAuto: Fatal! Need at least 2 PedVar values specified'
       exit
   fi
   
   while test $izn -lt $iznEnd
     do
       #Iterate through PedVars
       let kpvar=0
       while test $kpvar -lt $kpvarEnd
         do
           #Test for defaults
           PV=${PedVar[$kpvar]} 
           #############################################################
           #Now we need to "edit the new config file
           #############################################################
           #Figure out what the Zenith argument should look like
           if test $izn -eq "0" 
            then
             Zn=${Zenith[izn]}','${Zenith[1]}
            else
             Zn=${Zenith[0]}','${Zenith[izn]}
           fi
           ZNLBL=${Zenith[izn]}
	   #now replace Zenith argument and put in a tmp file
           sed '/Zenith/s/'$ZNStr'/'$Zn'/g' <config1.tmp >config2.tmp

           ##############################################################
           #Now do the same for the Noise but put in final file
           if test $kpvar -eq "0" 
            then
	     Ns=${PedVar[$kpvar]}','${PedVar[1]}
            else
	     Ns=${PedVar[0]}','${PedVar[$kpvar]}
           fi

           NsLBL=${PedVar[$kpvar]}
           #Construct the Sub Lt Config File Name
           ConfigName='SubLT'$1$BinSizeForNoise'Sample'$ZNLBL'Deg'$NsLBL'noise'$HMode'.config'
           #now replace AbsoluteNoise  argument and put in a final file
           sed '/Noise/s/'$NoiseStr'/'$Ns'/g'  <config2.tmp >$ConfigName
	
           rm config2.tmp

           ################################################
           #Should all be done now. Go on to next combo.
           ################################################
           let kpvar=$kpvar+1
         done
       izn=$((izn+1))
     done
  date
  echo 'VAAuto: All done!'
fi
#############################################################################

