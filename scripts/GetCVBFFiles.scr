#!/bin/bash
##################################################################################
#This script reads in an input LOGGEN created run file list (with spaces as 
#delimiters, not commas!) and transfers the .cvbf files to the carver local disk using
# bbftp from the UCLA archive (unless they alread exist, or can be retrieved from the 
# archives)
# Also will update Purdue data archives if so instructed.
#********************************************
##################################################################################
#Arguments:
#$1:  File created by LOGGEN  with each line haveing: date (Ex 20131225), 
#     Data run number( Ex 71223), and 4 flasher runs for that data run (Ex. 71218). 
#     The 4 flasher runs may be duplicates.
#$2  Source Directory name to put these files in (usually a source name). Ex Crab. 
#     Also this will be the name of the source directories in the  Purdue 
#     Archive files.
###################################################################################
# Archetecture ideas:
#Create a function that reads in the loggen file and creates another 
#file that has the full name of each requested file in it. Seach and remove 
#duplicates. Later this file will be used to get date info for the Purdue. 
#archives.  With this list of filenames we can search for their existance
#locally or on the archives before we try to transfer them from UCLA.
#####################################################################################

#**********************************
# Control options:
#**********************************

SkipExistingFiles=enabled           #Comment out this line to cause existing files 
                                    #on disk (and in archives) to be replaced

#GetFilesFromPurdueArchive=enabled (Not yet implimented)

#SaveFilesToPurdueArchive=enabled(Not yet implimented)

#####################################



function usage()
{
  echo '***GetCVBFFiles usage:'
  echo '   $1 is List of runs generated by loggen (no commas) Ex:CrabJan2014LoggenList'
  echo '   $2:Source directory name(optional): Ex:  crab or segue1'
  echo ' Ex:  ./GetCVBFFiles  Segue1Dec2013LoggenList segue1'
  echo '***'
}
##################################################################################

function createUCLAFileNameList()
########################################################################
#Read in the loggen file and creates another file that has the full UCLA name of each 
#requested file in it.
#Arguments
#$1 LogGen list file name.
#$2 bbftp filename list
########################################################################
{
  LoggenFile=$1
  bbftpList=$2
  if [ -e "$bbftpList" ]; then
      rm $bbftpList
  fi

  {
    while read date dataRun flasherRun1 flasherRun2 flasherRun3 flasherRun4
      do
        dataFile='/veritas/data/d'$date'/'$dataRun'.cvbf'
	echo $dataFile >>$bbftpList

	if [ -n "$flasherRun1" ]; then
               flasherFile1='/veritas/data/d'$date'/'$flasherRun1'.cvbf'
	       echo $flasherFile1 >>$bbftpList
        fi

        if [ -n "$flasherRun2" ]; then
	    flasherFile2='/veritas/data/d'$date'/'$flasherRun2'.cvbf'
	    echo $flasherFile2 >>$bbftpList
        fi

        if [ -n "$flasherRun3" ]; then
	     flasherFile3='/veritas/data/d'$date'/'$flasherRun3'.cvbf'
             echo $flasherFile3 >>$bbftpList
        fi

	if [ -n "$flasherRun4" ]; then
             flasherFile4='/veritas/data/d'$date'/'$flasherRun4'.cvbf'
             echo $flasherFile4 >>$bbftpList
	fi

     done
  }<$LoggenFile
}
###############################################################################

function removeDuplicates()
#############################################################################
#Remove dublicate filenames from the list file.
##############################################################################
{
 list=$1
 tmpList=$list'.tmp'    #List we will construct without duplicates
 {
   let first=1
   while read fileSpec
   do
     if [ "$first" = "1" ]; then
       echo $fileSpec >$tmpList
       let first=0
     else
       found=0
       {
         while read tmpFileSpec 
           do
            if [ "$fileSpec" = "$tmpFileSpec" ]; then
              let found=1
	      break
	    fi
         done
       }<$tmpList
       if [ "$found" = "0" ]; then
         echo $fileSpec >>$tmpList
       fi
     fi
   done
  }<$list
  mv $tmpList $list
}
################################################################################



function getFilesFromUCLA()
###############################################################################
#Get the files in the list using bbftp. Simple transfer 1 file at a time
#may have "exceed run time" problem
###############################################################################
#Still to do:
#1:No recovery yet for nonexistent files
#
#Arguments:
#$1 file on UCLA list
{
 fileList=$1
 {
   while read fileName
    do
      #echo fileName: $fileName
      bbftp -u bbftp -p 12 -S -V -e " get $fileName ./ "  gamma1.astro.ucla.edu
    done
 }<$fileList
}
###############################################################################

function removeExistingFilesFromList()
##############################################################################
#Check the local disk and see if we already have some of the requested files
##############################################################################
{
  tlist=$1
  NLIST=notexistList
  if [ -e "$NLIST" ]; then
    rm $NLIST
  fi

  {
    while read file
      do
        #Strip off file name
        lfile=${file##*/}
	if [ !  -e "$lfile" ]; then
	    if [ -e $NLIST ]; then
               echo $file >>$NLIST
            else
               echo $file >$NLIST
            fi
        fi
    done
  }<$tlist
  if [ ! -e "$NLIST" ]; then
     echo '***GetCVBFFiles:  We already have all files listed in ' $LIST
     exit
  else
    mv $NLIST $tlist
  fi
}
##########################################################


function putFilesInCarverArchive()
##########################################################
{
  tlist=$1
  srcdir=$2
  ############################################################################
  #we will use tlist (which are the new files from ucla) to place files in the carver
  #archive in the "/nersc/projects/data/d...." directory.  We will also put a link in 
  # the src directory to the data file
  ##############################################################################
  #This is a little tricky if we want to use the parallel putting and getting of
  #hsi.  At present all the.cvbf files in the tlist are in the source directory.
  # we will add to the source directory date directories (like d20140101) that have a 
  #link  to each .cvbf from that date that are in the soucre directory and are in 
  #the tlist. The archive should by this time have usch date directories and the 
  #source directory already setup.This will allow us to do a hsi command: "put d*/* 
  # which will write the source files to the date directories. We will follow this 
  #by putting in the archive source directories links to those files in the date 
  #direcdtories.
  ###############################################################################
  #If source dir was specified create the source and date  directories for the new 
  #files  on the Carver veritas. If not just put runs in date directories
  # data directory:


  tlist=$1
  sdir=$2
  dateList=dates.tmp
  if [ -e "$dateList" ]; then
     rm $dateList
  fi

  adir=/nersc/projects/veritas/data

  #######################
  #Make a list of date directories
  # remove duplicates
  #######################
  {
    while read file 
     do
       DDIR=${file%/*}
       DDIR=${DDIR##*/}
       echo $DDIR >>$dateList
     done
  }<$tlist
  removeDuplicates $dateList

  ###############################
  # Make the date directories and transfer the data
  ###############################
  {
    while read date
     do
       #############
       # use quiet mode (-q)
       #############
      hsi -q  'cd '$adir'; mkdir '$date'; chmod 775 '$date'; chgrp m1304 '$date';'  
     done
  }<$dateList
  rm $dateList

  ##################################
  # Transfer all the files at once   
  cd $lcl
  hsi  'cd '$adir';put -X20 d*/*;'

  #######################
  #if defined make source directory
  #######################
  if [ -e "$sdir" ]; then
      hsi -q 'cd '$adir'; mkdir '$sdir';'
  
     #######################
     #Make links in hsi source director to the data files in the date
     #directors. This is opposite of situation on disk
     #######################
     cd $lcl
     {
       while read pathDateRun
       do 
        #Get dat directory name and Run name
        DDIR=${pathDateRun%/*}
        DDIR=${DDIR##*/}
	RUN=${pathDateRun##*/}
        #make sure we were able to pick this run up to start with.    
	if [ -e "$RUN" ]; then
            #make the link
	    hsi -q 'cd '$adir'/'$sdir '; ln -s '$adir'/'$DDIR'/'$RUN' '$RUN' ;'
        fi
       done
     }<$tlist
  
     ###########################
     #Fix protections and group.
     #links will propagate to data files.
     ###########################
     hsi -q 'cd '$adir'; chmod -R 775 '$sdir';'
     hsi -q 'cd '$adir'; chgrp -R m1304 '$sdir';'
  fi
     
}
#############################################################################




###############################################################################
#Main script
##############

if [  ! -n "$1" ]; then
        usage
        exit
fi

lcl=$PWD
LGList=$1
LIST=veritasUclaList     #internal file
SRCDIR=$2


########################################
#Create the list fof filenames:
createUCLAFileNameList $LGList $LIST

########################################
# Remove Duplicates 
removeDuplicates $LIST


#########################################
#Using SRCDIR determine if we are in the "source" directory or if we
# have to make one and move to it
#########################################
lclDir=${lcl##*/}
echo lclDir: $lclDir
echo SRCDIR: $SRCDIR


if [ -n "$SRCDIR" ]; then
  if [ "$SRCDIR" != "$lclDir" ]; then
    mkdir -p $SRCDIR
    cd $SRCDIR
    mv ../$LIST .
  fi
else
  echo ###############################
  echo ****GetCVBFFiles: No source specified. 
  echo ****GetCVBFFiles:Putting all files in their respective Date directories
  echo ###############################fi
fi
#############################################################
#If no source directory was specified all runs will be put in the current directory
#############################################################


lcl=$PWD
echo '*****GetCVBFiles: Requested .cvbf files will be placed in '$lcl

TLIST=tempList
CLIST=CarverArchiveList
PLIST=PurdueArchiveList

mv $LIST $TLIST


if [ -n "$SkipExistingFiles" ]; then
         #Remove Files already on disk
     echo #################################
     echo ****GetCVBFFiles: SkipExistingFiles
     echo ****GetCVBFFiles: Do Not overwrite existing files on disk.
     echo #################################
     removeExistingFilesFromList $TLIST 
else
     echo #################################
     echo ****GetCVBFFiles: Overwriteing existing files on disk.
     echo #################################
fi


if [ -n "$GetFilesFromCarverArchive" ]; then
  ########################################
  # GetFilesFromCarverArchive
  ########################################
  #Find files that are being requested but that we don't already have on disk but do 
  #have in the carver archive. Remove them from TLIST

  echo #######################################
  echo ****GetCVBFFiles: GetFilesFromCarverArchive
  echo #######################################

  findFilesInCarverArchive $TLIST $CLIST $lcl
  getCarverArchiveFiles $CLIST
fi


if [ -n "$GetFilesFromPurdueArchive" ]; then
  ########################################
  # GetFilesFromPurdueArchive
  ########################################
  #Find files that are being requested but that we don't already have on disk but do 
  #have in the Purdue archive. Remove from TLIST

  echo #######################################
  echo ****GetCVBFFiles: GetFilesFromPurdueArchive
  echo #######################################

  findFilesInPurdueArchive $TLIST $PLIST $lcl
  getPurdueArchiveFiles $PLIST
fi

########################################
# transfer requested files from UCLA to local disk
############################################
getFilesFromUCLA $TLIST


###########################################


if [ -n "$SaveFilesToCarverArchive" ]; then
  #########################################
  #SaveFilesToCarverArchive
  #########################################
  #Transfer files to Carver archives Make source links

  echo #######################################
  echo ****GetCVBFFiles: SaveFilesToCarverArchive
  echo #######################################

  cd $lcl

  ##################################
  # Generate links to new files in data directories
  # in prep for transfering to Archives amoung other things
  # create data dirs as needed
  ##################################
  # TLIST has list of all bbftp/date/RUNname 
  # we tried to read in from UCLA
  ###################################
  {
    while read pathDateRun
      do
        #Get dat directory name and Run name
        DDIR=${pathDateRun%/*}
        DDIR=${DDIR##*/}
	RUN=${pathDateRun##*/}    
        echo DATE,RUN: $DDIR $RUN

        #See if we have this run
        if [ -e "$RUN" ]; then
           #Make the date dir (weven if its already made) and put a link in it.
           mkdir -p $DDIR
	   cd $DDIR
           echo $PWD
	   ln -sv ../$RUN $RUN
           cd $lcl
        fi
     done
  }<$TLIST
     
  putFilesInCarverArchive $TLIST $SRCDIR

fi



if [ -n "$SaveFilesToPurdueArchive" ]; then
  #########################################
  #SaveFilesToPurdueArchive
  #########################################
  #Transfer files to Purdue archives Make source links

  echo #######################################
  echo ****GetCVBFFiles: SaveFilesToPurdueArchive
  echo #######################################

  putFilesInPurdueArchive $TLIST $SRCDIR

fi


