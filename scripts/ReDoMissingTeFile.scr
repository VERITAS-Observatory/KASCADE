#$1 Check.log file generated by a call of the type:
#  ./KSAuto.scr G S U 1 0,45,90,135,180 45mv MDL10U ABCD 64954StdCuts.root 
#       >Check.log  with "CheckGeneratedTeFiles=enabled" enabled.
#$2 Threshold: 45mv or 50mv 
#$3 Particle type Defauls to G  Optional P He4_  E
#$4 Results Disk: Local SV or global GSV (Edison only, otherwise ignored)
# *********************************************************************

#PARAFLYUPPERENERGY=20000
PARAFLYUPPERENERGY=100        #Special for Electron spectrum

function usage()
{
 echo '***ReDoMissingTeFile usage:'
 echo '   $1: File with Missing Te Files in form: File Not found: SOG1_135Deg2DGeV36550te.d8'
 echo '   $2: Threshold: 45mv or 50mv'
 echo '   $3: Particle type Defauls to G  Optional P He4_  E'
 echo '   $4: Results Disk (Edison only)Optional: SV or GSV (default is SV)'
 echo ' EX: ./ReDoMissingTeFile.scr CheckTeMDL8OAIJKL1_0-135From.log  50mv G GSV'
 echo '***'
}

function setup()
{
  lcl=$PWD

  SetupForHost

 
  if [ -n "$CORI" ]; then
    dataDirBase=$SCRATCH/simulations
    echo Cori Data Dir: $dataDirBase
    mkdir -vp $dataDirBase
    workingDir=$SCRATCH
    echo WorkingDir: $workingDir
  fi


  if [ -n "$BELL" ]; then
    dataDirBase=$SCRATCH'/simulations'
    echo Bell Data dir: $dataDirBase
    mkdir -vp $dataDirBase
    workingDir=$SCRATCH
      let NumParaFly=0
      let NumCores=48
      let NumThreadsToUse=10
      let MaxNumInParaFlyList=20
  fi

  dataDirBase=$dataDirBase'/veritas'

  if [ "$PARTYPE" = "G" ]; then
	dataDir=$dataDirBase'/gammas'
  fi
  
  if [ "$PARTYPE" = "E" ]; then
	dataDir=$dataDirBase'/electrons'
  fi

  if [ "$PARTYPE" = "P" ]; then
     dataDir=$dataDirBase'/protons'
  fi

  if [ "$PARTYPE" = "He4_" ]; then
     dataDir=$dataDirBase'/he4'
  fi

  if [ ! -n "$dataDir" ]; then
     echo ReDoMissingTeFile - Bad particle spec: $PARTYPE ':Allowable are G or E or P or He4_'
     exit
  fi

   mkdir -vp $dataDir
   echo Final dataDir: $dataDir

  ####################################################################
  # Bring in ksallVBF and make sure its set up right
  cp $KASCADEBASE/scripts/ksallVBF.scr ksallVBFReDoTE.scr
  chmod 775 ksallVBFReDoTE.scr
  sed '/#KascadeEnable=enable/s/#Kascade/Kascade/g' <ksallVBFReDoTE.scr >tmp1
  sed '/#LightEnable=enable/s/#Light/Light/g'                     <tmp1 >tmp2
  sed '/#PeSortMergeEnable=enable/s/#PeSort/PeSort/g'             <tmp2 >tmp1
  sed '/#TriggerEnable=enable/s/#Trigger/Trigger/g'               <tmp1 >tmp2
  sed '/AomegaEnable=enable/s/Aomega/#Aomega/g'                   <tmp2 >tmp1
  sed '/ArrayTrigEnable=enable/s/Array/#Array/g'                  <tmp1 >tmp2
  sed '/#Production=enable/s/#Production/Production/g'            <tmp2 >tmp1
  sed '/#RemoveSingleVBFEnable=enable/s/#Remove/Remove/g'         <tmp1 >tmp2
  sed '/#CleanupEnable=enable/s/#Cleanup/Cleanup/g'               <tmp2 >tmp1
  sed '/#DebugPrintEnable=enable/s/#Debug/Debug/g'                <tmp1 >tmp2
  sed '/#VBFOutputToDetectorSpecDir=enable/s/#VBF/VBF/g'          <tmp2 \
                                                           >ksallVBFReDoTE.scr
  chmod 775 ksallVBFReDoTE.scr
  rm tmp1
  rm tmp2
  ####################################################################
 

}
#############################################################################

function BuildAndSubmitJobsSingly() 
#**********************************************************************
# Cause  serial jobs to be submitted.
# This version submits 1 job per shower.
#**********************************************************************
#$1 energy in GeV
#$2 showerID
#$3 particle spec Ex SuG20_180Deg2D
{
 if [ ! -n "$2" ]; then
  echo Missing arguments
  exit
 fi

 eGeV=$1     
 showerID=$2
 pr=$3


 let E=${eGeV%%.*}

 parspec=$pr$THR'1234M2'

 echo Entry:  $parspec $eGeV $showerID
 
#Make up the .pbs file name
 sgeFile=$lcl'/K'$eGeV'd'$showerID$pr.pbs

 SgeFilePBSCmds  $sgeFile $E
 SgeFileBashCmds $sgeFile

 echo $lcl'/ksallVBFReDoTE.scr '$eGeV $parspec $showerID \\   >>$sgeFile
 echo $showerID $dataDir $workingDir \\                       >>$sgeFile
 echo ">>"$lcl"/ksProduction_"$eGeV'd'$showerID$parspec".log" >>$sgeFile

 chmod 700 $sgeFile
 
 #Submit the pbs file
 $QSUB -e k$eGeV'd'$showerID$parspec.err -o k$eGeV'd'$showerID$parspec.log $sgeFile 
}
#**********************************************************************

function BuildForParaFlySubmission() 
#**********************************************************************
# Cause serial jobs to be submitted in a mass form using Parafly
# This version submits $NumCoreToUse  shower jobs per ParaFly pbs submission
# 
#**********************************************************************
#$1 energy in GeV
#$2 showerID
#$3 particle spec Ex  WUG20_180Deg2D
{
 local eGeV=$1     
 local showerID=$2

 if [ ! -n "$3" ]; then
   echo 'ReDoMissingShowerVBF: Fatal - needs particle spec like WUG20_180Deg2D'
   exit
 fi
 local SPECSHWR=$3
 
 let E=${eGeV%%.*}
 
 ####################################################################
 # assumes 45mv threhold spec
 ####################################################################

 local  parspec=$pr$THR'1234M2'
 echo Entry:  $SPECSHWR $eGeV $showerID

 # ****************************************
 # See if we need to start a new ParaFly file 
 # ****************************************
 if [ "$NumParaFly" -eq "0" ]; then
    GetUniqueNumber
    ParaFlyFile=$lcl/ParaFly$SPECSHWR'.'$UNIQUE'.cmd'  # Not local!
    rm $ParaFlyFile
 fi
 
 # ******************************************
 # Add command to process this shower.
 # No continuations allowed in ParaFly cmd file
 # ******************************************
 local PFLYCMD=$lcl'/ksallVBFShowerVBF.scr '$eGeV' '$parspec' '$showerID' '$showerID' '$dataDir' '$workingDir" >>"$lcl"/ksProduction_"$eGeV'd'$showerID$parspec".log"

 echo $PFLYCMD  >>$ParaFlyFile
 NumParaFly=$((NumParaFly+1))     # Not local

 # See if time to submit this list of commands.
 if [ "$NumParaFly" -ge "$MaxNumInParaFlyList" ]; then
    SubmitParaFlyPBSJob
    let NumParaFly=0
 fi	
}
# *************************************************************************

function SubmitParaFlyPBSJob
{
  #Make up the .pbs file name
  GetUniqueNumber
  local sgeFile=$lcl/K$UNIQUE$parspec'.pbs'

  #Build the pbs file.
  if [ "$E" -gt "$PARAFLYUPPERENERGY" ]; then
   echo "#"PBS -q $QUEUE1                          >$sgeFile
   echo "#"PBS -l walltime=$WALLTIMEH             >>$sgeFile
  else
   echo "#"PBS -q $QUEUE2                         >$sgeFile
   echo "#"PBS -l walltime=$WALLTIMEL             >>$sgeFile
  fi
  echo "#"PBS -l $MEMREQUEST                      >>$sgeFile
  
  if [ -n "$PURDUE" ]; then
    #Grab a complete Node
    echo "#"PBS -l nodes=1:ppn=$NumCores          >>$sgeFile 
    echo source /etc/profile                      >>$sgeFile
    echo module load gcc/4.7.2                    >>$sgeFile
  fi
  # Add the ParaFly Command
  echo ParaFly -c $ParaFlyFile -CPU $NumThreadsToUse  -failed_cmds FailedCommands$UNIQUE  >>$sgeFile
 
  chmod 700 $sgeFile 
  
  qsub$QSUBEXT -V -e $sgeFile'.err' -o $sgeFile'.log' $sgeFile 
}
#**********************************************************************

#**********************************************************************
#Main program
########################################################################
if [  ! -n "$2" ]; then
	usage
	exit
fi


##################
# Bring in GetUniqueNumber function
##################
if [ ! -e UtilityFunctions.scr ]; then
    cp $KASCADEBASE/scripts/UtilityFunctions.scr ./
fi
source UtilityFunctions.scr

CheckFile=$1
THR=$2
if [ !  -n "$3" ]; then
   PARTYPE='G'
else
   PARTYPE=$3
   if [ -n "$4" ]; then
     DatDirFlag=$4
   fi
fi
echo CheckFile: $CheckFile  THR: $THR  PARTYPE: $PARTYPE

setup

#######################################################
#Just want the "File Not Found" lines.
#######################################################

grep "File Not found:" $CheckFile >tmp1

#######################################################
#Now we will parse these lines to end up with a file with
#all the info we need to create a .pbs file and submit it.
#A line in the input file will look like:
#   "File Not found:              SUG1_45Deg2DGeV28.6te.d51"
# In the ouput file it becomes:  "SUG1_45Deg 28.6 51"
#######################################################

  sed '/File Not/s/2DGeV/2D /g'               <tmp1     >tmp2 #For G and E
  sed '/File Not/s/GeV/ /g'                   <tmp2     >tmp1 #For P and He4_
  sed '/File Not/s/te.d/  /g'                 <tmp1     >tmp2
  sed '/File Not/s/File Not found\:/  /g'     <tmp2     >tmp1

##############################################################
#Read in the file we just created and cause the job to be submited
##############################################################
let count=0
{  
  while read pr energy showerID
    do
       if [ $count -gt "$SUBMITLIMIT" ]; then
         echo 'ReDoMisingTeFile--Over ' $SUBMITLIMIT 'te file creation submisions to '$QUEUE ' queue. Not gonna do any more!'
         exit
       fi
       
       if [ -n "$PURDUE" ]; then
         let E=${energy%%.*}
         if [ "$E" -gt "$PARAFLYUPPERENERGY" ]; then	
            BuildAndSubmitJobsSingly $energy $showerID $pr  
         else
	    BuildForParaFlySubmission $energy $showerID $pr 
         fi
       else
       
         BuildAndSubmitJobsSingly $energy $showerID $pr  
       fi

       count=$((count+1))
    done
}<tmp1
echo $count ' Te file creation submissions'


