#!/bin/bash
# Check for files existance and non 0 length
#$1 filename (after addin .Result) with list of files that failed the check
#                      Prefaced  by "File Not found:"
#$2 TeName value: ex: WVG10_315Deg2D
#$3 Particle: Ex: G or E or P or He4_
#$4 File Type ( TE or VBF )
#$5 EntryStart:ex usually 1
#$6 EntryEnd:  ex 45 or maybe 47
#$7 VBF only: Threshold Ex. 45mv or 50mv  or M45mv. Needed for VBF filename.
#$8 File directory name. (includes full path)
#     
########################################################################


function LookForBadPeCounts()
{
 #$1 Log File name
 #########################################################
 #Writing out gets one more than it should if this file has a end-of-run-record
 ##########################################################
 LOGFILE=$1

 grep "Number of photons written out" $LOGFILE >kslitetxt.tmp
 {
  while read a b c e f g
   do
    if [ !  -n "$g" ]; then
      Found=0
      echo Failed 1
      return
    fi
    numpes=$g
   done
 }<kslitetxt.tmp

 grep "ksPesortMerge: Number of PEs read in:" $LOGFILE >pesortIntxt.tmp
 numfound=1
 {
  while read a b c e f g h
   do
     if [ ! -n "$h" ]; then
       Found=0
       echo Failed 2
       return
     fi
     numfound=$h
   done
 }<pesortIntxt.tmp

 if [ "$numfound" != "$numpes" ]; then
   Found=0
   echo Failed 2.1
   retrun
 fi

 grep "ksPeSortMerge: Successful Sort(I checked!)" $LOGFILE >pecheckok
 {
  while read a b c
   do
     if [ "$b" != "Successful" ]; then
       Found=0
      echo Failed 3
       return
     fi
   done
 }<pecheckok

 grep "ksPeSortMerge: Number of Sorted PEs written out:" $LOGFILE >sortout.tmp
 {
  while read a b c e f g h i
   do
     if [ ! -n "$i" ]; then
       Found=0
       echo Failed 4
       return
     fi
     if [ -n "$eorFile" ]; then 
       let j=$i
       j=$((j-1))
       i=$j
     fi
     numfound=$i
   done
 }<sortout.tmp
 
 if [ "$numfound" != "$numpes" ]; then
   Found=0
   echo Failed 5
   return
 fi

 grep "ksTrigger: KSPeFile reports Number of Pe" $LOGFILE >kstrigin.tmp
 {
  while read a b c e f g h i
   do
     if [ ! -n "$i" ]; then
       Found=0
       echo Failed 6
       return
     fi
     numfound=$i
   done
 }<kstrigin.tmp

 if [ "$numfound" != "$numpes" ]; then
   Found==0
   echo Failed 7
   return
 fi
}
# ****************************************************************************

##########################
#  Main Code
##########################


#echo KSAutoFileCheck:args:1: $1' 2:' $2 ' 3:'$3' 4:' $4' 5:' $5' 6:' $6' 7:' $7

FileList=$1
TeName=$2
Particle=$3
FileType=$4
let iEntryStart=$5
let iEntryEnd=$6
Threshold=$7
FileDir=$8
MDLFLAG=$9

MinLevel=.3   #VBF minimum file size to be happy with.
eLimit="1000" #VBF minimum energy to look at.

if [ "$Particle" = "P" ] ||  [ "$Particle" = "He4_" ]; then
  MinLevel=.1
fi

ZNAZ=${TeName#*$Particle}
ZNAZ=${ZNAZ%%Deg*}
ZN=${ZNAZ%%_*}
echo ZN: $ZN

if [ "$ZN" = "70" ]; then
  MinLevel=.05
  eLimit="4000"
fi

lcl=$PWD
LOGDIR=$lcl'/log/'
if [ "$FileType" = "TE" ]; then
  mv ksProduction_*.log $LOGDIR  #For the PE Count test
fi

PSF=V190             #until we do Old Array!!! We will need another argument
#PSF=V330 
# Get the energy start end arrays for the shower specifications.
if [ "$Particle" = "P" ] ||[ "$Particle" = "He4_" ] ||[ "$Particle" = "G" ] ||[ "$Particle" = "E" ]; then
   if [ ! -e UtilityFunctions.scr ]; then
      cp $KASCADEBASE/scripts/UtilityFunctions.scr .
   fi
   echo 'KSAutoFileCheck: Testing particle type: ' $Particle 
   source UtilityFunctions.scr
   DefineShowers $Particle $MDLFLAG        #if MDLFLAG not given it is blank. 
else
   echo 'KSAutoFileCheck: Unknown Particle type specified: ' $Particle
   exit
fi

cd $FileDir

let jIndex=$iEntryStart
echo 'KSAutoFileCheck: Searching  for '$FileType' files in dir' $FileDir
if [ -e $FileList'.Result' ]; then
     rm $FileList'.Result'
fi
#echo j,iEntryEnd:  $jIndex $iEntryEnd

while test $jIndex -le $iEntryEnd
  do      
   let iShStart=${start[$jIndex]}
   let iShEnd=${end[$jIndex]}
   ENERGY=${energy[$jIndex]}

   let kIndex=$iShStart
   #echo j,k,iShEnd,e: $jIndex $kIndex $iShEnd $ENERGY

   #For VBF file size check
   let icount[$jIndex]=0
   let max[$jIndex]=0
   let sum[$jIndex]=0
   while test $kIndex -le $iShEnd
     do
      #Make up the file name
      #echo before namegens:FileType: $FileType
	
      if [ "$FileType" = "TE" ]; then
        NameFile=$TeName'GeV'$ENERGY'te.d'$kIndex
      fi
      if [ "$FileType" = "VBF" ]; then
        NameFile=$TeName$Threshold'1234M2GeV'$ENERGY'.d'$kIndex'.vbf'
      fi
      #echo Looking for: $NameFile
      
      Found=1
      ##################################
      #Check 1: (-s) Checks: does file exist and have non-0 length
      ##################################
      if [ -s "$NameFile" ]; then
	if [ "$FileType" = "TE" ]; then
	  ################################
	  #Check 2 for TE: Check log files to make sure total 
	  #        numbers of pes consistant in 4 
	  #         places and sort was sucessful
	  ##################################
          # Only check for entry index greater than 20
          if [ "$jIndex" -gt "20" ]; then
            logFile=$LOGDIR'/ksProduction_'$ENERGY'd'$kIndex$TeName$Threshold'1234M2.log'
            if [ ! -e "$logFile" ]; then
       	      echo No log file $logFile for $NameFile
       	    else
       	      LookForBadPeCounts $logFile
       	    fi
          fi
        fi
        
	eInt=${ENERGY%%.*}
	#echo eInt: $eInt eLimit: $eLimit
	if [ "$FileType" = "VBF" ] && [ "$eInt" -gt "$eLimit" ] ; then      
          ################################
          # Test ShowerVBF file size is at least $MinLevel of average shower 
          # size at this energy.  Start at enegies above eLimit GeV
          ################################
          # Collect info for ShowervBf files at this energy
	  ls -sl $NameFile >tmp
          {
            read size theRest
            icount[$jIndex]=$(( ${icount[$jIndex]} + 1))
            #echo jIndex: $jIndex icount: ${icount[$jIndex]}
            sum[$jIndex]=$(( ${sum[$jIndex]} + $size ))
            if [ "$size" -gt "${max[$jIndex]}" ]; then
              max[$jIndex]=$size
            fi
          }<tmp
           #############################################
           # A furthor test here of the Shower VBF file could be
           # just opening it. If the file had not oundergone a  "finish"
           # this would fail
           #############################################
        fi
      else
         Found=0
      fi
      
      if [ "$Found" = "0" ]; then
        echo 'File Not found: '$NameFile >>$FileList'.Result'
      fi
      let kIndex=kIndex+1
     done
   let jIndex=jIndex+1
  done

###############################################
# If this is a ShowerVBF test we need to finish the size test
###############################################
if [ "$FileType" = "VBF" ]; then
  let jIndex=$iEntryStart
  while test $jIndex -le $iEntryEnd
   do      
    ENERGY=${energy[$jIndex]}
    eInt=${ENERGY%%.*}
    if [ "$eInt" -gt "$eLimit" ]; then # Limit lowest energy
      if [ "${icount[$jIndex]}" -eq "0" ]; then
       	echo 'KSAutoFileCheck - Fatal - No files for energy: ' $ENERGY 'in directory' $FileDir
        exit
      fi
      # *****************************************************
      # use bc to do some math to find $MinLevel of max
      # **************************************************
      #echo jIndex: $jIndex
      #echo eInt: $eInt eLimit $eLimit sum: ${sum[$jIndex]} icount: ${icount[$jIndex]}
      Mean=$(echo "${sum[$jIndex]}/${icount[$jIndex]}" | bc)
      FracMax=$(echo "$MinLevel*${max[$jIndex]}" | bc)
      FracMax=${FracMax%%.*}
      FracMean=$(echo "$MinLevel*$Mean" | bc)
      FracMean=${FracMean%%.*}
      if [ ! -n $FracMax ] || [ ! -n $FracMean ]; then
        echo Fatal-No Max or Mean: energy: $ENERGY  FracMax: $FracMax  FracMean: $FracMean
        exit
      fi
      if [ "$FracMax" -lt "$FracMean" ]; then
        Min=$FracMax
        #echo FracMax
      else
        Min=$FracMean
        #echo FracMean
      fi

      let iShStart=${start[$jIndex]}
      let iShEnd=${end[$jIndex]}
      let kIndex=$iShStart      
      while test $kIndex -le $iShEnd
        do
         #Make up the file name
         NameFile=$TeName$Threshold'1234M2GeV'$ENERGY'.d'$kIndex'.vbf'
         if [ -s "$NameFile" ]; then #Make sure we havent already 
                                     #dumped this one
          ls -sl $NameFile >tmp
          {   
           read Size theRest
           let min="$Min"
	   let size="$Size"
	   if [ "$min" -gt "$size" ]; then
              echo 'File Not found: '$NameFile >>$FileList'.Result'
              echo $Mean $Min $size  >>$FileList'.Result'
           fi
          }<tmp
         fi 
         let kIndex=kIndex+1
        done
    fi
    let jIndex=jIndex+1
   done
fi

cd $lcl
#############################################################################
