#!/bin/bash
#This runs production ksArrayTrigger. Arguments are:
#$0 ./ksarraytriggerVBF.scr
#$1 primary Energy in gev (integer only)
#$2 Shower type specification string (To be included in config file names and 
#                                     in shower namesLike P1W,G1W, He4_1W)
#$3 Lowest flie id
#$4 Highest file id.
#$5 Adata disk directory.(Where output Te are and root and VBF files are to go,
# cannot be blank!!!)
#$6 Array Multiplicity and Trigger multiplicity for ksarraytriggerVBF only. 
                             Like 2of2_12--(default)  or 2of3_12-4.

function GetArrayConfig()
{
    if [ -z $TriggerMult ]; then
	ArrayConfig=12--
    else
        ArrayConfig=${TriggerMult##*_}
    fi
}

function GetArrayMultiplicity()
{
    if [ -z $TriggerMult ]; then
	ArrayMult=2of2
    else
        ArrayMult=${TriggerMult&&_*}
    fi
}

    
echo "**********************************************************************"
echo "**********************************************************************"

echo $0 $1 $2 $3 $4 $5 $6

TriggerMult=$6

src=$KASCADEBASE'/bin'
echo binary src dir is $src

inpDir=$KASCADEBASE'/inputs'
echo inputs dir is $inpDir

host=$(hostname)
echo Running on $host


#Set up private working directory for this run. 
#Keeps random number independent

#use combo of process id ($$)and number of nanosec(date +%N) since last 
#second tick to get unique value. (least count is micro sec at best)
let dirID=$(date +10#%N)+$$     # The 10# prevents leading 0's causeing errors
while [ -d "$dirID" ]; do
  let dirID=$(date +10#%N)+$$
done

cd workingScratch

#create working directory.
mkdir  $dirID
cd $dirID

wrkdir="$PWD"
echo Working Directory is $wrkdir

GetArrayConfig
GetArrayMult


#Make links to config files
ksArrayTriggerConfig=ksArrayTrigger$2$ArrayMult'.config'
ln -s $inpDir/$ksArrayTriggerConfig $ksArrayTriggerConfig

#All auxillary files are in wrkdir.
#All temp data kept in $wrkdir. 
#Final results go into $5;
#Make sure directory exists, if not create it.
if [ -z "$5" ]; then
    echo "ksarraytrigger:Data Directory must be specified"
    exit
fi
if [ ! -d "$5" ]; then
       mkdir -p $5
fi

#Setup unique random seed file into working dir.
cp -v $inpDir/ksArrayTrigger.ran ksArrayTrigger.ran 
                                              #Copy in a file to overwrite
let seedK=$(date +10#%N)+$$      #Add in process id ($$),10# prevents error

$src/randomCreateRanluxSeed -s $seedK -o ksArrayTrigger.ran
	                    #date +%N  +$$ gives Number of nanoseconds from 
			    #last second  + process id.
#Set up base name of showers. 
#Note it includes data path which better not be blank
ShwBase=$2'GeV'$1
Shwr=$5'/'$2'GeV'$1

#Setup to loop over showers


i="$3"
while test $i -le $4
  do
#ksArrayTrigger
    VBFFile=$Shwr'.d'$i'.vbf'             #Not local
#Make copies of files to use for different telescopes
    VBFFileMult=$Shwr'.d'$i'Mult.vbf'      #Not local

    ShowerNameOptions=''

    if [ ${ArrayConfig:1:1} = '1' ]; then
      VBFFileT1=$ShwBase'.d'$i'.T1.vbf'       #local
      cp -v $VBFFile $VBFFileT1 
      ShowerNameOptions=$ShowerNameOptions:' -T1ShowerFileName='
      ShowerNameOptions=$ShowerNameOptions:$VBFFileT1
    fi

    if [ ${ArrayConfig:2:1} = '2' ]; then
      VBFFileT2=$ShwBase'.d'$i'.T2.vbf'       #local
      cp -v $VBFFile $VBFFileT2 
      ShowerNameOptions=$ShowerNameOptions:' -T2ShowerFileName='
      ShowerNameOptions=$ShowerNameOptions:$VBFFileT2
    fi

    if [ ${ArrayConfig:3:1} = '3' ]; then
      VBFFileT3=$ShwBase'.d'$i'.T3.vbf'       #local
      cp -v $VBFFile $VBFFileT3 
      ShowerNameOptions=$ShowerNameOptions:' -T3ShowerFileName='
      ShowerNameOptions=$ShowerNameOptions:$VBFFileT3
    fi

    if [ ${ArrayConfig:4:1} = '4' ]; then
      VBFFileT4=$ShwBase'.d'$i'.T4.vbf'       #local
      cp -v $VBFFile $VBFFileT4 
      ShowerNameOptions=$ShowerNameOptions:' -T4ShowerFileName='
      ShowerNameOptions=$ShowerNameOptions:$VBFFileT4
    fi

   $src/ksArrayTrigger -config=$ksArrayTriggerConfig -RandomSeedFileName=ksArrayTrigger.ran $ShowerNameOptions $VBFFileMult
    i=$((i+1))			#do next shower
done



#Cleanup
cd $wrkdir
rm -vf *
cd ..
rmdir $dirID




