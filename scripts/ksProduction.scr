#!/bin/bash -l
# ***************************************************************************
#$1 Gets passed directly to ksallVBF.scr. Used here to specify what partmemcle 
#   types are to be processed. (G,P,He4_ or CR(causes P and He4_ , Or E for 
#   electrons)
#   For ksallVBF (minimum:up to kasallVBF.scr calling ksTrigger:
#     Atm-Telescope-Type-direction-threshold-arraytrigger specification 
#     designation: 
#     like: WUP1Deg50mv1234M2, SNHe4_1Deg50mv1234M2, SOG1Deg50mv1234M2,
#     WNG1DegS0.5Deg50mv1234M2.  
#     Giving a Type code of 'WUCR1Deg50mv1234M2 will cause 
#     both WUP1Deg50mv1234M2  and WUHe4_1Deg50mv1234M2 to be  run
#   For ksallVBF through ksArrayTrigger append the telescope designations: 
#     Like WNG20Deg2D50mv1234M2ABCD
#$2 has which script to run:  ksallVBF.scr
#        ksallVBF.scr is All-singing-all-dancing: ksKascade to ksArrayTrigger
#$3 Sort processing: Flags that a Sort will be requested and that we
#   should use the physics queue for the higher energies on Hansen/Conte. Not 
#   defined if jobs will take less than 4 hours.
#$4 QsubFileNameList file:OPTIONAL: 
#   This script creats all the .pbs shower files as requested and then submits
#   them to the appropiate queue itself. All of them.
#  If this argument is defined this script creates all the .pbs job files and 
#  then adds their names to the $QsubFileNameList file specified in this 
#  argument. The calling program (usually KSAuto.scr) then will submit the 
#  jobs in this file as it sees fit. (Used to keep the maximum allowable jobs 
#  in the queue but not more tan the maximum).
#$5 EntryStart: Default is G,E,P=1.
#$6 EntryEnd:   Default is G=45,E=44,P=45
#$7 EntryStart for HE4_: Default=5
#$8 EntryEnd for He4_: Default is 45
#$9 Optional DefineShowers(UtilityFunctions.scr)special flag(MDL) 
# *****************************************************************************
###########################################################################
#Functions to define thigs for various particle specs

function Protons()
#**********************************************************************
#Veritas/Whipple Protons
#**********************************************************************
{
  echo Protons: $parspec

  #Veritas/Whipple set1/ksaom/kasall
  #Defines energy, start and end arrays
  DefineShowers 'P' $MDL
  BuildAndSubmit
}
#**********************************************************************

function Helium4()
#**********************************************************************
#Veritas  and whipple Helium4
#**********************************************************************
{
  echo Helium4: $parspec
  #Defines energy, start and end arrays
  DefineShowers 'He4_' $MDL
  BuildAndSubmit
}
# **********************************************************************
 
function CosmicRay()
#********************************************************************** 
#Veritas CR (Protons and Helium)
#********************************************************************** 
{
  echo Cosmic Ray: $parspec 
  echo Protons: $protonParspec
  echo Helium4: $he4Parspec     
  #Load up the energy start and end arrays and copy over to particular
  #arrays for CR
  DefineShowers 'P' $MDL
 
  for key in "${!energy[@]}"; do
    pEnergy["$key"]="${energy["$key"]}"
  done
  for key in "${!start[@]}"; do
    pStart["$key"]="${start["$key"]}"
  done
  for key in "${!end[@]}"; do
    pEnd["$key"]="${end["$key"]}"
  done

  DefineShowers 'He4_' $MDL

  for key in "${!energy[@]}"; do
    he4Energy["$key"]="${energy["$key"]}"
  done
  for key in "${!start[@]}"; do
    he4Start["$key"]="${start["$key"]}"
  done
  for key in "${!end[@]}"; do
    he4End["$key"]="${end["$key"]}"
  done

  BuildAndSubmit
}
#***************************************************************************

function Gammas()
#**********************************************************************
#Gammas
#**********************************************************************
{
 echo Gammas: $parspec

 #Veritas Set1/ksaom/kasall
 #Whipple Set1/kasaom/kasall starts at 84 GeV
 
 #Defines energy, start and end arrays
 DefineShowers 'G' $MDL        

 BuildAndSubmit
}
#**********************************************************************

function Electrons()
#**********************************************************************
#Electrons
#**********************************************************************
{
    echo Electrons: $parspec

 Veritas Set1/ksaom/kasall
 Whipple Set1/kasaom/kasall starts at 84 GeV
 #Defines energy, start and end arrays
 DefineShowers 'E' $MDL
 BuildAndSubmit
}
#**********************************************************************

function BuildAndSubmit()
#########################################################################
# Generaic srcipt builing calling function
#########################################################################
{
  if [ ${JOBSPEC:2:2} = "CR" ]; then      #CosmicRay (P and He4_)
   #**********************************************************************
   #Submit in reverse order so the longest start first.
   #**********************************************************************
     let iEntryEnd=$iPEntryEnd
     if test $iPEntryEnd -lt $iHe4EntryEnd 
       then
        let iEntryEnd=$iHe4EntryEnd
     fi
     let iEntryStart=$iPEntryStart
     if test $iPEntryStart -gt $iHe4EntryStart 
       then
        let iEntryStart=$iHe4EntryStart
     fi
     #Reverse order (prefered)
     let j=$iEntryEnd
     while test $j -ge $iEntryStart
       do
	   if [ $j -le $iPEntryEnd ] && [ $j -ge $iPEntryStart ];
         then 
          parspec=$protonParspec               
          datadir=$protonDatadir
          start[$j]=${pStart[$j]}
          end[$j]=${pEnd[$j]}
          energy[$j]=${pEnergy[$j]}
          #echo $j ${pStart[$j]} ${start[$j]}
          if [ -n "$MULTITASKS" ]; then
	        BuildAndSubmitMultiTask $j	
	      else
            if test $j -le $MaxStepIndex
              then
                BuildAndSubmitJobs $j 
	        else
	          BuildAndSubmitJobsSingly $j
            fi
          fi      
        fi
        if [ $j -le $iHe4EntryEnd ] && [ $j -ge $iHe4EntryStart ]; 
         then 
          parspec=$he4Parspec
          datadir=$he4Datadir
          start[$j]=${he4Start[$j]}
          end[$j]=${he4End[$j]}
          energy[$j]=${he4Energy[$j]}
       
          if [ -n "$MULTITASKS" ]; then
	    BuildAndSubmitMultiTask $j	
	  else
            if test $j -le $MaxStepIndex
             then
              BuildAndSubmitJobs $j 
	     else
	      BuildAndSubmitJobsSingly $j
            fi
          fi
        fi
        let j=j-1		
       done
   
# **************************************************************************
  else     #P or He4_ or E or G
    #**********************************************************************
    #Submit in reverse order so the longest start first.
    #**********************************************************************
    let j=$iEntryEnd
    while test $j -ge $iEntryStart
      do	
        if [ -n "$MULTITASKS" ]; then
	  BuildAndSubmitMultiTask $j	
	else
          if test $j -le $MaxStepIndex
           then
            BuildAndSubmitJobs $j 
          else
 	    BuildAndSubmitJobsSingly $j
          fi
        fi
        let j=j-1		
      done
  fi

  if [ -n "$MULTITASKS" ]; then	
    if [  "$TasksInJobScript" != "0" ]; then
       ######################################################
       #We are  done. Finsh up and submit or add to list as needed
       ######################################################
       if [ -n "$MULTINODES" ]; then
         #integer divide with round down
         let numnodes=$TasksInJobScript/$MAXTASKSPERNODE
         let numnodes=$numnodes+1  #round up(Don't care is one too many)
         sed '/'$PBSCMD' -N'/s/'-N 1/-N '$numnodes'/g' <$sgeFile  >tmp1
         mv tmp1 $sgeFile
       fi  

	
       echo "wait"                     >>$sgeFile    
       CompleteAndSubmit $sgeFile $eGev $i
    fi
  fi
}
#**********************************************************************


function CompleteAndSubmit()
{
  sgeFile=$1
  eGev=$2
  showerid=$3

  chmod 700 $sgeFile
  if [ -n "$QsubFileNameList" ]; then
    echo 'echo Done >'$sgeFile'.Done'                    >>$sgeFile
    echo $sgeFile >>$QsubFileNameList
  else
    $QSUB -e k$eGeV'd'$showerid$parspec.err -o k$eGeV'd'$showerid$pr.log $sgeFile 
  fi
}
###########################################################################


function BuildAndSubmitJobs
#**********************************************************************
# Cause  cluster jobs to be submitted.
# This is the "all showers of one energy in sequence on one core"
# This is a standard way to submit jobs
#**********************************************************************
{
 entryE=$1
 local pr=$parspec
 let showerStart=${start[$entryE]}
 let showerEnd=${end[$entryE]}
 local eGeV=${energy[$entryE]}     
 echo Entry:  $pr $eGeV $showerStart $showerEnd
 let E=${eGeV%%.*}

 if [ -n "$LOWENERGYSTEPPING" ]; then
   let stepStart=$showerStart-1
   let stepEnd=0
   while test $stepEnd -lt $showerEnd 
    do
      FindShowerIDStep $entryE $showerEnd      #sets to next stepStart and stepEnd
      sgeFile=$lcl'/K'$eGeV'd'$stepStart$pr.pbs
      
      SgeFilePBSCmds  $sgeFile $E
      SgeFileBashCmds $sgeFile

      echo $ksScript $eGeV $pr $stepStart $stepEnd $datadir $workingDir \\ >>$sgeFile
      echo ">>"$lcl"/ksProduction_"$eGeV'd'$stepStart"_"$stepEnd$pr".log"  >>$sgeFile

      CompleteAndSubmit $sgeFile $eGev $stepStart
    done
 
 else
 
   sgeFile=$lcl'/K'$eGeV$pr.pbs
   SgeFilePBSCmds   $sgeFile $E
   SgeFileBashCmds  $sgeFile

   echo $ksScript $eGeV $pr $showerStart  \\   >>$sgeFile
   echo $showerEnd $datadir $workingDir   \\   >>$sgeFile
   echo ">>"$lcl"/ksProduction_"$eGeV$pr".log" >>$sgeFile

   CompleteAndSubmit $sgeFile $eGev $showerStart
 fi
}
#########################################################################

function BuildAndSubmitJobsSingly 
#**********************************************************************
# Cause serial jobs to be submitted.
# This version submits 1 job per shower
# This is standard way to submit
#**********************************************************************
{
 entryE=$1
 pr=$parspec
 let showerStart=${start[$entryE]}
 let showerEnd=${end[$entryE]}
 eGeV=${energy[$entryE]}     
 let E=${eGeV%%.*}

 echo Entry:  $pr $eGeV $showerStart $showerEnd
 let i=$showerStart
 while test $i -le $showerEnd
  do
    sgeFile=$lcl'/K'$eGeV'd'$i$pr.pbs
    SgeFilePBSCmds  $sgeFile $E
    SgeFileBashCmds $sgeFile

    echo $ksScript $eGeV $pr $i $i $datadir $workingDir \\ >>$sgeFile
    echo ">>"$lcl"/ksProduction_"$eGeV'd'$i$pr".log"       >>$sgeFile

    CompleteAndSubmit $sgeFile $eGev $i
    let i=$i+1
  done

}
# **********************************************************************

function BuildAndSubmitMultiTask()
###############################################################
# Just fill up a node script. AddTaskForMultiTaskSubmission does all the work
# we just have to pass it the particulars. This looks very much like the 
# BuildAndSubmitJobsSingly function
#################################################################
#$1: Energy entry
{
 entryE=$1
 let showerStart=${start[$entryE]}
 let showerEnd=${end[$entryE]}
 eGeV=${energy[$entryE]}     
 echo Entry:  $pr $eGeV $showerStart $showerEnd

 if test $entryE -le $MaxStepIndex
  then
   #AddTaskForMultiTaskSubmission $eGeV $showerStart $showerEnd
   let stepStart=$showerStart-1
   let stepEnd=0
   while test $stepEnd -lt $showerEnd 
    do
      FindShowerIDStep $entryE $showerEnd      #sets to next stepStart and stepEnd
      AddTaskForMultiTaskSubmission $eGeV $stepStart $stepEnd
    done
 else 
   let i=$showerStart
   while test $i -le $showerEnd
    do
     AddTaskForMultiTaskSubmission $eGeV $i $i
     let i=i+1
    done
 fi
}
#########################################################################



function AddTaskForMultiTaskSubmission()
#**********************************************************************
# Cause cluster tasks to be submitted in groups 
# of MAXTASKSPERNODE on wholely owned nodes.
# or
# make one job using multiple nodes doing all tasks
#**********************************************************************
{
  pr=$parspec
  eGev=$1
  local i=$2
  local k=$3
  #################################################################
  # See if this is the start of a script. We accumulate tasks until
  # we have MAXTASKSPERNODE.
  # Define a SINGLEJOB 
  # ###############################################################
  if [ ! -n "$TasksInJobScript" ] || [ "$TasksInJobScript" = '0' ]; then
    #################################
    # Create next pbs script
    #################################
    GetUniqueNumber
    sgeFile=$lcl'/K'$eGev'd'$i$pr$UNIQUE'.pbs'
    SgeFilePBSCmds  $sgeFile
    SgeFileBashCmds $sgeFile 
    let TasksInJobScript=0
    if [ -n "$CORI" ] && [ -n "$MULTITASKS" ]; then
      sed '/'$PBSCMD' -n'/s/'-n 1/-n 0/g' <$sgeFile  >tmp1
      mv tmp1 $sgeFile
    fi
  fi
  ##################################################################
  # Add this shower task to pbs file. Singly for now: Note the "+"
  # and the "wait" below, necessa=y for full node submission
  ##################################################################
  echo debug: $sgeFile $i
  echo $ksScript $eGeV $pr $i $k $datadir $workingDir  \\   >>$sgeFile
  echo ">>"$lcl"/ksProduction_"$eGeV'd'$i'to'$k$pr".log &"  >>$sgeFile
   
  let NumJobsOld=$TasksInJobScript 
  let TasksInJobScript=$TasksInJobScript+1

  ###################################################################
  #We need to keep the number of tasks in the SBATCH or PBS comand updated
  if [ -n "$CORI" ] && [ -n "$MULTITASKS" ]; then
    sed '/'$PBSCMD' -n'/s/'-n '$NumJobsOld'/-n '$TasksInJobScript'/g' <$sgeFile  >tmp1 
    mv tmp1 $sgeFile
  fi
  ################################
  # See if this pbs file is done (single node tasks only here)
  ################################
  if [ "$TasksInJobScript" = "$MAXTASKSPERNODE" ] && [ ! -n "$MULTINODES" ]; then    
    #Single node is full. Finsh up and submit or add to list as needed
    echo "wait"                     >>$sgeFile    
    CompleteAndSubmit $sgeFile $eGev $i
    let TasksInJobScript=0 
  fi
}
#####################################################################

function  FindShowerIDStep()
################################################################
# find steps for partial shopwer range so we don't do too many showers in
# one call. Above entry MaxStepIndex gives  only a step of 1
################################################################
{
  let stepEntry=$1
  let stepLast=$2
  let stepStart=$stepEnd+1     #stepEnd starts at 0
 
  #echo 1:stepEntry:stepLast  $1 $stepEntry $stepLast


  if test $stepEntry -le $MaxStepIndex
   then
    #stepSize=([1]=60 60 50 40 30 20 15 12 10 8 7 5 5 5 4 3 2 2 2 )
    stepSize=([1]=30 20 20 20 15 10 10 10 10 10 10 10 9 8 7 6 5 4 3 )
    let step=${stepSize[$stepEntry]}
  else
    let step=1
  fi

  let stepEnd=$stepEnd+$step

  if [ "$stepEnd" -gt "$stepLast" ]; then
     stepEnd=$stepLast
  fi
  #echo Start:End: $stepStart $stepEnd $Step
}
#######################################################################


#*************************************************************
#Start of main script.
#*************************************************************
JOBSPEC=$1
KSSCPT=$2
SORT=$3
if [ -n "$4" ]; then   #See if optional  qsub file namer list file is defined
  QsubFileNameList=$4  #if so we will not submit jobs to the cluster but
fi                     # let the calling program do that by using this file
ST=$5
EN=$6
HST=$7
HEN=$8
#Flag for using reduced showers for MDl CR stuff. 
#Will be not defined for normal use.
MDL=$9

lcl="$PWD"
#MaxStepIndex=19
MaxStepIndex=10        #For electron spectrum special processing
                       #(everything is single job sumbmissions)

##################
# Bring in GenerateVBFName and GetUniqueNumber  functions
##################
if [ ! -e UtilityFunctions.scr ]; then
    cp $KASCADEBASE/scripts/UtilityFunctions.scr ./
fi
source UtilityFunctions.scr

SetupForHost

#script directory
sdr=$KASCADEBASE"/scripts"

#Check to see if the user specified the script with the .scr extention
KSSCPT=${KSSCPT%.scr}

            #Assume local copy of script
kssc=${KSSCPT##*/}
if test "$kssc" = "$KSSCPT"
then
  ksScript=$lcl'/'$kssc'.scr' #ksall: Makes seg,pe,pes,te files. Keeps te files
                          #ksaom: Makes .root  files from te files(depreciated)
                          #ksaomVBF: Makes .vbf files from te files
                          #ksarraytriggerVBF: Makes array  .vbf files
                          #ksallVBF:Does everything from ksKascade to 
                          #         ksArrayTrigger
else
    ksScript=$KSSCPT'.scr'
fi
echo ksScript: $ksScript
echo kssc: $kssc

let lastJob=8
if [ "$kssc" = "ksMissingVBF" ] || [ "$kssc" = "ksMissingTE" ]; then
    let lastJob=1
fi
#####################################################################


#######################################

#ISIS
if [ -n "$ISIS" ]; then
    if test ${lcl:1:4} = "disk"
    then
       dataDirBase=${lcl:0:6}'/simulations'
    else
       dataDirBase=/simulations
    fi
    mkdir -vp $dataDirBase
    workingDir=$lcl

    let jobNum=1
    while test $jobNum -le $lastJob
    do
	    #define job script name
	JobScript=$lcl'/js'$jobNum'_'$1'.scr'
	    #Initialze the script files
	echo echo Starting $JobScript >$JobScript
    jobNum=$((jobNum+1))
    done
fi



if [ -n "$EDISON" ]; then
    dataDirBase=$SCRATCH'/simulations'
    echo Edison Data Dir: $dataDirBase
    mkdir -vp $dataDirBase
    workingDir=$SCRATCH
fi

if [ -n "$CORI" ]; then
  dataDirBase=$SCRATCH'/simulations'
  echo Cori Data Dir: $dataDirBase
  mkdir -vp $dataDirBase
  workingDir=$SCRATCH

 LOWENERGYSTEPPING=enabled
 #MULTITASKS=enabled           #Multiple tasks on each node
 if [ -n "$MULTITASKS" ]; then
   #MULTINODES=enabled       #Task uses N nodes where 
                             #N=TotalNumTasks/MAXTASKSPERNODE rounded up
                             #Else if not defined  1 node per MAXTASKSPERNODE
   #let MAXTASKSPERNODE=64   #With Hyperthreading (1 node tasks with 64 tasks)
   let MAXTASKSPERNODE=32   #Without hyperthreading.
   QUEUE='-p regular'
 else
   QUEUE='-p shared'
 fi
fi

if [ -n "$HANSEN" ]; then
    dataDirBase=$SCRATCH'/simulations'
    echo Hansen Data dir: $dataDirBase
    mkdir -vp $dataDirBase
    workingDir=$SCRATCH                     
    JobsPerNode=48
    NumCores=48
    if [ "$SORT" = "Sort" ]; then
	Sort=enabled
        echo Hansen:Sort: $Sort
    fi
fi

if [ -n "$CONTE" ]; then
    dataDirBase=$SCRATCH'/simulations'
    echo Conte Data dir: $dataDirBase
    mkdir -vp $dataDirBase
    workingDir=$SCRATCH                     
    JobsPerNode=32
    NumCores=32
    if [ "$3" = "Sort" ]; then
	Sort=enabled
        echo Conte:Sort: $Sort
    fi
fi

if [ -n "$COATES" ]; then
    dataDirBase=$SCRATCH'/simulations'
    echo Coates Data dir: $dataDirBase
    mkdir -vp $dataDirBase
    workingDir=$SCRATCH
fi

if [ -n "$FUSION" ]; then
    dataDirBase=$SCRATCH'/simulations'
    echo Fusion Data dir: $dataDirBase
    mkdir -vp $dataDirBase  
    workingDir='/scratch'                   #Use local scratch disk on nodes.
fi

user=$USER

#Fuctions specify which nodes are to be used ("on" or "off")
#Funtions also specify the energy and specify the starting and ending shower 
#IDs.
#See bottom for numbers and energies for gammas,protons and he4

#******************************************************************************
# Set up arrays for node submission and submit
#*****************************************************************************
let pspecset=0
maxMem=240MB



if [ ${JOBSPEC:1:1} = "W" ]; then
   dataDirBase=$dataDirBase'/whipple'
   mkdir -vp $dataDirBase
fi

if [ ${JOBSPEC:1:1} = "N" ] || [ ${JOBSPEC:1:1} = "U" ] || 
   [ ${JOBSPEC:1:1} = "O" ]; then
    dataDirBase=$dataDirBase'/veritas'
    mkdir -vp $dataDirBase
fi

if [ ${JOBSPEC:2:2} = "CR" ]; then      #CosmicRay (P and He4_)
                                        
    AtmSpec=${JOBSPEC:0:1}             #gets S(for summer) from  
                                        #SWCR20DegN0.5Deg50mv1234M2
    TelSpec=${JOBSPEC:1:1}              #gets W from CWCR20DegN0.5Deg50mv1234M2
    spec=${JOBSPEC#*CR}                 #gets 20DegN0.3Deg50mv1234M2 from 
                                        #WWCR20DegN0.3Deg50mv1234M2

    if [ -n "$NERSCorARGN" ] || [ -n "$PURDUE" ]; then
      #Protons
       protonParspec=$AtmSpec$TelSpec'P'$spec
       protonDatadir="$dataDirBase/protons"
       echo CR:Proton Dir: $protonDatadir
       mkdir -vp $protonDatadir

#Helium4
       he4Parspec=$AtmSpec$TelSpec'He4_'$spec
       he4Datadir="$dataDirBase/he4"
       echo CR:He4 Dir: $he4Datadir
       mkdir -vp  $he4Datadir
 
       if [ -n "$ST" ]; then
	let iPEntryStart=$ST
       else
        let iPEntryStart=1
       fi

       if [ -n "$EN" ]; then
	let iPEntryEnd=$EN
       else
        let iPEntryEnd=45
       fi

       if [ -n "$HST" ]; then
	let iHe4EntryStart=$HST
       else
        let iHe4EntryStart=5
       fi

       if [ -n "$HEN" ]; then
	let iHe4EntryEnd=$HEN
       else
        let iHe4EntryEnd=45
       fi
      
       CosmicRay
      
       let pspecset=1;
    else
       parspec=$AtmSpec$TelSpec'P'$spec   #gives SVP20DegN0.3Deg50mv1234M2ABCD
       datadir="$dataDirBase/protons"     #from SVCR20DegN0.3Deg50mv1234M2ABCD
       mkdir -vp $datadir
       Protons

       datadir="$dataDirBase/he4"
       parspec=$AtmSpec$TelSpec'He4_'$spec
       mkdir -vp $datadir
       Helium4
       let pspecset=1;
    fi
fi

if [ ${JOBSPEC:2:1} = "E" ]; then 
    parspec=$1 
    datadir="$dataDirBase/electrons"
    mkdir -vp $datadir
    if [ -n "$ST" ]; then
	let iEntryStart=$ST
    else
        let iEntryStart=1
    fi
    if [ -n "$EN" ]; then
	let iEntryEnd=$EN
    else
        let iEntryEnd=45
    fi
    Electrons
    let pspecset=1;
fi

if [ ${JOBSPEC:2:1} = "P" ] ; then 
    parspec=$1 
    datadir="$dataDirBase/protons"
    mkdir -vp $datadir
    if [ -n "$ST" ]; then
      let iEntryStart=$ST
    else
      let iEntryStart=1
    fi

    if [ -n "$EN" ]; then
      let iEntryEnd=$EN
    else
      let iEntryEnd=45
    fi
    Protons
    let pspecset=1;
fi

if [ ${JOBSPEC:2:4} = "He4_" ] ; then 
    parspec=$1 
    datadir="$dataDirBase/he4"
    mkdir -vp $datadir
    if [ -n "$ST" ]; then
      let iEntryStart=$ST
    else
      let iEntryStart=5
    fi

    if [ -n "$EN" ]; then
      let iEntryEnd=$EN
    else
      let iEntryEnd=45
    fi
    Helium4
    let pspecset=1;
fi

if [ ${JOBSPEC:2:1} = "G" ]; then
    parspec=$1
    datadir="$dataDirBase/gammas"
    mkdir -vp $datadir 
    if [ -n "$ST" ]; then
	let iEntryStart=$ST
    else
        let iEntryStart=1
    fi
    if [ -n "$EN" ]; then
	let iEntryEnd=$EN
    else
        let iEntryEnd=45
    fi
    Gammas
    let pspecset=1;
fi

echo datadir $datadir

if [ $pspecset -ne 1 ]; then
    echo No such Particle spec: $1
    exit
fi

#ISIS
if [ -n "$ISIS" ]; then
   
    let jobNum=1
    while test $jobNum -le $lastJob
    do
	    #define job script name
	JobScript=$lcl'/js'$jobNum'_'$JOBSPEC'.scr'
	if [ "$kssc" != "ksMissingVBF" ] && [ "$kssc" != "ksMissingTE" ]; then
	    JobScriptLog=$lcl'/js'$jobNum'_'$JOBSPEC'.log'
	    #Initialze the script files
	    chmod 777 $JobScript
	    $JobScript  >$JobScriptLog &
	else
	    #Initialze the script files
	    chmod 777 $JobScript
	    $JobScript 
	fi
    jobNum=$((jobNum+1))
    done
fi


###########################################################################
#Arguments for ksScript
#$1 primary Energy in GeV (integer only)
#$2 Shower type specification string (To be included in config file names and 
#                              in shower names:Like P1W,G1W, He4_1W, G20N0.3V)
#$3 Lowest flie id
#$4 Highest file id.
#$5 data disk directory.(Where output Te/root  files go, cannot be blank!!!)
#############################################################################


##################################################
## All the following for reference only
##################################################

function IsisProduction()
{
  if [ "$1" = "P" ]; then
    if [ "$kssc" != "ksMissingVBF" ] && [ "$kssc" != "ksMissingTE" ]; then
      #ksaomVBF ~12hr.
	BuildIsisScriptList 1 1   9
	BuildIsisScriptList 2 10 18 
	BuildIsisScriptList 3 19 24
	BuildIsisScriptList 4 25 30
	BuildIsisScriptList 2 31 31             #for balance
	BuildIsisScriptList 5 32 33
	BuildIsisScriptList 6 34 36
    else
	BuildIsisScriptList 1 1  42
    fi
  fi

  if [ "$1" = "He4_" ]; then
    if [ "$kssc" != "ksMissingVBF" ] && [ "$kssc" != "ksMissingTE" ]; then

    #set 1 kasaomVBF ~5 hr.
	BuildIsisScriptList 1 6  25
	BuildIsisScriptList 2 26 30
	BuildIsisScriptList 3 31 33
	BuildIsisScriptList 4 34 34
	BuildIsisScriptList 5 35 36
	BuildIsisScriptList 6 36 36
   else
      BuildIsisScriptList 1 1 42
   fi
  fi

  if [ "$1" = "G" ]; then
       if [ ${JOBSPEC:0:1} = "W" ] ; then
	   if [ "$kssc" != "ksMissingVBF" ] && [ "$kssc" != "ksMissingTE" ]; then
	    BuildIsisScriptList 1 11 12
	    BuildIsisScriptList 2 13 14
	    BuildIsisScriptList 3 15 16
	    BuildIsisScriptList 4 17 18
	    BuildIsisScriptList 5 19 20
	    BuildIsisScriptList 6 21 23
	    BuildIsisScriptList 7 24 26
	    BuildIsisScriptList 8 27 28
          else
	    BuildIsisScriptList 1 1 44
          fi
       fi
       if [ ${JOBSPEC:0:1} = "N" ] ; then
          if [ "$kssc" != "ksMissingVBF" ] && [ "$kssc" != "ksMissingTE" ]; then
	   #For ksaomVBF ~1:20 
#             For ksallVBF: set 1 about 24 hours <=10 TeV
	    BuildIsisScriptList 1 1  4
	    BuildIsisScriptList 2 5  9
	    BuildIsisScriptList 3 10 15
	    BuildIsisScriptList 4 16 24
	    BuildIsisScriptList 5 25 32
	    BuildIsisScriptList 6 33 34
	    BuildIsisScriptList 7 35 35
	    BuildIsisScriptList 8 36 36
          else
	    BuildIsisScriptList 1 1 44
          fi
       fi
   fi
   if [ "$1" = "E" ]; then
	if [ ${JOBSPEC:0:1} = "W" ] ; then
          if [ "$kssc" != "ksMissingVBF" ] && [ "$kssc" != "ksMissingTE" ]; then
	    BuildIsisScriptList 1 11 12
	    BuildIsisScriptList 2 13 14
	    BuildIsisScriptList 3 15 16
	    BuildIsisScriptList 4 17 18
	    BuildIsisScriptList 5 19 20
	    BuildIsisScriptList 6 21 23
	    BuildIsisScriptList 7 24 26
	    BuildIsisScriptList 8 27 28
          else
	    BuildIsisScriptList 1 1 44
          fi
	fi
	if [ ${JOBSPEC:0:1} = "N" ] ; then
          if [ "$kssc" != "ksMissingVBF" ] && [ "$kssc" != "ksMissingTE" ]; then
	   #For ksaomVBF ~1:20 
#             For ksallVBF: set 1 about 24 hours <=10 TeV
	    BuildIsisScriptList 1 1  4
	    BuildIsisScriptList 2 5  9
	    BuildIsisScriptList 3 10 15
	    BuildIsisScriptList 4 16 24
	    BuildIsisScriptList 5 25 32
	    BuildIsisScriptList 6 33 34
	    BuildIsisScriptList 7 35 35
	    BuildIsisScriptList 8 36 36

# High >10 TeV 48 hrs?
#	    BuildIsisScriptList 1 37  37
#	    BuildIsisScriptList 2 38  38
#	    BuildIsisScriptList 3 39  39
#	    BuildIsisScriptList 4 40  40
#	    BuildIsisScriptList 5 41  41
#	    BuildIsisScriptList 6 42  42
#	    BuildIsisScriptList 7 43  43
#	    BuildIsisScriptList 8 44  44

          else
	    BuildIsisScriptList 1 1 44
          fi
	fi
  fi
  
}
#########################################################################

#keep for reference:outdated, needs work to work again
function BuildIsisScriptList()
#**********************************************************************
# Causes sub-script list to be created and run
#**********************************************************************
{
 pr=$parspec
 jobScript=$lcl'/js'$1'_'$JOBSPEC'.scr'
 let processStart=$2
 let processEnd=$3
 let i=$processStart

 while test $i -le $processEnd
 do
    eGeV=${energy[$i]}
    let showerStart=${start[$i]}
    let showerEnd=${end[$i]}
    echo Entry: $i  $parspec $eGeV $showerStart $showerEnd 

    if [ "$kssc" != "ksMissingVBF" ] && [ "$kssc" != "ksMissingTE" ]; then
	logFile=">>"$lcl"/ksProduction_"$i"_"$pr".log"
    else
	logFile=' '
    fi
  
    echo $ksScript $eGeV $parspec  $showerStart \\   >>$jobScript
    echo $showerEnd $datadir $workingDir        \\   >>$jobScript
    echo $logFile                                    >>$jobScript

    i=$((i+1))			#do next process
 done
}
# ******************************************************************

#keep for reference:outdated, needs work to work again

function BuildAndSubmitHansenJobsBy10()
#**********************************************************************
# Cause HANSEN or COATES or CONTE cluster jobs to be submitted in groups of 10.
#**********************************************************************
{
 stepsize=([1]=60 60 50 40 30 20 15 12 10 8 7 5 5 5 4 3 2 2 2)
 pr=$parspec
 let showerStart=${start[$1]}
 let showerEnd=${end[$1]}
 eGeV=${energy[$1]}
 let E=${eGeV%%.*}
     
 echo Entry:  $pr $eGeV $showerStart $showerEnd
 if [ $1 -le 19 ]; then
   let Stepsize=${stepsize[$1]}
 else
   let Stepsize=10
 fi
 let i=showerStart
 while test $i -le $showerEnd
  do
   let endShower=$i+$Stepsize-1
   
   if [ "$endShower" -gt "$showerEnd" ]; then
     endShower=$showerEnd
   fi
   range=E$i'_'$endShower
   sgeFile=$lcl'/K'$eGeV$pr'S'$range'.pbs'
   
   echo "#"$PBSCMD $QUEUESTANDBY                      >$sgeFile
   echo "#"$PBSCMD $WALLTIMESTANDBY                  >>$sgeFile
   if [ -n "$CONTE" ]; then
     echo "#"$PBSCMD -l nodes=1:ppn=1                >>$sgeFile
     echo "#"$PBSCMD -l naccesspolicy=shared         >>$sgeFile
     echo module load devel                          >>$sgeFile
   fi

   echo source /etc/profile                          >>$sgeFile
   echo module load gcc/4.7.2                        >>$sgeFile
   echo lcl=$$PBSCMD_O_WORKDIR                       >>$sgeFile
   echo cd $lcl                                      >>$sgeFile
   echo $ksScript $eGeV $pr $i  \\                   >>$sgeFile
   echo $endShower $datadir $workingDir   \\         >>$sgeFile
   echo ">>"$lcl"/ksProduction_"$eGeV$pr$range".log" >>$sgeFile
   chmod 700 $sgeFile
   #echo $e  $i  $endShower
   if [ -n "$QsubFileNameList" ]; then
    echo 'echo Done >'$sgeFile'.Done'                >>$sgeFile
    echo $sgeFile >>$QsubFileNameList
   else
     $QSUB -e k$eGeV$pr$range.err -o k$eGeV$pr$range.log $sgeFile 
   fi
   let i=$i+$Stepsize
  done
}
#####################################################################


#keep for reference:outdated, need work to work again

#keep for reference:outdated, need work to work again


function BuildAndSubmitJobArray
#**********************************************************************
# Not used: kept for reference
# Cause Carver cluster jobs to be submitted using Job arrays.
# Since we have lots and lots of nodes 1 job per shower
# Need to limit number in each job array submission to 1024
# We don't use this since the Carver queue manager probably can't handle lots 
# of short jobs. This is just here for future reference.
#**********************************************************************
{
 pr=$parspec
 let showerStart=${start[$1]}
 let showerEnd=${end[$1]}
 eGeV=${energy[$1]}
 let numBlock=1024


 let numJobBlock=showerEnd-showerStart+1
 let numArraySubs=numJobBlock/numBlock
 if test $numArraySubs -gt 0
  then
   let numJobBlock=numBlock
 fi
 let k=showerStart

 while test $k -le $showerEnd
  do
   let kend=$k+numJobBlock-1
   if test $kend -gt $showerEnd
    then
     let kend=showerEnd
   fi

   echo Entry:  $pr  $eGeV $k $kend

   sgeFile=$lcl'/K'$eGeV$parspec.pbs
   echo "#"!/bin/bash -l                                         >$sgeFile
   #echo "#"$PBSCMD -l gres=gscratch%project                         >>$sgeFile
   echo let i=\$$PBSCMD_ARRAYID                                     >>$sgeFile
   echo cd $lcl                                                 >>$sgeFile
   echo LOGFILE=$lcl"/ksProduction_"$eGeV'd'\$i\'$parspec.log\' >>$sgeFile
   echo echo LOGFILE: \$LOGFILE                                 >>$sgeFile
   echo $ksScript $eGeV $parspec  \$i  \$i $datadir \\          >>$sgeFile
   echo $workingDir '>'\$LOGFILE                                >>$sgeFile

   chmod 700 $sgeFile
   if [ -n "$QsubFileNameList" ]; then
     echo 'echo Done >'$sgeFile'.Done'                          >>$sgeFile
     echo $sgeFile >>$QsubFileNameList
   else
     $QSUB $QUEUE  -t $k'-'$kend -e k$eGeV.err -o k$eGeV.log $sgeFile 
   fi
   let k=kend+1

  done

}
