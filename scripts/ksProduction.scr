#!/bin/bash

#This is the conversion (from kas01.scr) to use at Purdue and Depauw
#Glenn Sembroski 16/05/05
#$0 ./kas02.scr
#$1 has Type-direction specification code. like: P1W,He4_1W,G1W,DG1W
#   Giveing a Type code of 'CR1W' will cause both P1W and He4_1W to be run
#   CR1V: Single telescope threshold(ksaom*)
#   CR1V2: Multi Telescope threshold(ksaom*)
#$2 has which script to run: ksall:make showers throuth te files
#                            ksaom:makes .root files
#                            ksaomVBF:makes .vbf files
#                            ksaomVBFRoot:makes .vbf and .root files
#                            ksarraytriggerVBF:makes .vbf multi trigger files.
#$3 StatusRunFileSpecification: Optional: for ksaom only: to model a real run
#          like: /project/veritas/sembrosk/whipple/crab_00-01/gt016235.root


#Functions to define thigs for various particle specs

function RemoveOldFiles()
{
  if [ "$kssc" = "ksaom" ] || [ "$kssc" = "ksaomVBFRoot" ]; then
    echo Removing $parspec*GeV*.root files
    cd $datadir
    find . | grep $parspec |grep .root| grep -v Mult | xargs rm -v 
    cd $lcl
    pwd
  fi

  if [ "$kssc" = "ksaomVBF" ] || [ "$kssc" = "ksaomVBFRoot" ]; then
    echo Removing $parspec*GeV*.vbf files
    cd $datadir
    find . | grep $parspec |grep .vbf | grep -v Mult | xargs rm -v 
    cd $lcl
    pwd
  fi

  if [ "$kssc" = "ksarraytriggerVBF" ]; then
    echo Removing $parspec*GeV*Multi.vbf files
    cd $datadir
    find . | grep $parspec |grep .vbf | grep  Mult | xargs rm -v 
    cd $lcl
    pwd
    maxMem=75MB
  fi

}


function Protons()
#**********************************************************************
#Veritas Protons
#**********************************************************************
{
    echo Protons: $parspec
    WALLTIME=40:00:00
    RemoveOldFiles

#Veritas$ whipple set1/ksaom/kasall
#set 1
    let processEnd=35
    enableGEN=([1]=ON   ON   ON   ON   ON  ON   ON   ON   ON   ON   ON   ON  ON   ON   ON   ON  ON  ON  ON  ON  ON  ON  ON  ON  ON  ON  ON  ON  ON   ON   ON   ON   ON   OFF  OFF)
       energy=([1]=20    20   20   20  24  24   24   28   28   34   34   41  41   49   49   58  70  70  84  100 120 143 205 205 294 422 605 867 1243 1781 2553 3660 5246 7519 10777)
        start=([1]=1    346  691  1036 1   276  551  1    271  1    321  1   141  1    144  1   1   87  1   1   1   1   1   30  1   1   1   1   1    1    1    1    1    1    1)
          end=([1]=345  690  1035 1372 275 550  829  270  536  320  635  140 280  143  287  143 86  172 77  80  48  39  29  58  17  14  6   4   2    1    1    1    1    1    1)
    if [ $host = 'isis' ]; then
	BuildIsisScriptList 1  1  9 
	BuildIsisScriptList 2 10 18 
	BuildIsisScriptList 3 19 27
	BuildIsisScriptList 4 27 35 
    else
	SubmitAmdahlPBSJobs        #amdahl

    fi
}
#**********************************************************************


function Helium4()
#**********************************************************************
#Veritas  and whipple Helium4
#**********************************************************************
{
    echo Helium4: $parspec
    WALLTIME=40:00:00
    RemoveOldFiles

#Veritas$ whipple set1/ksaom/kasall
#set 1
    let processEnd=20
#set1
    enableGEN=([1]=ON  ON  ON  ON  ON  ON  ON  ON  ON  ON  ON  ON  ON  ON   ON   ON   ON   ON   OFF  OFF)
       energy=([1]=49  58  70  84  100 120 143 205 205 294 422 605 867 1243 1781 2553 3660 5246 7519 10777)
        start=([1]=1   1   1   1   1   1   1   1   16  1   1   1   1   1    1    1    1    1    1    1)
          end=([1]=109 70  71  38  35  24  18  15  30  9   8   4   3   2    1    1    1    1    1    1)
    if [ $host = 'isis' ]; then
	BuildIsisScriptList 1 1 5
	BuildIsisScriptList 2 6 10
	BuildIsisScriptList 3 11 15
	BuildIsisScriptList 4 16 20
    else
	SubmitAmdahlPBSJobs        #amdahl
    fi
}
#**********************************************************************


function Gammas()
#**********************************************************************
#Gammas
#**********************************************************************
{
    echo Gammas: $parspec
    let processEnd=26
    WALLTIME=40:00:00
    RemoveOldFiles

#Veritas set1/ksaom/kasall
#Whipple set1/kasaom/kasall starts at 84 GeV
    let processEnd=28
    enableGEN=([1]=ON  OFF  OFF OFF OFF OFF OFF OFF OFF OFF OFF OFF OFF OFF OFF OFF OFF OFF OFF OFF OFF OFF OFF OFF  OFF  OFF  OFF  OFF )
       energy=([1]=20  20   24  28  34  41  49  58  70  70  84  100 120 143 172 205 246 294 353 422 505 605 867 1243 1781 2553 3660 5246)
        start=([1]=1   517  1   1   1   1   1   1   1   98  1   1   1   1   1   1   1   1   1   1   1   1   1   1    1    1    1    1)
          end=([1]=516 1032 658 450 566 266 288 152 97  194 92  100 64  54  43  30  30  18  17  11  10  10  12  5    4    1    1    1)

    if [ $host = 'isis' ]; then
	if [ $parspec = "G1W" ] || [ $parspec = "G20W" ] || [ $parspec = "G30W" ] || [ $parspec = "G40W" ] || [  $parspec = "G50W" ]; then
	    BuildIsisScriptList 1 11 15
	    BuildIsisScriptList 2 16 20
	    BuildIsisScriptList 3 21 24
	    BuildIsisScriptList 4 25 28
	fi


	if [ $parspec = "G1V" ] || [ $parspec = "G20V" ] || [ $parspec = "G30V" ] || [ $parspec = "G40V" ] || [  $parspec = "G50V" ]; then
	    BuildIsisScriptList 1 1 7
	    BuildIsisScriptList 2 8 14
	    BuildIsisScriptList 3 15 21
	    BuildIsisScriptList 4 22 28
	fi
    else

	SubmitAmdahlPBSJobs        #amdahl
    fi
}




function SubmitAmdahlPBSJobs()
#**********************************************************************
# Cause pbs jobs to be submitted.
#**********************************************************************
{
 pr=$parspec


 let i=$processStart
 while test $i -le $processEnd
 do
    echo Entry: $i  ${enableGEN[$i]} ${energy[$i]} ${start[$i]} ${end[$i]} ${queues[$i]}
    if [ "${enableGEN[$i]}" == "ON" ]; then 

      pbsFile=$lcl/ks_$i$pr.pbs

      echo "#"PBS -N "pbs"$i'_'$pr                                   >$pbsFile
      echo "#"PBS -e "pbs"$i'_'$pr'.err'                            >>$pbsFile
      echo "#"PBS -o "pbs"$i'_'$pr'.log'                            >>$pbsFile
      echo "#"PBS -m ae                                             >>$pbsFile
      echo "#"PBS -M $user"@purdue.edu"                             >>$pbsFile
      echo "#"PBS -q ${queues[$i]}                                  >>$pbsFile
      echo "#"PBS -l mem=$maxMem                                    >>$pbsFile
      echo "#"PBS -l walltime=$WALLTIME                             >>$pbsFile
      echo "#"PBS -l nodes=1                                        >>$pbsFile
      echo $ksScript ${energy[$i]} $parspec  ${start[$i]} \\   >>$pbsFile
      echo ${end[$i]} $datadir $StatusRunFileSpecification     \\   >>$pbsFile
      echo ">>"$lcl"/ksProduction_"$i"_"$pr".log"                   >>$pbsFile
      qsub $pbsFile
    fi

    i=$((i+1))			#do next process
    done
}

function BuildIsisScriptList()
#**********************************************************************
# Causes sub-script list to be created and run
#**********************************************************************
{
 pr=$parspec
 if [ $1 -eq "1" ]; then
    jobScript=$JobScript1
 fi

 if [ $1 -eq "2" ]; then
    jobScript=$JobScript2
 fi

 if [ $1 -eq "3" ]; then
    jobScript=$JobScript3
 fi

 if [ $1 -eq "4" ]; then
    jobScript=$JobScript4
 fi

 let processStart=$2
 let processEnd=$3

 let i=$processStart
 while test $i -le $processEnd
 do
    echo Entry: $i  ${enableGEN[$i]} ${energy[$i]} ${start[$i]} ${end[$i]}
    if [ "${enableGEN[$i]}" == "ON" ]; then 
      echo $ksScript ${energy[$i]} $parspec  ${start[$i]} \\   >>$jobScript
      echo ${end[$i]} $datadir                            \\   >>$jobScript
      echo ">>"$lcl"/ksProduction_"$i"_"$pr".log"              >>$jobScript
    fi
    i=$((i+1))			#do next process
  done
}

# ************************************************************************


#*************************************************************
#Start of main script.
#*************************************************************
lcl="$PWD"
host=$(hostname)
#script directory
sdr=$KASCADEBASE"/scripts"
kssc=$2
ksScript=$sdr/$kssc'.scr'   #ksall: Makes seg,pe,pes,te files. Keeps te files
                         #ksaom: Makes .root (and eventually .cvbf) files from
                         #       te files

if [ $host = 'isis' ] ; then
    dataDirBase=/simulations

#define job script names
    JobScript1=$lcl'/js1_'$1'.scr'
    JobScript2=$lcl'/js2_'$1'.scr'
    JobScript3=$lcl'/js3_'$1'.scr'
    JobScript4=$lcl'/js4_'$1'.scr'

#Initialze the script files
    echo echo Starting $JobScript1 >$JobScript1
    echo echo Starting $JobScript2 >$JobScript2
    echo echo Starting $JobScript3 >$JobScript3
    echo echo Starting $JobScript4 >$JobScript4

#amdahl
else

    dataDirBase=/project/veritas/sembrosk
fi


StatusRunFileSpecification=$3 
user=$USER

#Specify queues
#queues=([1]=workq workq workq workq workq workq workq astro astro astro astro  astro astro astro astro astro astro astro astro workq workq workq workq workq workq workq workq workq workq workq workq workq workq workq workq)

#queues=([1]=astro workq astro workq astro workq astro workq astro workq astro  workq astro workq astro workq astro workq astro workq astro workq astro workq  astro workq astro workq astro workq astro workq astro workq astro )

queues=([1]=astro astro astro astro astro astro astro astro astro astro astro  astro astro astro astro astro astro astro astro astro astro astro astro astro  astro astro astro astro astro astro astro astro astro astro astro)

#queues=([1]=astro astro workq astro astro workq astro astro workq astro astro  workq astro astro workq astro astro workq astro astro workq astro astro workq astro astro workq astro astro workq astro astro workq astro astro)


#Fuctions specify which nodes are to be used ("on" or "off")
#Funtions also specify the energy and specify the starting and ending shower 
#IDs.
#See bottom for numbers and energies for gammas,protons and he4

#******************************************************************************
# Set up arrays for node submission and submit
#*****************************************************************************
let pspecset=0
maxMem=240MB
WALLTIME=20:00:00

if [ $1 = "CR1W" ] || [ $1 = "CR20W" ] || [ $1 = "CR30W" ] ||  [ $1 = "CR40W" ] ||  [ $1 = "CR50W" ]; then

    parspec=$1
    Pspec=P${parspec#CR}   #Fancy string manipulation here, replace CR with P 
                                               #see pg 97 Bash book.
    He4spec=He4_${parspec#CR} #Replace CR with He4_

    if [ "$kssc" = "ksaom" ] || [ "$kssc" = "ksaomVBF" ] || [ "$kssc" = "ksaomVBFRoot" ]; then
        cp -v $KASCADEBASE/inputs/ksAomega$parspec'.config'  \
                                    $KASCADEBASE/inputs/ksAomega$Pspec'.config' 

        cp -v $KASCADEBASE/inputs/ksAomega$parspec'.config'  \
                                    $KASCADEBASE/inputs/ksAomega$He4spec'.config' 
    fi

    let processStart=1
    parspec=$Pspec
    datadir="$dataDirBase/whipple/protons"
    Protons
    parspec=$He4spec
    datadir="$dataDirBase/whipple/he4"
    Helium4
    let pspecset=1;
fi

if [ $1 = "P1W" ] || [ $1 = "P20W" ] || [ $1 = "P30W" ] || [ $1 = "P40W" ] || [ $1 = "P50W" ]; then
    parspec=$1
    datadir="$dataDirBase/whipple/protons"
    let processStart=1
    Protons
    let pspecset=1;
fi

if [ $1 = "He4_1W" ] || [ $1 = "He4_20W" ] || [ $1 = "He4_30W" ] || [ $1 = "He4_40W" ] || [ $1 = "He4_50W" ] ; then
    parspec=$1
    datadir="$dataDirBase/whipple/he4"
    let processStart=1
    Helium4
    let pspecset=1;
fi

if [ $1 = "G1W" ] || [ $1 = "G20W" ] || [ $1 = "G30W" ] || [ $1 = "G40W" ] || [  $1 = "G50W" ]; then
    parspec=$1
    datadir="$dataDirBase/whipple/gammas"
    let processStart=11
    Gammas
    let pspecset=1;
fi


if [ $1 = "CR1V" ] || [ $1 = "CR20V" ] || [ $1 = "CR30V" ] ||  [ $1 = "CR40V" ] ||  [ $1 = "CR50V" ]; then

    parspec=$1
    Pspec=P${parspec#CR}   #Fancy string manipulation here, replace CR with P 
                                               #see pg 97 Bash book.
    He4spec=He4_${parspec#CR} #Replace CR with He4_

    if [ "$kssc" = "ksaom" ] || [ "$kssc" = "ksaomVBF" ] || [ "$kssc" = "ksaomVBFRoot" ]; then
	cp -v $KASCADEBASE/inputs/ksAomega$parspec'.config'  \
                                    $KASCADEBASE/inputs/ksAomega$Pspec'.config' 

	cp -v $KASCADEBASE/inputs/ksAomega$parspec'.config'  \
                                    $KASCADEBASE/inputs/ksAomega$He4spec'.config' 
    fi

    if [ "$kssc" = "ksarraytriggerVBF" ]; then
        cp -v $KASCADEBASE/inputs/ksArrayTrigger$parspec'.config'  \
                                  $KASCADEBASE/inputs/ksArrayTrigger$Pspec'.config' 
        cp -v $KASCADEBASE/inputs/ksArrayTrigger$parspec'.config'  \
                               $KASCADEBASE/inputs/ksArrayTrigger$He4spec'.config' 
    fi

    let processStart=1
    parspec=$Pspec
    datadir="$dataDirBase/veritas/protons"
    Protons
    parspec=$He4spec
    datadir="$dataDirBase/veritas/he4"
    Helium4
    let pspecset=1;
fi


if [ $1 = "P1V" ] || [ $1 = "P20V" ] || [ $1 = "P30V" ] || [ $1 = "P40V" ] || [ $1 = "P50V" ] ; then
    parspec=$1
    datadir="$dataDirBase/veritas/protons"
    let processStart=1
    Protons
    let pspecset=1;
fi

if [ $1 = "He4_1V" ] || [ $1 = "He4_20V" ] || [ $1 = "He4_30V" ] || [ $1 = "He4_40V" ] || [ $1 = "He4_50V" ] ; then
    parspec=$1
    datadir="$dataDirBase/veritas/he4"
    let processStart=1
    Helium4
    let pspecset=1;
fi

if [ $1 = "G1V" ] || [ $1 = "G20V" ] || [ $1 = "G30V" ] || [ $1 = "G40V" ] || [  $1 = "G50V" ] ; then
    parspec=$1
    datadir="$dataDirBase/veritas/gammas"
    let processStart=1
    Gammas
    let pspecset=1;
fi

if [ $pspecset -ne 1 ]; then
    echo No such Particle spec: $1
    exit
fi

if [ $host = 'isis' ] ; then
    chmod 777 $JobScript1
    chmod 777 $JobScript2
    chmod 777 $JobScript3
    chmod 777 $JobScript4

    $JobScript1 &
#    $JobScript2 &
#    $JobScript3 &
#    $JobScript4 &
fi

###########################################################################
#Arguments for ksScript
#$1 primary Energy in GeV (integer only)
#$2 Shower type specification string (To be included in config file names and 
#                                     in shower names:Like P1W,G1W, He4_1W)
#$3 Lowest flie id
#$4 Highest file id.
#$5 data disk directory.(Where output Te/root  files go, cannot be blank!!!)
#$6 PixelStatus Run Fule Name(used by ksAomega only)(can be blank)
#############################################################################
