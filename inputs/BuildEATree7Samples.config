
## ===================================================
## Configuration File - Tue Apr 10 06:55:51 2012
## ===================================================


# Type of simulations used(E_KASCADE, E_ChiLA, E_GrISU) 
EA_SimulationType "E_KASCADE"

# Set this to true to use the effective area curves made 
# with the reconstructed energies (instead of MC energies) 
EA_UseReconstructedEnergy 1

# Set this to true to activate the interpolation in azimuth. 
EA_InterpolateInAzimuth 0

# Set this to the value of the spectral index used to 
# generate the simsulations (e.g. -2.0). This has no effect 
# on the KASCADE sims! 
EA_SimSpectralIndex -2.45

# Set this to the value of the best-estimated spectral index 
# of the real source you are analyzing (e.g. -2.8). This is 
# use to weight the simulations 
EA_RealSpectralIndex -2.5

# If true, modify the effective area vs reconstructed energy 
# upon the spectral index during the EA production and not 
# during stage 6. If false, do not modify the effective area 
# during the effective area production but in stage6. 
# Default is false. 
EA_ModifyEffectiveArea 0

# Specifies which method to use to calculate the safe energy 
# range. The following methods are currently available: 
# Standard (E_EnergyStandard, default), energy threshold 
# calculated as the energy at the peak of the efficiency 
# distribution, max energy as the last point where the 
# effective area has a relative uncertainty <=0.5; Bias 
# (E_EnergyBias) safe energy range calculated upon the 
# maximum energy bias set in EA_MaxAllowedEnergyBias. 
EA_SafeEnergyRangeMethod "E_EnergyEAPrecision"

# Set this to the value of the maximum allowed energy bias. 
# Typically this is set to 10%. We use this value to 
# determine the safe energy range. 
EA_MaxAllowedEnergyBias 0.1

# Set this to the value of the maximum allowed relative 
# uncertainty of the effective area. It must be a value 
# quadratically negligible with respect to the minimum 
# statistical uncertainty required in each spectral 
# point.Default is 0.2, good for 2 sigma minimum 
# significance in each spectral point. 
EA_MaxEffectiveAreaUncertainty 0.2

# Set the window size used for checking the camera noise 
# when using noise in lookup tables.This **MUST** be the 
# same when reading and writing the lookup tables 
EA_WindowSizeForNoise 7

# Radius in meters over which simulated showers are thrown. 
# Is ignored by KASCADE simulations. 
EA_SimThrowRadius_M 750

# Specifies the geometry of the detectors assumed in the 
# simulations: true for volume, false for flat. In Corsika, 
# this corresponds to compiling with the VOLUMEDET option 
# (true) or not (false), and determines whether the throw 
# area requires a cos(zenith) scaling factor. 
EA_IsVolumeDetector 1

# Choose if you want to update the modified effective area 
# (MEA) on-the-fly in Stage6. The EA_SimSpectralIndex and 
# EA_RealSpectralIndex must be set to the appropriate 
# values, otherwise you will get as a result a wrong MEA. 
# There are three possible choices implemented: do not 
# update the MEA (0), update with Glenn's algorithm (1, 
# default), update with Nicola's algorithm (2).If you don't 
# want to update the MEA on-the-fly, the MEA tables produced 
# by the makeEA program will be used (if you specified 
# makeEA to generate MEA's). 
EA_UpdateModifiedEffectiveArea 1

# Disable a check on the EA modification. Effective areas 
# modified in makeEA have a data member that tells the 
# spectral index used for modification. A check on this data 
# member enables or not the modification on the fly in 
# stage6. Old effective area files do not carry this 
# information, therefore if you decide not to modify on the 
# fly in stage6 EAs from an old tables file (vegas<2.2.0), 
# you should set this option to true. Default false. 
EA_DisableCheckEAModification 0

# The is the seed for the random number generator (RNG). The 
# default seed is "0", which means that RNG are initialized 
# with random seeds (based on CPU time...). 
G_GlobalRandomSeed 0

# This is the global debug level. Possible values are 
# "E_NODEBUG", "E_INFO", "E_FULLDEBUG". The default value is 
# "E_NODEBUG", i.e. unless the user specify a higher debug 
# level for specific classes, there will be no debug 
# information produced. 
G_GlobalDebugLevel "E_NODEBUG"

# This is the global debug stream. The default value is 
# "std::cout". Any other value is interpreted as a filename, 
# and the debug information will be streamed to that file. 
G_GlobalDebugStream "std::cout"

# This is a list of classes with specific debug levels and 
# streams. If you want a class called "VASomeThing" to have 
# a debug level of "E_INFO" and stream the output to a file 
# named "myclassdebug.txt", the option should be 
# "VASomeThing/E_INFO/myclassdebug.txt". 
G_DebugOptions 

# False (or 0) for real data. True (or 1) for simulation. 
G_SimulationMode 0

# False (or 0) if we are to try patching events affected by 
# overflow. Default to True (or 1). 
G_DiscardOverflow 1

# Frequency at which information is printed for events. The 
# default value is set to 1000, i.e.,information is printed 
# every 1000 events. A value of 0 should be interpreted as 
# NO PRINTOUT. Any other non-negative value (XXXX) is 
# interpreted as: print every XXXX events. 
G_GlobalProgressPrintFrequency 10000

# Number of events to analyse. Default value is 0, which 
# means all events will be processed. Any other positive 
# integer is interpreted as an upper limit on the number of 
# events to be processed. 
G_NumEventsToAnalyse 0

# Start analysing at this event, skip all previous 
G_EventToStartFrom 0

# comma separated list of pointing offsets [degrees] in 
# camera X-plane. 1==T1, 2==T2, 3==T3, 4==T4. For example, 
# to put an arbitrary 0.05 degree mispointing on T1 and a 
# 0.1 degree mispointing on T2 do: 
# -G_PointingOffsetX=1/0.05,2/0.1 
G_PointingOffsetX 

# comma separated list of pointing offsets [degrees] in 
# camera X-plane. 1==T1, 2==T2, 3==T3, 4==T4. For example, 
# to put an arbitrary 0.1 degree mispointing on T1 and a 
# 0.05 degree mispointing on T2 do: 
# -G_PointingOffsetY=1/0.1,2/0.05 
G_PointingOffsetY 

# Use this option to set a GPS clock to be bad. For the 
# Telescope GPS clocks, the format is 1==T1, 2==T2, 3==T3, 
# 4==T4. Thus to set the GPS clocks for T1 and T3 do 
# -G_BadGPSClocks=1/true, 3/true. You can also set the L3 
# array trigger GPS clock to be bad. In this case, we the 
# index 0 to represet L3. Thus to set the L3, T1 and T3 GPS 
# clocks to be bad, do -G_BadGPSClocks=0/true, 1/true, 
# 3/true. The order is not important. Generally if you are 
# using this option in Stage1, you will need to use it in 
# stage 2 also. These settings will be saved to the run 
# header. 
G_BadGPSClocks 

# You can specify a source name here, e.g. Crab. If there 
# are no source co-ordinates in the run header, maybe 
# because the database was not contacted in stage 1, or you 
# are using simulations, then this can be used in 
# conjunction with VASourceList to get the source 
# co-ordinates for later stage analysis 
G_SourceName "undefined"

